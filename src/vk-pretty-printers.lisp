;;; this file is automatically generated, do not edit

(in-package :vk)

(defmethod print-object ((obj base-out-structure) out)
  (with-slots (s-type
               next)
      obj
    (cl:format out "~i(~@<BASE-OUT-STRUCTURE~:@_:s-type ~s~:@_:next ~s~:>)"
               s-type 
               next)))

(defmethod print-object ((obj base-in-structure) out)
  (with-slots (s-type
               next)
      obj
    (cl:format out "~i(~@<BASE-IN-STRUCTURE~:@_:s-type ~s~:@_:next ~s~:>)"
               s-type 
               next)))

(defmethod print-object ((obj offset-2d) out)
  (with-slots (x
               y)
      obj
    (cl:format out "~i(~@<OFFSET-2D~:@_:x ~s~:@_:y ~s~:>)"
               x 
               y)))

(defmethod print-object ((obj offset-3d) out)
  (with-slots (x
               y
               z)
      obj
    (cl:format out "~i(~@<OFFSET-3D~:@_:x ~s~:@_:y ~s~:@_:z ~s~:>)"
               x 
               y 
               z)))

(defmethod print-object ((obj extent-2d) out)
  (with-slots (width
               height)
      obj
    (cl:format out "~i(~@<EXTENT-2D~:@_:width ~s~:@_:height ~s~:>)"
               width 
               height)))

(defmethod print-object ((obj extent-3d) out)
  (with-slots (width
               height
               depth)
      obj
    (cl:format out "~i(~@<EXTENT-3D~:@_:width ~s~:@_:height ~s~:@_:depth ~s~:>)"
               width 
               height 
               depth)))

(defmethod print-object ((obj viewport) out)
  (with-slots (x
               y
               width
               height
               min-depth
               max-depth)
      obj
    (cl:format out "~i(~@<VIEWPORT~:@_:x ~s~:@_:y ~s~:@_:width ~s~:@_:height ~s~:@_:min-depth ~s~:@_:max-depth ~s~:>)"
               x 
               y 
               width 
               height 
               min-depth 
               max-depth)))

(defmethod print-object ((obj rect-2d) out)
  (with-slots (offset
               extent)
      obj
    (cl:format out "~i(~@<RECT-2D~:@_:offset ~s~:@_:extent ~s~:>)"
               offset 
               extent)))

(defmethod print-object ((obj clear-rect) out)
  (with-slots (rect
               base-array-layer
               layer-count)
      obj
    (cl:format out "~i(~@<CLEAR-RECT~:@_:rect ~s~:@_:base-array-layer ~s~:@_:layer-count ~s~:>)"
               rect 
               base-array-layer 
               layer-count)))

(defmethod print-object ((obj component-mapping) out)
  (with-slots (r
               g
               b
               a)
      obj
    (cl:format out "~i(~@<COMPONENT-MAPPING~:@_:r ~s~:@_:g ~s~:@_:b ~s~:@_:a ~s~:>)"
               r 
               g 
               b 
               a)))

(defmethod print-object ((obj physical-device-properties) out)
  (with-slots (api-version
               driver-version
               vendor-id
               device-id
               device-type
               device-name
               pipeline-cache-uuid
               limits
               sparse-properties)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROPERTIES~:@_:api-version ~s~:@_:driver-version ~s~:@_:vendor-id ~s~:@_:device-id ~s~:@_:device-type ~s~:@_:device-name ~s~:@_:pipeline-cache-uuid ~s~:@_:limits ~s~:@_:sparse-properties ~s~:>)"
               api-version 
               driver-version 
               vendor-id 
               device-id 
               device-type 
               device-name 
               pipeline-cache-uuid 
               limits 
               sparse-properties)))

(defmethod print-object ((obj extension-properties) out)
  (with-slots (extension-name
               spec-version)
      obj
    (cl:format out "~i(~@<EXTENSION-PROPERTIES~:@_:extension-name ~s~:@_:spec-version ~s~:>)"
               extension-name 
               spec-version)))

(defmethod print-object ((obj layer-properties) out)
  (with-slots (layer-name
               spec-version
               implementation-version
               description)
      obj
    (cl:format out "~i(~@<LAYER-PROPERTIES~:@_:layer-name ~s~:@_:spec-version ~s~:@_:implementation-version ~s~:@_:description ~s~:>)"
               layer-name 
               spec-version 
               implementation-version 
               description)))

(defmethod print-object ((obj application-info) out)
  (with-slots (next
               application-name
               application-version
               engine-name
               engine-version
               api-version)
      obj
    (cl:format out "~i(~@<APPLICATION-INFO~:@_:next ~s~:@_:application-name ~s~:@_:application-version ~s~:@_:engine-name ~s~:@_:engine-version ~s~:@_:api-version ~s~:>)"
               next 
               application-name 
               application-version 
               engine-name 
               engine-version 
               api-version)))

(defmethod print-object ((obj allocation-callbacks) out)
  (with-slots (user-data
               pfn-allocation
               pfn-reallocation
               pfn-free
               pfn-internal-allocation
               pfn-internal-free)
      obj
    (cl:format out "~i(~@<ALLOCATION-CALLBACKS~:@_:user-data ~s~:@_:pfn-allocation ~s~:@_:pfn-reallocation ~s~:@_:pfn-free ~s~:@_:pfn-internal-allocation ~s~:@_:pfn-internal-free ~s~:>)"
               user-data 
               pfn-allocation 
               pfn-reallocation 
               pfn-free 
               pfn-internal-allocation 
               pfn-internal-free)))

(defmethod print-object ((obj device-queue-create-info) out)
  (with-slots (next
               flags
               queue-family-index
               queue-priorities)
      obj
    (cl:format out "~i(~@<DEVICE-QUEUE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:queue-family-index ~s~:@_:queue-priorities ~s~:>)"
               next 
               flags 
               queue-family-index 
               queue-priorities)))

(defmethod print-object ((obj device-create-info) out)
  (with-slots (next
               flags
               queue-create-infos
               enabled-layer-names
               enabled-extension-names
               enabled-features)
      obj
    (cl:format out "~i(~@<DEVICE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:queue-create-infos ~s~:@_:enabled-layer-names ~s~:@_:enabled-extension-names ~s~:@_:enabled-features ~s~:>)"
               next 
               flags 
               queue-create-infos 
               enabled-layer-names 
               enabled-extension-names 
               enabled-features)))

(defmethod print-object ((obj instance-create-info) out)
  (with-slots (next
               flags
               application-info
               enabled-layer-names
               enabled-extension-names)
      obj
    (cl:format out "~i(~@<INSTANCE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:application-info ~s~:@_:enabled-layer-names ~s~:@_:enabled-extension-names ~s~:>)"
               next 
               flags 
               application-info 
               enabled-layer-names 
               enabled-extension-names)))

(defmethod print-object ((obj queue-family-properties) out)
  (with-slots (queue-flags
               queue-count
               timestamp-valid-bits
               min-image-transfer-granularity)
      obj
    (cl:format out "~i(~@<QUEUE-FAMILY-PROPERTIES~:@_:queue-flags ~s~:@_:queue-count ~s~:@_:timestamp-valid-bits ~s~:@_:min-image-transfer-granularity ~s~:>)"
               queue-flags 
               queue-count 
               timestamp-valid-bits 
               min-image-transfer-granularity)))

(defmethod print-object ((obj physical-device-memory-properties) out)
  (with-slots (memory-type-count
               memory-types
               memory-heap-count
               memory-heaps)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MEMORY-PROPERTIES~:@_:memory-type-count ~s~:@_:memory-types ~s~:@_:memory-heap-count ~s~:@_:memory-heaps ~s~:>)"
               memory-type-count 
               memory-types 
               memory-heap-count 
               memory-heaps)))

(defmethod print-object ((obj memory-allocate-info) out)
  (with-slots (next
               allocation-size
               memory-type-index)
      obj
    (cl:format out "~i(~@<MEMORY-ALLOCATE-INFO~:@_:next ~s~:@_:allocation-size ~s~:@_:memory-type-index ~s~:>)"
               next 
               allocation-size 
               memory-type-index)))

(defmethod print-object ((obj memory-requirements) out)
  (with-slots (size
               alignment
               memory-type-bits)
      obj
    (cl:format out "~i(~@<MEMORY-REQUIREMENTS~:@_:size ~s~:@_:alignment ~s~:@_:memory-type-bits ~s~:>)"
               size 
               alignment 
               memory-type-bits)))

(defmethod print-object ((obj sparse-image-format-properties) out)
  (with-slots (aspect-mask
               image-granularity
               flags)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-FORMAT-PROPERTIES~:@_:aspect-mask ~s~:@_:image-granularity ~s~:@_:flags ~s~:>)"
               aspect-mask 
               image-granularity 
               flags)))

(defmethod print-object ((obj sparse-image-memory-requirements) out)
  (with-slots (format-properties
               image-mip-tail-first-lod
               image-mip-tail-size
               image-mip-tail-offset
               image-mip-tail-stride)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-MEMORY-REQUIREMENTS~:@_:format-properties ~s~:@_:image-mip-tail-first-lod ~s~:@_:image-mip-tail-size ~s~:@_:image-mip-tail-offset ~s~:@_:image-mip-tail-stride ~s~:>)"
               format-properties 
               image-mip-tail-first-lod 
               image-mip-tail-size 
               image-mip-tail-offset 
               image-mip-tail-stride)))

(defmethod print-object ((obj memory-type) out)
  (with-slots (property-flags
               heap-index)
      obj
    (cl:format out "~i(~@<MEMORY-TYPE~:@_:property-flags ~s~:@_:heap-index ~s~:>)"
               property-flags 
               heap-index)))

(defmethod print-object ((obj memory-heap) out)
  (with-slots (size
               flags)
      obj
    (cl:format out "~i(~@<MEMORY-HEAP~:@_:size ~s~:@_:flags ~s~:>)"
               size 
               flags)))

(defmethod print-object ((obj mapped-memory-range) out)
  (with-slots (next
               memory
               offset
               size)
      obj
    (cl:format out "~i(~@<MAPPED-MEMORY-RANGE~:@_:next ~s~:@_:memory ~s~:@_:offset ~s~:@_:size ~s~:>)"
               next 
               memory 
               offset 
               size)))

(defmethod print-object ((obj format-properties) out)
  (with-slots (linear-tiling-features
               optimal-tiling-features
               buffer-features)
      obj
    (cl:format out "~i(~@<FORMAT-PROPERTIES~:@_:linear-tiling-features ~s~:@_:optimal-tiling-features ~s~:@_:buffer-features ~s~:>)"
               linear-tiling-features 
               optimal-tiling-features 
               buffer-features)))

(defmethod print-object ((obj image-format-properties) out)
  (with-slots (max-extent
               max-mip-levels
               max-array-layers
               sample-counts
               max-resource-size)
      obj
    (cl:format out "~i(~@<IMAGE-FORMAT-PROPERTIES~:@_:max-extent ~s~:@_:max-mip-levels ~s~:@_:max-array-layers ~s~:@_:sample-counts ~s~:@_:max-resource-size ~s~:>)"
               max-extent 
               max-mip-levels 
               max-array-layers 
               sample-counts 
               max-resource-size)))

(defmethod print-object ((obj descriptor-buffer-info) out)
  (with-slots (buffer
               offset
               range)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-BUFFER-INFO~:@_:buffer ~s~:@_:offset ~s~:@_:range ~s~:>)"
               buffer 
               offset 
               range)))

(defmethod print-object ((obj descriptor-image-info) out)
  (with-slots (sampler
               image-view
               image-layout)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-IMAGE-INFO~:@_:sampler ~s~:@_:image-view ~s~:@_:image-layout ~s~:>)"
               sampler 
               image-view 
               image-layout)))

(defmethod print-object ((obj write-descriptor-set) out)
  (with-slots (next
               dst-set
               dst-binding
               dst-array-element
               descriptor-type
               image-info
               buffer-info
               texel-buffer-view)
      obj
    (cl:format out "~i(~@<WRITE-DESCRIPTOR-SET~:@_:next ~s~:@_:dst-set ~s~:@_:dst-binding ~s~:@_:dst-array-element ~s~:@_:descriptor-type ~s~:@_:image-info ~s~:@_:buffer-info ~s~:@_:texel-buffer-view ~s~:>)"
               next 
               dst-set 
               dst-binding 
               dst-array-element 
               descriptor-type 
               image-info 
               buffer-info 
               texel-buffer-view)))

(defmethod print-object ((obj copy-descriptor-set) out)
  (with-slots (next
               src-set
               src-binding
               src-array-element
               dst-set
               dst-binding
               dst-array-element
               descriptor-count)
      obj
    (cl:format out "~i(~@<COPY-DESCRIPTOR-SET~:@_:next ~s~:@_:src-set ~s~:@_:src-binding ~s~:@_:src-array-element ~s~:@_:dst-set ~s~:@_:dst-binding ~s~:@_:dst-array-element ~s~:@_:descriptor-count ~s~:>)"
               next 
               src-set 
               src-binding 
               src-array-element 
               dst-set 
               dst-binding 
               dst-array-element 
               descriptor-count)))

(defmethod print-object ((obj buffer-create-info) out)
  (with-slots (next
               flags
               size
               usage
               sharing-mode
               queue-family-indices)
      obj
    (cl:format out "~i(~@<BUFFER-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:size ~s~:@_:usage ~s~:@_:sharing-mode ~s~:@_:queue-family-indices ~s~:>)"
               next 
               flags 
               size 
               usage 
               sharing-mode 
               queue-family-indices)))

(defmethod print-object ((obj buffer-view-create-info) out)
  (with-slots (next
               flags
               buffer
               format
               offset
               range)
      obj
    (cl:format out "~i(~@<BUFFER-VIEW-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:buffer ~s~:@_:format ~s~:@_:offset ~s~:@_:range ~s~:>)"
               next 
               flags 
               buffer 
               format 
               offset 
               range)))

(defmethod print-object ((obj image-subresource) out)
  (with-slots (aspect-mask
               mip-level
               array-layer)
      obj
    (cl:format out "~i(~@<IMAGE-SUBRESOURCE~:@_:aspect-mask ~s~:@_:mip-level ~s~:@_:array-layer ~s~:>)"
               aspect-mask 
               mip-level 
               array-layer)))

(defmethod print-object ((obj image-subresource-layers) out)
  (with-slots (aspect-mask
               mip-level
               base-array-layer
               layer-count)
      obj
    (cl:format out "~i(~@<IMAGE-SUBRESOURCE-LAYERS~:@_:aspect-mask ~s~:@_:mip-level ~s~:@_:base-array-layer ~s~:@_:layer-count ~s~:>)"
               aspect-mask 
               mip-level 
               base-array-layer 
               layer-count)))

(defmethod print-object ((obj image-subresource-range) out)
  (with-slots (aspect-mask
               base-mip-level
               level-count
               base-array-layer
               layer-count)
      obj
    (cl:format out "~i(~@<IMAGE-SUBRESOURCE-RANGE~:@_:aspect-mask ~s~:@_:base-mip-level ~s~:@_:level-count ~s~:@_:base-array-layer ~s~:@_:layer-count ~s~:>)"
               aspect-mask 
               base-mip-level 
               level-count 
               base-array-layer 
               layer-count)))

(defmethod print-object ((obj memory-barrier) out)
  (with-slots (next
               src-access-mask
               dst-access-mask)
      obj
    (cl:format out "~i(~@<MEMORY-BARRIER~:@_:next ~s~:@_:src-access-mask ~s~:@_:dst-access-mask ~s~:>)"
               next 
               src-access-mask 
               dst-access-mask)))

(defmethod print-object ((obj buffer-memory-barrier) out)
  (with-slots (next
               src-access-mask
               dst-access-mask
               src-queue-family-index
               dst-queue-family-index
               buffer
               offset
               size)
      obj
    (cl:format out "~i(~@<BUFFER-MEMORY-BARRIER~:@_:next ~s~:@_:src-access-mask ~s~:@_:dst-access-mask ~s~:@_:src-queue-family-index ~s~:@_:dst-queue-family-index ~s~:@_:buffer ~s~:@_:offset ~s~:@_:size ~s~:>)"
               next 
               src-access-mask 
               dst-access-mask 
               src-queue-family-index 
               dst-queue-family-index 
               buffer 
               offset 
               size)))

(defmethod print-object ((obj image-memory-barrier) out)
  (with-slots (next
               src-access-mask
               dst-access-mask
               old-layout
               new-layout
               src-queue-family-index
               dst-queue-family-index
               image
               subresource-range)
      obj
    (cl:format out "~i(~@<IMAGE-MEMORY-BARRIER~:@_:next ~s~:@_:src-access-mask ~s~:@_:dst-access-mask ~s~:@_:old-layout ~s~:@_:new-layout ~s~:@_:src-queue-family-index ~s~:@_:dst-queue-family-index ~s~:@_:image ~s~:@_:subresource-range ~s~:>)"
               next 
               src-access-mask 
               dst-access-mask 
               old-layout 
               new-layout 
               src-queue-family-index 
               dst-queue-family-index 
               image 
               subresource-range)))

(defmethod print-object ((obj image-create-info) out)
  (with-slots (next
               flags
               image-type
               format
               extent
               mip-levels
               array-layers
               samples
               tiling
               usage
               sharing-mode
               queue-family-indices
               initial-layout)
      obj
    (cl:format out "~i(~@<IMAGE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:image-type ~s~:@_:format ~s~:@_:extent ~s~:@_:mip-levels ~s~:@_:array-layers ~s~:@_:samples ~s~:@_:tiling ~s~:@_:usage ~s~:@_:sharing-mode ~s~:@_:queue-family-indices ~s~:@_:initial-layout ~s~:>)"
               next 
               flags 
               image-type 
               format 
               extent 
               mip-levels 
               array-layers 
               samples 
               tiling 
               usage 
               sharing-mode 
               queue-family-indices 
               initial-layout)))

(defmethod print-object ((obj subresource-layout) out)
  (with-slots (offset
               size
               row-pitch
               array-pitch
               depth-pitch)
      obj
    (cl:format out "~i(~@<SUBRESOURCE-LAYOUT~:@_:offset ~s~:@_:size ~s~:@_:row-pitch ~s~:@_:array-pitch ~s~:@_:depth-pitch ~s~:>)"
               offset 
               size 
               row-pitch 
               array-pitch 
               depth-pitch)))

(defmethod print-object ((obj image-view-create-info) out)
  (with-slots (next
               flags
               image
               view-type
               format
               components
               subresource-range)
      obj
    (cl:format out "~i(~@<IMAGE-VIEW-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:image ~s~:@_:view-type ~s~:@_:format ~s~:@_:components ~s~:@_:subresource-range ~s~:>)"
               next 
               flags 
               image 
               view-type 
               format 
               components 
               subresource-range)))

(defmethod print-object ((obj buffer-copy) out)
  (with-slots (src-offset
               dst-offset
               size)
      obj
    (cl:format out "~i(~@<BUFFER-COPY~:@_:src-offset ~s~:@_:dst-offset ~s~:@_:size ~s~:>)"
               src-offset 
               dst-offset 
               size)))

(defmethod print-object ((obj sparse-memory-bind) out)
  (with-slots (resource-offset
               size
               memory
               memory-offset
               flags)
      obj
    (cl:format out "~i(~@<SPARSE-MEMORY-BIND~:@_:resource-offset ~s~:@_:size ~s~:@_:memory ~s~:@_:memory-offset ~s~:@_:flags ~s~:>)"
               resource-offset 
               size 
               memory 
               memory-offset 
               flags)))

(defmethod print-object ((obj sparse-image-memory-bind) out)
  (with-slots (subresource
               offset
               extent
               memory
               memory-offset
               flags)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-MEMORY-BIND~:@_:subresource ~s~:@_:offset ~s~:@_:extent ~s~:@_:memory ~s~:@_:memory-offset ~s~:@_:flags ~s~:>)"
               subresource 
               offset 
               extent 
               memory 
               memory-offset 
               flags)))

(defmethod print-object ((obj sparse-buffer-memory-bind-info) out)
  (with-slots (buffer
               binds)
      obj
    (cl:format out "~i(~@<SPARSE-BUFFER-MEMORY-BIND-INFO~:@_:buffer ~s~:@_:binds ~s~:>)"
               buffer 
               binds)))

(defmethod print-object ((obj sparse-image-opaque-memory-bind-info) out)
  (with-slots (image
               binds)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-OPAQUE-MEMORY-BIND-INFO~:@_:image ~s~:@_:binds ~s~:>)"
               image 
               binds)))

(defmethod print-object ((obj sparse-image-memory-bind-info) out)
  (with-slots (image
               binds)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-MEMORY-BIND-INFO~:@_:image ~s~:@_:binds ~s~:>)"
               image 
               binds)))

(defmethod print-object ((obj bind-sparse-info) out)
  (with-slots (next
               wait-semaphores
               buffer-binds
               image-opaque-binds
               image-binds
               signal-semaphores)
      obj
    (cl:format out "~i(~@<BIND-SPARSE-INFO~:@_:next ~s~:@_:wait-semaphores ~s~:@_:buffer-binds ~s~:@_:image-opaque-binds ~s~:@_:image-binds ~s~:@_:signal-semaphores ~s~:>)"
               next 
               wait-semaphores 
               buffer-binds 
               image-opaque-binds 
               image-binds 
               signal-semaphores)))

(defmethod print-object ((obj image-copy) out)
  (with-slots (src-subresource
               src-offset
               dst-subresource
               dst-offset
               extent)
      obj
    (cl:format out "~i(~@<IMAGE-COPY~:@_:src-subresource ~s~:@_:src-offset ~s~:@_:dst-subresource ~s~:@_:dst-offset ~s~:@_:extent ~s~:>)"
               src-subresource 
               src-offset 
               dst-subresource 
               dst-offset 
               extent)))

(defmethod print-object ((obj image-blit) out)
  (with-slots (src-subresource
               src-offsets
               dst-subresource
               dst-offsets)
      obj
    (cl:format out "~i(~@<IMAGE-BLIT~:@_:src-subresource ~s~:@_:src-offsets ~s~:@_:dst-subresource ~s~:@_:dst-offsets ~s~:>)"
               src-subresource 
               src-offsets 
               dst-subresource 
               dst-offsets)))

(defmethod print-object ((obj buffer-image-copy) out)
  (with-slots (buffer-offset
               buffer-row-length
               buffer-image-height
               image-subresource
               image-offset
               image-extent)
      obj
    (cl:format out "~i(~@<BUFFER-IMAGE-COPY~:@_:buffer-offset ~s~:@_:buffer-row-length ~s~:@_:buffer-image-height ~s~:@_:image-subresource ~s~:@_:image-offset ~s~:@_:image-extent ~s~:>)"
               buffer-offset 
               buffer-row-length 
               buffer-image-height 
               image-subresource 
               image-offset 
               image-extent)))

(defmethod print-object ((obj image-resolve) out)
  (with-slots (src-subresource
               src-offset
               dst-subresource
               dst-offset
               extent)
      obj
    (cl:format out "~i(~@<IMAGE-RESOLVE~:@_:src-subresource ~s~:@_:src-offset ~s~:@_:dst-subresource ~s~:@_:dst-offset ~s~:@_:extent ~s~:>)"
               src-subresource 
               src-offset 
               dst-subresource 
               dst-offset 
               extent)))

(defmethod print-object ((obj shader-module-create-info) out)
  (with-slots (next
               flags
               code)
      obj
    (cl:format out "~i(~@<SHADER-MODULE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:code ~s~:>)"
               next 
               flags 
               code)))

(defmethod print-object ((obj descriptor-set-layout-binding) out)
  (with-slots (binding
               descriptor-type
               descriptor-count
               stage-flags
               immutable-samplers)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-LAYOUT-BINDING~:@_:binding ~s~:@_:descriptor-type ~s~:@_:descriptor-count ~s~:@_:stage-flags ~s~:@_:immutable-samplers ~s~:>)"
               binding 
               descriptor-type 
               descriptor-count 
               stage-flags 
               immutable-samplers)))

(defmethod print-object ((obj descriptor-set-layout-create-info) out)
  (with-slots (next
               flags
               bindings)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-LAYOUT-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:bindings ~s~:>)"
               next 
               flags 
               bindings)))

(defmethod print-object ((obj descriptor-pool-size) out)
  (with-slots (type
               descriptor-count)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-POOL-SIZE~:@_:type ~s~:@_:descriptor-count ~s~:>)"
               type 
               descriptor-count)))

(defmethod print-object ((obj descriptor-pool-create-info) out)
  (with-slots (next
               flags
               max-sets
               pool-sizes)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-POOL-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:max-sets ~s~:@_:pool-sizes ~s~:>)"
               next 
               flags 
               max-sets 
               pool-sizes)))

(defmethod print-object ((obj descriptor-set-allocate-info) out)
  (with-slots (next
               descriptor-pool
               set-layouts)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-ALLOCATE-INFO~:@_:next ~s~:@_:descriptor-pool ~s~:@_:set-layouts ~s~:>)"
               next 
               descriptor-pool 
               set-layouts)))

(defmethod print-object ((obj specialization-map-entry) out)
  (with-slots (constant-id
               offset
               size)
      obj
    (cl:format out "~i(~@<SPECIALIZATION-MAP-ENTRY~:@_:constant-id ~s~:@_:offset ~s~:@_:size ~s~:>)"
               constant-id 
               offset 
               size)))

(defmethod print-object ((obj specialization-info) out)
  (with-slots (map-entries
               data-size
               data)
      obj
    (cl:format out "~i(~@<SPECIALIZATION-INFO~:@_:map-entries ~s~:@_:data-size ~s~:@_:data ~s~:>)"
               map-entries 
               data-size 
               data)))

(defmethod print-object ((obj pipeline-shader-stage-create-info) out)
  (with-slots (next
               flags
               stage
               module
               name
               specialization-info)
      obj
    (cl:format out "~i(~@<PIPELINE-SHADER-STAGE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:stage ~s~:@_:module ~s~:@_:name ~s~:@_:specialization-info ~s~:>)"
               next 
               flags 
               stage 
               module 
               name 
               specialization-info)))

(defmethod print-object ((obj compute-pipeline-create-info) out)
  (with-slots (next
               flags
               stage
               layout
               base-pipeline-handle
               base-pipeline-index)
      obj
    (cl:format out "~i(~@<COMPUTE-PIPELINE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:stage ~s~:@_:layout ~s~:@_:base-pipeline-handle ~s~:@_:base-pipeline-index ~s~:>)"
               next 
               flags 
               stage 
               layout 
               base-pipeline-handle 
               base-pipeline-index)))

(defmethod print-object ((obj vertex-input-binding-description) out)
  (with-slots (binding
               stride
               input-rate)
      obj
    (cl:format out "~i(~@<VERTEX-INPUT-BINDING-DESCRIPTION~:@_:binding ~s~:@_:stride ~s~:@_:input-rate ~s~:>)"
               binding 
               stride 
               input-rate)))

(defmethod print-object ((obj vertex-input-attribute-description) out)
  (with-slots (location
               binding
               format
               offset)
      obj
    (cl:format out "~i(~@<VERTEX-INPUT-ATTRIBUTE-DESCRIPTION~:@_:location ~s~:@_:binding ~s~:@_:format ~s~:@_:offset ~s~:>)"
               location 
               binding 
               format 
               offset)))

(defmethod print-object ((obj pipeline-vertex-input-state-create-info) out)
  (with-slots (next
               flags
               vertex-binding-descriptions
               vertex-attribute-descriptions)
      obj
    (cl:format out "~i(~@<PIPELINE-VERTEX-INPUT-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:vertex-binding-descriptions ~s~:@_:vertex-attribute-descriptions ~s~:>)"
               next 
               flags 
               vertex-binding-descriptions 
               vertex-attribute-descriptions)))

(defmethod print-object ((obj pipeline-input-assembly-state-create-info) out)
  (with-slots (next
               flags
               topology
               primitive-restart-enable)
      obj
    (cl:format out "~i(~@<PIPELINE-INPUT-ASSEMBLY-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:topology ~s~:@_:primitive-restart-enable ~s~:>)"
               next 
               flags 
               topology 
               primitive-restart-enable)))

(defmethod print-object ((obj pipeline-tessellation-state-create-info) out)
  (with-slots (next
               flags
               patch-control-points)
      obj
    (cl:format out "~i(~@<PIPELINE-TESSELLATION-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:patch-control-points ~s~:>)"
               next 
               flags 
               patch-control-points)))

(defmethod print-object ((obj pipeline-viewport-state-create-info) out)
  (with-slots (next
               flags
               viewports
               scissors)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:viewports ~s~:@_:scissors ~s~:>)"
               next 
               flags 
               viewports 
               scissors)))

(defmethod print-object ((obj pipeline-rasterization-state-create-info) out)
  (with-slots (next
               flags
               depth-clamp-enable
               rasterizer-discard-enable
               polygon-mode
               cull-mode
               front-face
               depth-bias-enable
               depth-bias-constant-factor
               depth-bias-clamp
               depth-bias-slope-factor
               line-width)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:depth-clamp-enable ~s~:@_:rasterizer-discard-enable ~s~:@_:polygon-mode ~s~:@_:cull-mode ~s~:@_:front-face ~s~:@_:depth-bias-enable ~s~:@_:depth-bias-constant-factor ~s~:@_:depth-bias-clamp ~s~:@_:depth-bias-slope-factor ~s~:@_:line-width ~s~:>)"
               next 
               flags 
               depth-clamp-enable 
               rasterizer-discard-enable 
               polygon-mode 
               cull-mode 
               front-face 
               depth-bias-enable 
               depth-bias-constant-factor 
               depth-bias-clamp 
               depth-bias-slope-factor 
               line-width)))

(defmethod print-object ((obj pipeline-multisample-state-create-info) out)
  (with-slots (next
               flags
               rasterization-samples
               sample-shading-enable
               min-sample-shading
               sample-mask
               alpha-to-coverage-enable
               alpha-to-one-enable)
      obj
    (cl:format out "~i(~@<PIPELINE-MULTISAMPLE-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:rasterization-samples ~s~:@_:sample-shading-enable ~s~:@_:min-sample-shading ~s~:@_:sample-mask ~s~:@_:alpha-to-coverage-enable ~s~:@_:alpha-to-one-enable ~s~:>)"
               next 
               flags 
               rasterization-samples 
               sample-shading-enable 
               min-sample-shading 
               sample-mask 
               alpha-to-coverage-enable 
               alpha-to-one-enable)))

(defmethod print-object ((obj pipeline-color-blend-attachment-state) out)
  (with-slots (blend-enable
               src-color-blend-factor
               dst-color-blend-factor
               color-blend-op
               src-alpha-blend-factor
               dst-alpha-blend-factor
               alpha-blend-op
               color-write-mask)
      obj
    (cl:format out "~i(~@<PIPELINE-COLOR-BLEND-ATTACHMENT-STATE~:@_:blend-enable ~s~:@_:src-color-blend-factor ~s~:@_:dst-color-blend-factor ~s~:@_:color-blend-op ~s~:@_:src-alpha-blend-factor ~s~:@_:dst-alpha-blend-factor ~s~:@_:alpha-blend-op ~s~:@_:color-write-mask ~s~:>)"
               blend-enable 
               src-color-blend-factor 
               dst-color-blend-factor 
               color-blend-op 
               src-alpha-blend-factor 
               dst-alpha-blend-factor 
               alpha-blend-op 
               color-write-mask)))

(defmethod print-object ((obj pipeline-color-blend-state-create-info) out)
  (with-slots (next
               flags
               logic-op-enable
               logic-op
               attachments
               blend-constants)
      obj
    (cl:format out "~i(~@<PIPELINE-COLOR-BLEND-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:logic-op-enable ~s~:@_:logic-op ~s~:@_:attachments ~s~:@_:blend-constants ~s~:>)"
               next 
               flags 
               logic-op-enable 
               logic-op 
               attachments 
               blend-constants)))

(defmethod print-object ((obj pipeline-dynamic-state-create-info) out)
  (with-slots (next
               flags
               dynamic-states)
      obj
    (cl:format out "~i(~@<PIPELINE-DYNAMIC-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:dynamic-states ~s~:>)"
               next 
               flags 
               dynamic-states)))

(defmethod print-object ((obj stencil-op-state) out)
  (with-slots (fail-op
               pass-op
               depth-fail-op
               compare-op
               compare-mask
               write-mask
               reference)
      obj
    (cl:format out "~i(~@<STENCIL-OP-STATE~:@_:fail-op ~s~:@_:pass-op ~s~:@_:depth-fail-op ~s~:@_:compare-op ~s~:@_:compare-mask ~s~:@_:write-mask ~s~:@_:reference ~s~:>)"
               fail-op 
               pass-op 
               depth-fail-op 
               compare-op 
               compare-mask 
               write-mask 
               reference)))

(defmethod print-object ((obj pipeline-depth-stencil-state-create-info) out)
  (with-slots (next
               flags
               depth-test-enable
               depth-write-enable
               depth-compare-op
               depth-bounds-test-enable
               stencil-test-enable
               front
               back
               min-depth-bounds
               max-depth-bounds)
      obj
    (cl:format out "~i(~@<PIPELINE-DEPTH-STENCIL-STATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:depth-test-enable ~s~:@_:depth-write-enable ~s~:@_:depth-compare-op ~s~:@_:depth-bounds-test-enable ~s~:@_:stencil-test-enable ~s~:@_:front ~s~:@_:back ~s~:@_:min-depth-bounds ~s~:@_:max-depth-bounds ~s~:>)"
               next 
               flags 
               depth-test-enable 
               depth-write-enable 
               depth-compare-op 
               depth-bounds-test-enable 
               stencil-test-enable 
               front 
               back 
               min-depth-bounds 
               max-depth-bounds)))

(defmethod print-object ((obj graphics-pipeline-create-info) out)
  (with-slots (next
               flags
               stages
               vertex-input-state
               input-assembly-state
               tessellation-state
               viewport-state
               rasterization-state
               multisample-state
               depth-stencil-state
               color-blend-state
               dynamic-state
               layout
               render-pass
               subpass
               base-pipeline-handle
               base-pipeline-index)
      obj
    (cl:format out "~i(~@<GRAPHICS-PIPELINE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:stages ~s~:@_:vertex-input-state ~s~:@_:input-assembly-state ~s~:@_:tessellation-state ~s~:@_:viewport-state ~s~:@_:rasterization-state ~s~:@_:multisample-state ~s~:@_:depth-stencil-state ~s~:@_:color-blend-state ~s~:@_:dynamic-state ~s~:@_:layout ~s~:@_:render-pass ~s~:@_:subpass ~s~:@_:base-pipeline-handle ~s~:@_:base-pipeline-index ~s~:>)"
               next 
               flags 
               stages 
               vertex-input-state 
               input-assembly-state 
               tessellation-state 
               viewport-state 
               rasterization-state 
               multisample-state 
               depth-stencil-state 
               color-blend-state 
               dynamic-state 
               layout 
               render-pass 
               subpass 
               base-pipeline-handle 
               base-pipeline-index)))

(defmethod print-object ((obj pipeline-cache-create-info) out)
  (with-slots (next
               flags
               initial-data-size
               initial-data)
      obj
    (cl:format out "~i(~@<PIPELINE-CACHE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:initial-data-size ~s~:@_:initial-data ~s~:>)"
               next 
               flags 
               initial-data-size 
               initial-data)))

(defmethod print-object ((obj pipeline-cache-header-version-one) out)
  (with-slots (header-size
               header-version
               vendor-id
               device-id
               pipeline-cache-uuid)
      obj
    (cl:format out "~i(~@<PIPELINE-CACHE-HEADER-VERSION-ONE~:@_:header-size ~s~:@_:header-version ~s~:@_:vendor-id ~s~:@_:device-id ~s~:@_:pipeline-cache-uuid ~s~:>)"
               header-size 
               header-version 
               vendor-id 
               device-id 
               pipeline-cache-uuid)))

(defmethod print-object ((obj push-constant-range) out)
  (with-slots (stage-flags
               offset
               size)
      obj
    (cl:format out "~i(~@<PUSH-CONSTANT-RANGE~:@_:stage-flags ~s~:@_:offset ~s~:@_:size ~s~:>)"
               stage-flags 
               offset 
               size)))

(defmethod print-object ((obj pipeline-layout-create-info) out)
  (with-slots (next
               flags
               set-layouts
               push-constant-ranges)
      obj
    (cl:format out "~i(~@<PIPELINE-LAYOUT-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:set-layouts ~s~:@_:push-constant-ranges ~s~:>)"
               next 
               flags 
               set-layouts 
               push-constant-ranges)))

(defmethod print-object ((obj sampler-create-info) out)
  (with-slots (next
               flags
               mag-filter
               min-filter
               mipmap-mode
               address-mode-u
               address-mode-v
               address-mode-w
               mip-lod-bias
               anisotropy-enable
               max-anisotropy
               compare-enable
               compare-op
               min-lod
               max-lod
               border-color
               unnormalized-coordinates)
      obj
    (cl:format out "~i(~@<SAMPLER-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:mag-filter ~s~:@_:min-filter ~s~:@_:mipmap-mode ~s~:@_:address-mode-u ~s~:@_:address-mode-v ~s~:@_:address-mode-w ~s~:@_:mip-lod-bias ~s~:@_:anisotropy-enable ~s~:@_:max-anisotropy ~s~:@_:compare-enable ~s~:@_:compare-op ~s~:@_:min-lod ~s~:@_:max-lod ~s~:@_:border-color ~s~:@_:unnormalized-coordinates ~s~:>)"
               next 
               flags 
               mag-filter 
               min-filter 
               mipmap-mode 
               address-mode-u 
               address-mode-v 
               address-mode-w 
               mip-lod-bias 
               anisotropy-enable 
               max-anisotropy 
               compare-enable 
               compare-op 
               min-lod 
               max-lod 
               border-color 
               unnormalized-coordinates)))

(defmethod print-object ((obj command-pool-create-info) out)
  (with-slots (next
               flags
               queue-family-index)
      obj
    (cl:format out "~i(~@<COMMAND-POOL-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:queue-family-index ~s~:>)"
               next 
               flags 
               queue-family-index)))

(defmethod print-object ((obj command-buffer-allocate-info) out)
  (with-slots (next
               command-pool
               level
               command-buffer-count)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-ALLOCATE-INFO~:@_:next ~s~:@_:command-pool ~s~:@_:level ~s~:@_:command-buffer-count ~s~:>)"
               next 
               command-pool 
               level 
               command-buffer-count)))

(defmethod print-object ((obj command-buffer-inheritance-info) out)
  (with-slots (next
               render-pass
               subpass
               framebuffer
               occlusion-query-enable
               query-flags
               pipeline-statistics)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-INHERITANCE-INFO~:@_:next ~s~:@_:render-pass ~s~:@_:subpass ~s~:@_:framebuffer ~s~:@_:occlusion-query-enable ~s~:@_:query-flags ~s~:@_:pipeline-statistics ~s~:>)"
               next 
               render-pass 
               subpass 
               framebuffer 
               occlusion-query-enable 
               query-flags 
               pipeline-statistics)))

(defmethod print-object ((obj command-buffer-begin-info) out)
  (with-slots (next
               flags
               inheritance-info)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-BEGIN-INFO~:@_:next ~s~:@_:flags ~s~:@_:inheritance-info ~s~:>)"
               next 
               flags 
               inheritance-info)))

(defmethod print-object ((obj render-pass-begin-info) out)
  (with-slots (next
               render-pass
               framebuffer
               render-area
               clear-values)
      obj
    (cl:format out "~i(~@<RENDER-PASS-BEGIN-INFO~:@_:next ~s~:@_:render-pass ~s~:@_:framebuffer ~s~:@_:render-area ~s~:@_:clear-values ~s~:>)"
               next 
               render-pass 
               framebuffer 
               render-area 
               clear-values)))

(defmethod print-object ((obj clear-color-value) out)
  (with-slots (float-32
               int-32
               uint-32)
      obj
    (cl:format out "~i(~@<CLEAR-COLOR-VALUE~:@_:float-32 ~s~:@_:int-32 ~s~:@_:uint-32 ~s~:>)"
               float-32 
               int-32 
               uint-32)))

(defmethod print-object ((obj clear-depth-stencil-value) out)
  (with-slots (depth
               stencil)
      obj
    (cl:format out "~i(~@<CLEAR-DEPTH-STENCIL-VALUE~:@_:depth ~s~:@_:stencil ~s~:>)"
               depth 
               stencil)))

(defmethod print-object ((obj clear-value) out)
  (with-slots (color
               depth-stencil)
      obj
    (cl:format out "~i(~@<CLEAR-VALUE~:@_:color ~s~:@_:depth-stencil ~s~:>)"
               color 
               depth-stencil)))

(defmethod print-object ((obj clear-attachment) out)
  (with-slots (aspect-mask
               color-attachment
               clear-value)
      obj
    (cl:format out "~i(~@<CLEAR-ATTACHMENT~:@_:aspect-mask ~s~:@_:color-attachment ~s~:@_:clear-value ~s~:>)"
               aspect-mask 
               color-attachment 
               clear-value)))

(defmethod print-object ((obj attachment-description) out)
  (with-slots (flags
               format
               samples
               load-op
               store-op
               stencil-load-op
               stencil-store-op
               initial-layout
               final-layout)
      obj
    (cl:format out "~i(~@<ATTACHMENT-DESCRIPTION~:@_:flags ~s~:@_:format ~s~:@_:samples ~s~:@_:load-op ~s~:@_:store-op ~s~:@_:stencil-load-op ~s~:@_:stencil-store-op ~s~:@_:initial-layout ~s~:@_:final-layout ~s~:>)"
               flags 
               format 
               samples 
               load-op 
               store-op 
               stencil-load-op 
               stencil-store-op 
               initial-layout 
               final-layout)))

(defmethod print-object ((obj attachment-reference) out)
  (with-slots (attachment
               layout)
      obj
    (cl:format out "~i(~@<ATTACHMENT-REFERENCE~:@_:attachment ~s~:@_:layout ~s~:>)"
               attachment 
               layout)))

(defmethod print-object ((obj subpass-description) out)
  (with-slots (flags
               pipeline-bind-point
               input-attachments
               color-attachments
               resolve-attachments
               depth-stencil-attachment
               preserve-attachments)
      obj
    (cl:format out "~i(~@<SUBPASS-DESCRIPTION~:@_:flags ~s~:@_:pipeline-bind-point ~s~:@_:input-attachments ~s~:@_:color-attachments ~s~:@_:resolve-attachments ~s~:@_:depth-stencil-attachment ~s~:@_:preserve-attachments ~s~:>)"
               flags 
               pipeline-bind-point 
               input-attachments 
               color-attachments 
               resolve-attachments 
               depth-stencil-attachment 
               preserve-attachments)))

(defmethod print-object ((obj subpass-dependency) out)
  (with-slots (src-subpass
               dst-subpass
               src-stage-mask
               dst-stage-mask
               src-access-mask
               dst-access-mask
               dependency-flags)
      obj
    (cl:format out "~i(~@<SUBPASS-DEPENDENCY~:@_:src-subpass ~s~:@_:dst-subpass ~s~:@_:src-stage-mask ~s~:@_:dst-stage-mask ~s~:@_:src-access-mask ~s~:@_:dst-access-mask ~s~:@_:dependency-flags ~s~:>)"
               src-subpass 
               dst-subpass 
               src-stage-mask 
               dst-stage-mask 
               src-access-mask 
               dst-access-mask 
               dependency-flags)))

(defmethod print-object ((obj render-pass-create-info) out)
  (with-slots (next
               flags
               attachments
               subpasses
               dependencies)
      obj
    (cl:format out "~i(~@<RENDER-PASS-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:attachments ~s~:@_:subpasses ~s~:@_:dependencies ~s~:>)"
               next 
               flags 
               attachments 
               subpasses 
               dependencies)))

(defmethod print-object ((obj event-create-info) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<EVENT-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj fence-create-info) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<FENCE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj physical-device-features) out)
  (with-slots (robust-buffer-access
               full-draw-index-uint-32
               image-cube-array
               independent-blend
               geometry-shader
               tessellation-shader
               sample-rate-shading
               dual-src-blend
               logic-op
               multi-draw-indirect
               draw-indirect-first-instance
               depth-clamp
               depth-bias-clamp
               fill-mode-non-solid
               depth-bounds
               wide-lines
               large-points
               alpha-to-one
               multi-viewport
               sampler-anisotropy
               texture-compression-etc2
               texture-compression-astc_-ldr
               texture-compression-bc
               occlusion-query-precise
               pipeline-statistics-query
               vertex-pipeline-stores-and-atomics
               fragment-stores-and-atomics
               shader-tessellation-and-geometry-point-size
               shader-image-gather-extended
               shader-storage-image-extended-formats
               shader-storage-image-multisample
               shader-storage-image-read-without-format
               shader-storage-image-write-without-format
               shader-uniform-buffer-array-dynamic-indexing
               shader-sampled-image-array-dynamic-indexing
               shader-storage-buffer-array-dynamic-indexing
               shader-storage-image-array-dynamic-indexing
               shader-clip-distance
               shader-cull-distance
               shader-float-64
               shader-int-64
               shader-int-16
               shader-resource-residency
               shader-resource-min-lod
               sparse-binding
               sparse-residency-buffer
               sparse-residency-image-2d
               sparse-residency-image-3d
               sparse-residency-2-samples
               sparse-residency-4-samples
               sparse-residency-8-samples
               sparse-residency-16-samples
               sparse-residency-aliased
               variable-multisample-rate
               inherited-queries)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FEATURES~:@_:robust-buffer-access ~s~:@_:full-draw-index-uint-32 ~s~:@_:image-cube-array ~s~:@_:independent-blend ~s~:@_:geometry-shader ~s~:@_:tessellation-shader ~s~:@_:sample-rate-shading ~s~:@_:dual-src-blend ~s~:@_:logic-op ~s~:@_:multi-draw-indirect ~s~:@_:draw-indirect-first-instance ~s~:@_:depth-clamp ~s~:@_:depth-bias-clamp ~s~:@_:fill-mode-non-solid ~s~:@_:depth-bounds ~s~:@_:wide-lines ~s~:@_:large-points ~s~:@_:alpha-to-one ~s~:@_:multi-viewport ~s~:@_:sampler-anisotropy ~s~:@_:texture-compression-etc2 ~s~:@_:texture-compression-astc_-ldr ~s~:@_:texture-compression-bc ~s~:@_:occlusion-query-precise ~s~:@_:pipeline-statistics-query ~s~:@_:vertex-pipeline-stores-and-atomics ~s~:@_:fragment-stores-and-atomics ~s~:@_:shader-tessellation-and-geometry-point-size ~s~:@_:shader-image-gather-extended ~s~:@_:shader-storage-image-extended-formats ~s~:@_:shader-storage-image-multisample ~s~:@_:shader-storage-image-read-without-format ~s~:@_:shader-storage-image-write-without-format ~s~:@_:shader-uniform-buffer-array-dynamic-indexing ~s~:@_:shader-sampled-image-array-dynamic-indexing ~s~:@_:shader-storage-buffer-array-dynamic-indexing ~s~:@_:shader-storage-image-array-dynamic-indexing ~s~:@_:shader-clip-distance ~s~:@_:shader-cull-distance ~s~:@_:shader-float-64 ~s~:@_:shader-int-64 ~s~:@_:shader-int-16 ~s~:@_:shader-resource-residency ~s~:@_:shader-resource-min-lod ~s~:@_:sparse-binding ~s~:@_:sparse-residency-buffer ~s~:@_:sparse-residency-image-2d ~s~:@_:sparse-residency-image-3d ~s~:@_:sparse-residency-2-samples ~s~:@_:sparse-residency-4-samples ~s~:@_:sparse-residency-8-samples ~s~:@_:sparse-residency-16-samples ~s~:@_:sparse-residency-aliased ~s~:@_:variable-multisample-rate ~s~:@_:inherited-queries ~s~:>)"
               robust-buffer-access 
               full-draw-index-uint-32 
               image-cube-array 
               independent-blend 
               geometry-shader 
               tessellation-shader 
               sample-rate-shading 
               dual-src-blend 
               logic-op 
               multi-draw-indirect 
               draw-indirect-first-instance 
               depth-clamp 
               depth-bias-clamp 
               fill-mode-non-solid 
               depth-bounds 
               wide-lines 
               large-points 
               alpha-to-one 
               multi-viewport 
               sampler-anisotropy 
               texture-compression-etc2 
               texture-compression-astc_-ldr 
               texture-compression-bc 
               occlusion-query-precise 
               pipeline-statistics-query 
               vertex-pipeline-stores-and-atomics 
               fragment-stores-and-atomics 
               shader-tessellation-and-geometry-point-size 
               shader-image-gather-extended 
               shader-storage-image-extended-formats 
               shader-storage-image-multisample 
               shader-storage-image-read-without-format 
               shader-storage-image-write-without-format 
               shader-uniform-buffer-array-dynamic-indexing 
               shader-sampled-image-array-dynamic-indexing 
               shader-storage-buffer-array-dynamic-indexing 
               shader-storage-image-array-dynamic-indexing 
               shader-clip-distance 
               shader-cull-distance 
               shader-float-64 
               shader-int-64 
               shader-int-16 
               shader-resource-residency 
               shader-resource-min-lod 
               sparse-binding 
               sparse-residency-buffer 
               sparse-residency-image-2d 
               sparse-residency-image-3d 
               sparse-residency-2-samples 
               sparse-residency-4-samples 
               sparse-residency-8-samples 
               sparse-residency-16-samples 
               sparse-residency-aliased 
               variable-multisample-rate 
               inherited-queries)))

(defmethod print-object ((obj physical-device-sparse-properties) out)
  (with-slots (residency-standard-2d-block-shape
               residency-standard-2d-multisample-block-shape
               residency-standard-3d-block-shape
               residency-aligned-mip-size
               residency-non-resident-strict)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SPARSE-PROPERTIES~:@_:residency-standard-2d-block-shape ~s~:@_:residency-standard-2d-multisample-block-shape ~s~:@_:residency-standard-3d-block-shape ~s~:@_:residency-aligned-mip-size ~s~:@_:residency-non-resident-strict ~s~:>)"
               residency-standard-2d-block-shape 
               residency-standard-2d-multisample-block-shape 
               residency-standard-3d-block-shape 
               residency-aligned-mip-size 
               residency-non-resident-strict)))

(defmethod print-object ((obj physical-device-limits) out)
  (with-slots (max-image-dimension-1d
               max-image-dimension-2d
               max-image-dimension-3d
               max-image-dimension-cube
               max-image-array-layers
               max-texel-buffer-elements
               max-uniform-buffer-range
               max-storage-buffer-range
               max-push-constants-size
               max-memory-allocation-count
               max-sampler-allocation-count
               buffer-image-granularity
               sparse-address-space-size
               max-bound-descriptor-sets
               max-per-stage-descriptor-samplers
               max-per-stage-descriptor-uniform-buffers
               max-per-stage-descriptor-storage-buffers
               max-per-stage-descriptor-sampled-images
               max-per-stage-descriptor-storage-images
               max-per-stage-descriptor-input-attachments
               max-per-stage-resources
               max-descriptor-set-samplers
               max-descriptor-set-uniform-buffers
               max-descriptor-set-uniform-buffers-dynamic
               max-descriptor-set-storage-buffers
               max-descriptor-set-storage-buffers-dynamic
               max-descriptor-set-sampled-images
               max-descriptor-set-storage-images
               max-descriptor-set-input-attachments
               max-vertex-input-attributes
               max-vertex-input-bindings
               max-vertex-input-attribute-offset
               max-vertex-input-binding-stride
               max-vertex-output-components
               max-tessellation-generation-level
               max-tessellation-patch-size
               max-tessellation-control-per-vertex-input-components
               max-tessellation-control-per-vertex-output-components
               max-tessellation-control-per-patch-output-components
               max-tessellation-control-total-output-components
               max-tessellation-evaluation-input-components
               max-tessellation-evaluation-output-components
               max-geometry-shader-invocations
               max-geometry-input-components
               max-geometry-output-components
               max-geometry-output-vertices
               max-geometry-total-output-components
               max-fragment-input-components
               max-fragment-output-attachments
               max-fragment-dual-src-attachments
               max-fragment-combined-output-resources
               max-compute-shared-memory-size
               max-compute-work-group-count
               max-compute-work-group-invocations
               max-compute-work-group-size
               sub-pixel-precision-bits
               sub-texel-precision-bits
               mipmap-precision-bits
               max-draw-indexed-index-value
               max-draw-indirect-count
               max-sampler-lod-bias
               max-sampler-anisotropy
               max-viewports
               max-viewport-dimensions
               viewport-bounds-range
               viewport-sub-pixel-bits
               min-memory-map-alignment
               min-texel-buffer-offset-alignment
               min-uniform-buffer-offset-alignment
               min-storage-buffer-offset-alignment
               min-texel-offset
               max-texel-offset
               min-texel-gather-offset
               max-texel-gather-offset
               min-interpolation-offset
               max-interpolation-offset
               sub-pixel-interpolation-offset-bits
               max-framebuffer-width
               max-framebuffer-height
               max-framebuffer-layers
               framebuffer-color-sample-counts
               framebuffer-depth-sample-counts
               framebuffer-stencil-sample-counts
               framebuffer-no-attachments-sample-counts
               max-color-attachments
               sampled-image-color-sample-counts
               sampled-image-integer-sample-counts
               sampled-image-depth-sample-counts
               sampled-image-stencil-sample-counts
               storage-image-sample-counts
               max-sample-mask-words
               timestamp-compute-and-graphics
               timestamp-period
               max-clip-distances
               max-cull-distances
               max-combined-clip-and-cull-distances
               discrete-queue-priorities
               point-size-range
               line-width-range
               point-size-granularity
               line-width-granularity
               strict-lines
               standard-sample-locations
               optimal-buffer-copy-offset-alignment
               optimal-buffer-copy-row-pitch-alignment
               non-coherent-atom-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-LIMITS~:@_:max-image-dimension-1d ~s~:@_:max-image-dimension-2d ~s~:@_:max-image-dimension-3d ~s~:@_:max-image-dimension-cube ~s~:@_:max-image-array-layers ~s~:@_:max-texel-buffer-elements ~s~:@_:max-uniform-buffer-range ~s~:@_:max-storage-buffer-range ~s~:@_:max-push-constants-size ~s~:@_:max-memory-allocation-count ~s~:@_:max-sampler-allocation-count ~s~:@_:buffer-image-granularity ~s~:@_:sparse-address-space-size ~s~:@_:max-bound-descriptor-sets ~s~:@_:max-per-stage-descriptor-samplers ~s~:@_:max-per-stage-descriptor-uniform-buffers ~s~:@_:max-per-stage-descriptor-storage-buffers ~s~:@_:max-per-stage-descriptor-sampled-images ~s~:@_:max-per-stage-descriptor-storage-images ~s~:@_:max-per-stage-descriptor-input-attachments ~s~:@_:max-per-stage-resources ~s~:@_:max-descriptor-set-samplers ~s~:@_:max-descriptor-set-uniform-buffers ~s~:@_:max-descriptor-set-uniform-buffers-dynamic ~s~:@_:max-descriptor-set-storage-buffers ~s~:@_:max-descriptor-set-storage-buffers-dynamic ~s~:@_:max-descriptor-set-sampled-images ~s~:@_:max-descriptor-set-storage-images ~s~:@_:max-descriptor-set-input-attachments ~s~:@_:max-vertex-input-attributes ~s~:@_:max-vertex-input-bindings ~s~:@_:max-vertex-input-attribute-offset ~s~:@_:max-vertex-input-binding-stride ~s~:@_:max-vertex-output-components ~s~:@_:max-tessellation-generation-level ~s~:@_:max-tessellation-patch-size ~s~:@_:max-tessellation-control-per-vertex-input-components ~s~:@_:max-tessellation-control-per-vertex-output-components ~s~:@_:max-tessellation-control-per-patch-output-components ~s~:@_:max-tessellation-control-total-output-components ~s~:@_:max-tessellation-evaluation-input-components ~s~:@_:max-tessellation-evaluation-output-components ~s~:@_:max-geometry-shader-invocations ~s~:@_:max-geometry-input-components ~s~:@_:max-geometry-output-components ~s~:@_:max-geometry-output-vertices ~s~:@_:max-geometry-total-output-components ~s~:@_:max-fragment-input-components ~s~:@_:max-fragment-output-attachments ~s~:@_:max-fragment-dual-src-attachments ~s~:@_:max-fragment-combined-output-resources ~s~:@_:max-compute-shared-memory-size ~s~:@_:max-compute-work-group-count ~s~:@_:max-compute-work-group-invocations ~s~:@_:max-compute-work-group-size ~s~:@_:sub-pixel-precision-bits ~s~:@_:sub-texel-precision-bits ~s~:@_:mipmap-precision-bits ~s~:@_:max-draw-indexed-index-value ~s~:@_:max-draw-indirect-count ~s~:@_:max-sampler-lod-bias ~s~:@_:max-sampler-anisotropy ~s~:@_:max-viewports ~s~:@_:max-viewport-dimensions ~s~:@_:viewport-bounds-range ~s~:@_:viewport-sub-pixel-bits ~s~:@_:min-memory-map-alignment ~s~:@_:min-texel-buffer-offset-alignment ~s~:@_:min-uniform-buffer-offset-alignment ~s~:@_:min-storage-buffer-offset-alignment ~s~:@_:min-texel-offset ~s~:@_:max-texel-offset ~s~:@_:min-texel-gather-offset ~s~:@_:max-texel-gather-offset ~s~:@_:min-interpolation-offset ~s~:@_:max-interpolation-offset ~s~:@_:sub-pixel-interpolation-offset-bits ~s~:@_:max-framebuffer-width ~s~:@_:max-framebuffer-height ~s~:@_:max-framebuffer-layers ~s~:@_:framebuffer-color-sample-counts ~s~:@_:framebuffer-depth-sample-counts ~s~:@_:framebuffer-stencil-sample-counts ~s~:@_:framebuffer-no-attachments-sample-counts ~s~:@_:max-color-attachments ~s~:@_:sampled-image-color-sample-counts ~s~:@_:sampled-image-integer-sample-counts ~s~:@_:sampled-image-depth-sample-counts ~s~:@_:sampled-image-stencil-sample-counts ~s~:@_:storage-image-sample-counts ~s~:@_:max-sample-mask-words ~s~:@_:timestamp-compute-and-graphics ~s~:@_:timestamp-period ~s~:@_:max-clip-distances ~s~:@_:max-cull-distances ~s~:@_:max-combined-clip-and-cull-distances ~s~:@_:discrete-queue-priorities ~s~:@_:point-size-range ~s~:@_:line-width-range ~s~:@_:point-size-granularity ~s~:@_:line-width-granularity ~s~:@_:strict-lines ~s~:@_:standard-sample-locations ~s~:@_:optimal-buffer-copy-offset-alignment ~s~:@_:optimal-buffer-copy-row-pitch-alignment ~s~:@_:non-coherent-atom-size ~s~:>)"
               max-image-dimension-1d 
               max-image-dimension-2d 
               max-image-dimension-3d 
               max-image-dimension-cube 
               max-image-array-layers 
               max-texel-buffer-elements 
               max-uniform-buffer-range 
               max-storage-buffer-range 
               max-push-constants-size 
               max-memory-allocation-count 
               max-sampler-allocation-count 
               buffer-image-granularity 
               sparse-address-space-size 
               max-bound-descriptor-sets 
               max-per-stage-descriptor-samplers 
               max-per-stage-descriptor-uniform-buffers 
               max-per-stage-descriptor-storage-buffers 
               max-per-stage-descriptor-sampled-images 
               max-per-stage-descriptor-storage-images 
               max-per-stage-descriptor-input-attachments 
               max-per-stage-resources 
               max-descriptor-set-samplers 
               max-descriptor-set-uniform-buffers 
               max-descriptor-set-uniform-buffers-dynamic 
               max-descriptor-set-storage-buffers 
               max-descriptor-set-storage-buffers-dynamic 
               max-descriptor-set-sampled-images 
               max-descriptor-set-storage-images 
               max-descriptor-set-input-attachments 
               max-vertex-input-attributes 
               max-vertex-input-bindings 
               max-vertex-input-attribute-offset 
               max-vertex-input-binding-stride 
               max-vertex-output-components 
               max-tessellation-generation-level 
               max-tessellation-patch-size 
               max-tessellation-control-per-vertex-input-components 
               max-tessellation-control-per-vertex-output-components 
               max-tessellation-control-per-patch-output-components 
               max-tessellation-control-total-output-components 
               max-tessellation-evaluation-input-components 
               max-tessellation-evaluation-output-components 
               max-geometry-shader-invocations 
               max-geometry-input-components 
               max-geometry-output-components 
               max-geometry-output-vertices 
               max-geometry-total-output-components 
               max-fragment-input-components 
               max-fragment-output-attachments 
               max-fragment-dual-src-attachments 
               max-fragment-combined-output-resources 
               max-compute-shared-memory-size 
               max-compute-work-group-count 
               max-compute-work-group-invocations 
               max-compute-work-group-size 
               sub-pixel-precision-bits 
               sub-texel-precision-bits 
               mipmap-precision-bits 
               max-draw-indexed-index-value 
               max-draw-indirect-count 
               max-sampler-lod-bias 
               max-sampler-anisotropy 
               max-viewports 
               max-viewport-dimensions 
               viewport-bounds-range 
               viewport-sub-pixel-bits 
               min-memory-map-alignment 
               min-texel-buffer-offset-alignment 
               min-uniform-buffer-offset-alignment 
               min-storage-buffer-offset-alignment 
               min-texel-offset 
               max-texel-offset 
               min-texel-gather-offset 
               max-texel-gather-offset 
               min-interpolation-offset 
               max-interpolation-offset 
               sub-pixel-interpolation-offset-bits 
               max-framebuffer-width 
               max-framebuffer-height 
               max-framebuffer-layers 
               framebuffer-color-sample-counts 
               framebuffer-depth-sample-counts 
               framebuffer-stencil-sample-counts 
               framebuffer-no-attachments-sample-counts 
               max-color-attachments 
               sampled-image-color-sample-counts 
               sampled-image-integer-sample-counts 
               sampled-image-depth-sample-counts 
               sampled-image-stencil-sample-counts 
               storage-image-sample-counts 
               max-sample-mask-words 
               timestamp-compute-and-graphics 
               timestamp-period 
               max-clip-distances 
               max-cull-distances 
               max-combined-clip-and-cull-distances 
               discrete-queue-priorities 
               point-size-range 
               line-width-range 
               point-size-granularity 
               line-width-granularity 
               strict-lines 
               standard-sample-locations 
               optimal-buffer-copy-offset-alignment 
               optimal-buffer-copy-row-pitch-alignment 
               non-coherent-atom-size)))

(defmethod print-object ((obj semaphore-create-info) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<SEMAPHORE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj query-pool-create-info) out)
  (with-slots (next
               flags
               query-type
               query-count
               pipeline-statistics)
      obj
    (cl:format out "~i(~@<QUERY-POOL-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:query-type ~s~:@_:query-count ~s~:@_:pipeline-statistics ~s~:>)"
               next 
               flags 
               query-type 
               query-count 
               pipeline-statistics)))

(defmethod print-object ((obj framebuffer-create-info) out)
  (with-slots (next
               flags
               render-pass
               attachments
               width
               height
               layers)
      obj
    (cl:format out "~i(~@<FRAMEBUFFER-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:render-pass ~s~:@_:attachments ~s~:@_:width ~s~:@_:height ~s~:@_:layers ~s~:>)"
               next 
               flags 
               render-pass 
               attachments 
               width 
               height 
               layers)))

(defmethod print-object ((obj draw-indirect-command) out)
  (with-slots (vertex-count
               instance-count
               first-vertex
               first-instance)
      obj
    (cl:format out "~i(~@<DRAW-INDIRECT-COMMAND~:@_:vertex-count ~s~:@_:instance-count ~s~:@_:first-vertex ~s~:@_:first-instance ~s~:>)"
               vertex-count 
               instance-count 
               first-vertex 
               first-instance)))

(defmethod print-object ((obj draw-indexed-indirect-command) out)
  (with-slots (index-count
               instance-count
               first-index
               vertex-offset
               first-instance)
      obj
    (cl:format out "~i(~@<DRAW-INDEXED-INDIRECT-COMMAND~:@_:index-count ~s~:@_:instance-count ~s~:@_:first-index ~s~:@_:vertex-offset ~s~:@_:first-instance ~s~:>)"
               index-count 
               instance-count 
               first-index 
               vertex-offset 
               first-instance)))

(defmethod print-object ((obj dispatch-indirect-command) out)
  (with-slots (x
               y
               z)
      obj
    (cl:format out "~i(~@<DISPATCH-INDIRECT-COMMAND~:@_:x ~s~:@_:y ~s~:@_:z ~s~:>)"
               x 
               y 
               z)))

(defmethod print-object ((obj multi-draw-info-ext) out)
  (with-slots (first-vertex
               vertex-count)
      obj
    (cl:format out "~i(~@<MULTI-DRAW-INFO-EXT~:@_:first-vertex ~s~:@_:vertex-count ~s~:>)"
               first-vertex 
               vertex-count)))

(defmethod print-object ((obj multi-draw-indexed-info-ext) out)
  (with-slots (first-index
               index-count
               vertex-offset)
      obj
    (cl:format out "~i(~@<MULTI-DRAW-INDEXED-INFO-EXT~:@_:first-index ~s~:@_:index-count ~s~:@_:vertex-offset ~s~:>)"
               first-index 
               index-count 
               vertex-offset)))

(defmethod print-object ((obj submit-info) out)
  (with-slots (next
               wait-semaphores
               wait-dst-stage-mask
               command-buffers
               signal-semaphores)
      obj
    (cl:format out "~i(~@<SUBMIT-INFO~:@_:next ~s~:@_:wait-semaphores ~s~:@_:wait-dst-stage-mask ~s~:@_:command-buffers ~s~:@_:signal-semaphores ~s~:>)"
               next 
               wait-semaphores 
               wait-dst-stage-mask 
               command-buffers 
               signal-semaphores)))

(defmethod print-object ((obj display-properties-khr) out)
  (with-slots (display
               display-name
               physical-dimensions
               physical-resolution
               supported-transforms
               plane-reorder-possible
               persistent-content)
      obj
    (cl:format out "~i(~@<DISPLAY-PROPERTIES-KHR~:@_:display ~s~:@_:display-name ~s~:@_:physical-dimensions ~s~:@_:physical-resolution ~s~:@_:supported-transforms ~s~:@_:plane-reorder-possible ~s~:@_:persistent-content ~s~:>)"
               display 
               display-name 
               physical-dimensions 
               physical-resolution 
               supported-transforms 
               plane-reorder-possible 
               persistent-content)))

(defmethod print-object ((obj display-plane-properties-khr) out)
  (with-slots (current-display
               current-stack-index)
      obj
    (cl:format out "~i(~@<DISPLAY-PLANE-PROPERTIES-KHR~:@_:current-display ~s~:@_:current-stack-index ~s~:>)"
               current-display 
               current-stack-index)))

(defmethod print-object ((obj display-mode-parameters-khr) out)
  (with-slots (visible-region
               refresh-rate)
      obj
    (cl:format out "~i(~@<DISPLAY-MODE-PARAMETERS-KHR~:@_:visible-region ~s~:@_:refresh-rate ~s~:>)"
               visible-region 
               refresh-rate)))

(defmethod print-object ((obj display-mode-properties-khr) out)
  (with-slots (display-mode
               parameters)
      obj
    (cl:format out "~i(~@<DISPLAY-MODE-PROPERTIES-KHR~:@_:display-mode ~s~:@_:parameters ~s~:>)"
               display-mode 
               parameters)))

(defmethod print-object ((obj display-mode-create-info-khr) out)
  (with-slots (next
               flags
               parameters)
      obj
    (cl:format out "~i(~@<DISPLAY-MODE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:parameters ~s~:>)"
               next 
               flags 
               parameters)))

(defmethod print-object ((obj display-plane-capabilities-khr) out)
  (with-slots (supported-alpha
               min-src-position
               max-src-position
               min-src-extent
               max-src-extent
               min-dst-position
               max-dst-position
               min-dst-extent
               max-dst-extent)
      obj
    (cl:format out "~i(~@<DISPLAY-PLANE-CAPABILITIES-KHR~:@_:supported-alpha ~s~:@_:min-src-position ~s~:@_:max-src-position ~s~:@_:min-src-extent ~s~:@_:max-src-extent ~s~:@_:min-dst-position ~s~:@_:max-dst-position ~s~:@_:min-dst-extent ~s~:@_:max-dst-extent ~s~:>)"
               supported-alpha 
               min-src-position 
               max-src-position 
               min-src-extent 
               max-src-extent 
               min-dst-position 
               max-dst-position 
               min-dst-extent 
               max-dst-extent)))

(defmethod print-object ((obj display-surface-create-info-khr) out)
  (with-slots (next
               flags
               display-mode
               plane-index
               plane-stack-index
               transform
               global-alpha
               alpha-mode
               image-extent)
      obj
    (cl:format out "~i(~@<DISPLAY-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:display-mode ~s~:@_:plane-index ~s~:@_:plane-stack-index ~s~:@_:transform ~s~:@_:global-alpha ~s~:@_:alpha-mode ~s~:@_:image-extent ~s~:>)"
               next 
               flags 
               display-mode 
               plane-index 
               plane-stack-index 
               transform 
               global-alpha 
               alpha-mode 
               image-extent)))

(defmethod print-object ((obj display-present-info-khr) out)
  (with-slots (next
               src-rect
               dst-rect
               persistent)
      obj
    (cl:format out "~i(~@<DISPLAY-PRESENT-INFO-KHR~:@_:next ~s~:@_:src-rect ~s~:@_:dst-rect ~s~:@_:persistent ~s~:>)"
               next 
               src-rect 
               dst-rect 
               persistent)))

(defmethod print-object ((obj surface-capabilities-khr) out)
  (with-slots (min-image-count
               max-image-count
               current-extent
               min-image-extent
               max-image-extent
               max-image-array-layers
               supported-transforms
               current-transform
               supported-composite-alpha
               supported-usage-flags)
      obj
    (cl:format out "~i(~@<SURFACE-CAPABILITIES-KHR~:@_:min-image-count ~s~:@_:max-image-count ~s~:@_:current-extent ~s~:@_:min-image-extent ~s~:@_:max-image-extent ~s~:@_:max-image-array-layers ~s~:@_:supported-transforms ~s~:@_:current-transform ~s~:@_:supported-composite-alpha ~s~:@_:supported-usage-flags ~s~:>)"
               min-image-count 
               max-image-count 
               current-extent 
               min-image-extent 
               max-image-extent 
               max-image-array-layers 
               supported-transforms 
               current-transform 
               supported-composite-alpha 
               supported-usage-flags)))

(defmethod print-object ((obj android-surface-create-info-khr) out)
  (with-slots (next
               flags
               window)
      obj
    (cl:format out "~i(~@<ANDROID-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:window ~s~:>)"
               next 
               flags 
               window)))

(defmethod print-object ((obj vi-surface-create-info-nn) out)
  (with-slots (next
               flags
               window)
      obj
    (cl:format out "~i(~@<VI-SURFACE-CREATE-INFO-NN~:@_:next ~s~:@_:flags ~s~:@_:window ~s~:>)"
               next 
               flags 
               window)))

(defmethod print-object ((obj wayland-surface-create-info-khr) out)
  (with-slots (next
               flags
               display
               surface)
      obj
    (cl:format out "~i(~@<WAYLAND-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:display ~s~:@_:surface ~s~:>)"
               next 
               flags 
               display 
               surface)))

(defmethod print-object ((obj win32-surface-create-info-khr) out)
  (with-slots (next
               flags
               hinstance
               hwnd)
      obj
    (cl:format out "~i(~@<WIN32-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:hinstance ~s~:@_:hwnd ~s~:>)"
               next 
               flags 
               hinstance 
               hwnd)))

(defmethod print-object ((obj xlib-surface-create-info-khr) out)
  (with-slots (next
               flags
               dpy
               window)
      obj
    (cl:format out "~i(~@<XLIB-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:dpy ~s~:@_:window ~s~:>)"
               next 
               flags 
               dpy 
               window)))

(defmethod print-object ((obj xcb-surface-create-info-khr) out)
  (with-slots (next
               flags
               connection
               window)
      obj
    (cl:format out "~i(~@<XCB-SURFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:connection ~s~:@_:window ~s~:>)"
               next 
               flags 
               connection 
               window)))

(defmethod print-object ((obj direct-fb-surface-create-info-ext) out)
  (with-slots (next
               flags
               dfb
               surface)
      obj
    (cl:format out "~i(~@<DIRECT-FB-SURFACE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:dfb ~s~:@_:surface ~s~:>)"
               next 
               flags 
               dfb 
               surface)))

(defmethod print-object ((obj image-pipe-surface-create-info-fuchsia) out)
  (with-slots (next
               flags
               image-pipe-handle)
      obj
    (cl:format out "~i(~@<IMAGE-PIPE-SURFACE-CREATE-INFO-FUCHSIA~:@_:next ~s~:@_:flags ~s~:@_:image-pipe-handle ~s~:>)"
               next 
               flags 
               image-pipe-handle)))

(defmethod print-object ((obj stream-descriptor-surface-create-info-ggp) out)
  (with-slots (next
               flags
               stream-descriptor)
      obj
    (cl:format out "~i(~@<STREAM-DESCRIPTOR-SURFACE-CREATE-INFO-GGP~:@_:next ~s~:@_:flags ~s~:@_:stream-descriptor ~s~:>)"
               next 
               flags 
               stream-descriptor)))

(defmethod print-object ((obj screen-surface-create-info-qnx) out)
  (with-slots (next
               flags
               context
               window)
      obj
    (cl:format out "~i(~@<SCREEN-SURFACE-CREATE-INFO-QNX~:@_:next ~s~:@_:flags ~s~:@_:context ~s~:@_:window ~s~:>)"
               next 
               flags 
               context 
               window)))

(defmethod print-object ((obj surface-format-khr) out)
  (with-slots (format
               color-space)
      obj
    (cl:format out "~i(~@<SURFACE-FORMAT-KHR~:@_:format ~s~:@_:color-space ~s~:>)"
               format 
               color-space)))

(defmethod print-object ((obj swapchain-create-info-khr) out)
  (with-slots (next
               flags
               surface
               min-image-count
               image-format
               image-color-space
               image-extent
               image-array-layers
               image-usage
               image-sharing-mode
               queue-family-indices
               pre-transform
               composite-alpha
               present-mode
               clipped
               old-swapchain)
      obj
    (cl:format out "~i(~@<SWAPCHAIN-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:surface ~s~:@_:min-image-count ~s~:@_:image-format ~s~:@_:image-color-space ~s~:@_:image-extent ~s~:@_:image-array-layers ~s~:@_:image-usage ~s~:@_:image-sharing-mode ~s~:@_:queue-family-indices ~s~:@_:pre-transform ~s~:@_:composite-alpha ~s~:@_:present-mode ~s~:@_:clipped ~s~:@_:old-swapchain ~s~:>)"
               next 
               flags 
               surface 
               min-image-count 
               image-format 
               image-color-space 
               image-extent 
               image-array-layers 
               image-usage 
               image-sharing-mode 
               queue-family-indices 
               pre-transform 
               composite-alpha 
               present-mode 
               clipped 
               old-swapchain)))

(defmethod print-object ((obj present-info-khr) out)
  (with-slots (next
               wait-semaphores
               swapchains
               image-indices
               results)
      obj
    (cl:format out "~i(~@<PRESENT-INFO-KHR~:@_:next ~s~:@_:wait-semaphores ~s~:@_:swapchains ~s~:@_:image-indices ~s~:@_:results ~s~:>)"
               next 
               wait-semaphores 
               swapchains 
               image-indices 
               results)))

(defmethod print-object ((obj debug-report-callback-create-info-ext) out)
  (with-slots (next
               flags
               pfn-callback
               user-data)
      obj
    (cl:format out "~i(~@<DEBUG-REPORT-CALLBACK-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:pfn-callback ~s~:@_:user-data ~s~:>)"
               next 
               flags 
               pfn-callback 
               user-data)))

(defmethod print-object ((obj validation-flags-ext) out)
  (with-slots (next
               disabled-validation-checks)
      obj
    (cl:format out "~i(~@<VALIDATION-FLAGS-EXT~:@_:next ~s~:@_:disabled-validation-checks ~s~:>)"
               next 
               disabled-validation-checks)))

(defmethod print-object ((obj validation-features-ext) out)
  (with-slots (next
               enabled-validation-features
               disabled-validation-features)
      obj
    (cl:format out "~i(~@<VALIDATION-FEATURES-EXT~:@_:next ~s~:@_:enabled-validation-features ~s~:@_:disabled-validation-features ~s~:>)"
               next 
               enabled-validation-features 
               disabled-validation-features)))

(defmethod print-object ((obj pipeline-rasterization-state-rasterization-order-amd) out)
  (with-slots (next
               rasterization-order)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-STATE-RASTERIZATION-ORDER-AMD~:@_:next ~s~:@_:rasterization-order ~s~:>)"
               next 
               rasterization-order)))

(defmethod print-object ((obj debug-marker-object-name-info-ext) out)
  (with-slots (next
               object-type
               object
               object-name)
      obj
    (cl:format out "~i(~@<DEBUG-MARKER-OBJECT-NAME-INFO-EXT~:@_:next ~s~:@_:object-type ~s~:@_:object ~s~:@_:object-name ~s~:>)"
               next 
               object-type 
               object 
               object-name)))

(defmethod print-object ((obj debug-marker-object-tag-info-ext) out)
  (with-slots (next
               object-type
               object
               tag-name
               tag-size
               tag)
      obj
    (cl:format out "~i(~@<DEBUG-MARKER-OBJECT-TAG-INFO-EXT~:@_:next ~s~:@_:object-type ~s~:@_:object ~s~:@_:tag-name ~s~:@_:tag-size ~s~:@_:tag ~s~:>)"
               next 
               object-type 
               object 
               tag-name 
               tag-size 
               tag)))

(defmethod print-object ((obj debug-marker-marker-info-ext) out)
  (with-slots (next
               marker-name
               color)
      obj
    (cl:format out "~i(~@<DEBUG-MARKER-MARKER-INFO-EXT~:@_:next ~s~:@_:marker-name ~s~:@_:color ~s~:>)"
               next 
               marker-name 
               color)))

(defmethod print-object ((obj dedicated-allocation-image-create-info-nv) out)
  (with-slots (next
               dedicated-allocation)
      obj
    (cl:format out "~i(~@<DEDICATED-ALLOCATION-IMAGE-CREATE-INFO-NV~:@_:next ~s~:@_:dedicated-allocation ~s~:>)"
               next 
               dedicated-allocation)))

(defmethod print-object ((obj dedicated-allocation-buffer-create-info-nv) out)
  (with-slots (next
               dedicated-allocation)
      obj
    (cl:format out "~i(~@<DEDICATED-ALLOCATION-BUFFER-CREATE-INFO-NV~:@_:next ~s~:@_:dedicated-allocation ~s~:>)"
               next 
               dedicated-allocation)))

(defmethod print-object ((obj dedicated-allocation-memory-allocate-info-nv) out)
  (with-slots (next
               image
               buffer)
      obj
    (cl:format out "~i(~@<DEDICATED-ALLOCATION-MEMORY-ALLOCATE-INFO-NV~:@_:next ~s~:@_:image ~s~:@_:buffer ~s~:>)"
               next 
               image 
               buffer)))

(defmethod print-object ((obj external-image-format-properties-nv) out)
  (with-slots (image-format-properties
               external-memory-features
               export-from-imported-handle-types
               compatible-handle-types)
      obj
    (cl:format out "~i(~@<EXTERNAL-IMAGE-FORMAT-PROPERTIES-NV~:@_:image-format-properties ~s~:@_:external-memory-features ~s~:@_:export-from-imported-handle-types ~s~:@_:compatible-handle-types ~s~:>)"
               image-format-properties 
               external-memory-features 
               export-from-imported-handle-types 
               compatible-handle-types)))

(defmethod print-object ((obj external-memory-image-create-info-nv) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXTERNAL-MEMORY-IMAGE-CREATE-INFO-NV~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj export-memory-allocate-info-nv) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXPORT-MEMORY-ALLOCATE-INFO-NV~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj import-memory-win32-handle-info-nv) out)
  (with-slots (next
               handle-type
               handle)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-WIN32-HANDLE-INFO-NV~:@_:next ~s~:@_:handle-type ~s~:@_:handle ~s~:>)"
               next 
               handle-type 
               handle)))

(defmethod print-object ((obj export-memory-win32-handle-info-nv) out)
  (with-slots (next
               attributes
               dw-access)
      obj
    (cl:format out "~i(~@<EXPORT-MEMORY-WIN32-HANDLE-INFO-NV~:@_:next ~s~:@_:attributes ~s~:@_:dw-access ~s~:>)"
               next 
               attributes 
               dw-access)))

(defmethod print-object ((obj win32-keyed-mutex-acquire-release-info-nv) out)
  (with-slots (next
               acquire-syncs
               acquire-keys
               acquire-timeout-milliseconds
               release-syncs
               release-keys)
      obj
    (cl:format out "~i(~@<WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-NV~:@_:next ~s~:@_:acquire-syncs ~s~:@_:acquire-keys ~s~:@_:acquire-timeout-milliseconds ~s~:@_:release-syncs ~s~:@_:release-keys ~s~:>)"
               next 
               acquire-syncs 
               acquire-keys 
               acquire-timeout-milliseconds 
               release-syncs 
               release-keys)))

(defmethod print-object ((obj physical-device-device-generated-commands-features-nv) out)
  (with-slots (next
               device-generated-commands)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-FEATURES-NV~:@_:next ~s~:@_:device-generated-commands ~s~:>)"
               next 
               device-generated-commands)))

(defmethod print-object ((obj device-private-data-create-info-ext) out)
  (with-slots (next
               private-data-slot-request-count)
      obj
    (cl:format out "~i(~@<DEVICE-PRIVATE-DATA-CREATE-INFO-EXT~:@_:next ~s~:@_:private-data-slot-request-count ~s~:>)"
               next 
               private-data-slot-request-count)))

(defmethod print-object ((obj private-data-slot-create-info-ext) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<PRIVATE-DATA-SLOT-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj physical-device-private-data-features-ext) out)
  (with-slots (next
               private-data)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PRIVATE-DATA-FEATURES-EXT~:@_:next ~s~:@_:private-data ~s~:>)"
               next 
               private-data)))

(defmethod print-object ((obj physical-device-device-generated-commands-properties-nv) out)
  (with-slots (next
               max-graphics-shader-group-count
               max-indirect-sequence-count
               max-indirect-commands-token-count
               max-indirect-commands-stream-count
               max-indirect-commands-token-offset
               max-indirect-commands-stream-stride
               min-sequences-count-buffer-offset-alignment
               min-sequences-index-buffer-offset-alignment
               min-indirect-commands-buffer-offset-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-PROPERTIES-NV~:@_:next ~s~:@_:max-graphics-shader-group-count ~s~:@_:max-indirect-sequence-count ~s~:@_:max-indirect-commands-token-count ~s~:@_:max-indirect-commands-stream-count ~s~:@_:max-indirect-commands-token-offset ~s~:@_:max-indirect-commands-stream-stride ~s~:@_:min-sequences-count-buffer-offset-alignment ~s~:@_:min-sequences-index-buffer-offset-alignment ~s~:@_:min-indirect-commands-buffer-offset-alignment ~s~:>)"
               next 
               max-graphics-shader-group-count 
               max-indirect-sequence-count 
               max-indirect-commands-token-count 
               max-indirect-commands-stream-count 
               max-indirect-commands-token-offset 
               max-indirect-commands-stream-stride 
               min-sequences-count-buffer-offset-alignment 
               min-sequences-index-buffer-offset-alignment 
               min-indirect-commands-buffer-offset-alignment)))

(defmethod print-object ((obj physical-device-multi-draw-properties-ext) out)
  (with-slots (next
               max-multi-draw-count)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MULTI-DRAW-PROPERTIES-EXT~:@_:next ~s~:@_:max-multi-draw-count ~s~:>)"
               next 
               max-multi-draw-count)))

(defmethod print-object ((obj graphics-shader-group-create-info-nv) out)
  (with-slots (next
               stages
               vertex-input-state
               tessellation-state)
      obj
    (cl:format out "~i(~@<GRAPHICS-SHADER-GROUP-CREATE-INFO-NV~:@_:next ~s~:@_:stages ~s~:@_:vertex-input-state ~s~:@_:tessellation-state ~s~:>)"
               next 
               stages 
               vertex-input-state 
               tessellation-state)))

(defmethod print-object ((obj graphics-pipeline-shader-groups-create-info-nv) out)
  (with-slots (next
               groups
               pipelines)
      obj
    (cl:format out "~i(~@<GRAPHICS-PIPELINE-SHADER-GROUPS-CREATE-INFO-NV~:@_:next ~s~:@_:groups ~s~:@_:pipelines ~s~:>)"
               next 
               groups 
               pipelines)))

(defmethod print-object ((obj bind-shader-group-indirect-command-nv) out)
  (with-slots (group-index)
      obj
    (cl:format out "~i(~@<BIND-SHADER-GROUP-INDIRECT-COMMAND-NV~:@_:group-index ~s~:>)"
               group-index)))

(defmethod print-object ((obj bind-index-buffer-indirect-command-nv) out)
  (with-slots (buffer-address
               size
               index-type)
      obj
    (cl:format out "~i(~@<BIND-INDEX-BUFFER-INDIRECT-COMMAND-NV~:@_:buffer-address ~s~:@_:size ~s~:@_:index-type ~s~:>)"
               buffer-address 
               size 
               index-type)))

(defmethod print-object ((obj bind-vertex-buffer-indirect-command-nv) out)
  (with-slots (buffer-address
               size
               stride)
      obj
    (cl:format out "~i(~@<BIND-VERTEX-BUFFER-INDIRECT-COMMAND-NV~:@_:buffer-address ~s~:@_:size ~s~:@_:stride ~s~:>)"
               buffer-address 
               size 
               stride)))

(defmethod print-object ((obj set-state-flags-indirect-command-nv) out)
  (with-slots (data)
      obj
    (cl:format out "~i(~@<SET-STATE-FLAGS-INDIRECT-COMMAND-NV~:@_:data ~s~:>)"
               data)))

(defmethod print-object ((obj indirect-commands-stream-nv) out)
  (with-slots (buffer
               offset)
      obj
    (cl:format out "~i(~@<INDIRECT-COMMANDS-STREAM-NV~:@_:buffer ~s~:@_:offset ~s~:>)"
               buffer 
               offset)))

(defmethod print-object ((obj indirect-commands-layout-token-nv) out)
  (with-slots (next
               token-type
               stream
               offset
               vertex-binding-unit
               vertex-dynamic-stride
               pushconstant-pipeline-layout
               pushconstant-shader-stage-flags
               pushconstant-offset
               pushconstant-size
               indirect-state-flags
               index-types
               index-type-values)
      obj
    (cl:format out "~i(~@<INDIRECT-COMMANDS-LAYOUT-TOKEN-NV~:@_:next ~s~:@_:token-type ~s~:@_:stream ~s~:@_:offset ~s~:@_:vertex-binding-unit ~s~:@_:vertex-dynamic-stride ~s~:@_:pushconstant-pipeline-layout ~s~:@_:pushconstant-shader-stage-flags ~s~:@_:pushconstant-offset ~s~:@_:pushconstant-size ~s~:@_:indirect-state-flags ~s~:@_:index-types ~s~:@_:index-type-values ~s~:>)"
               next 
               token-type 
               stream 
               offset 
               vertex-binding-unit 
               vertex-dynamic-stride 
               pushconstant-pipeline-layout 
               pushconstant-shader-stage-flags 
               pushconstant-offset 
               pushconstant-size 
               indirect-state-flags 
               index-types 
               index-type-values)))

(defmethod print-object ((obj indirect-commands-layout-create-info-nv) out)
  (with-slots (next
               flags
               pipeline-bind-point
               tokens
               stream-strides)
      obj
    (cl:format out "~i(~@<INDIRECT-COMMANDS-LAYOUT-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:pipeline-bind-point ~s~:@_:tokens ~s~:@_:stream-strides ~s~:>)"
               next 
               flags 
               pipeline-bind-point 
               tokens 
               stream-strides)))

(defmethod print-object ((obj generated-commands-info-nv) out)
  (with-slots (next
               pipeline-bind-point
               pipeline
               indirect-commands-layout
               streams
               sequences-count
               preprocess-buffer
               preprocess-offset
               preprocess-size
               sequences-count-buffer
               sequences-count-offset
               sequences-index-buffer
               sequences-index-offset)
      obj
    (cl:format out "~i(~@<GENERATED-COMMANDS-INFO-NV~:@_:next ~s~:@_:pipeline-bind-point ~s~:@_:pipeline ~s~:@_:indirect-commands-layout ~s~:@_:streams ~s~:@_:sequences-count ~s~:@_:preprocess-buffer ~s~:@_:preprocess-offset ~s~:@_:preprocess-size ~s~:@_:sequences-count-buffer ~s~:@_:sequences-count-offset ~s~:@_:sequences-index-buffer ~s~:@_:sequences-index-offset ~s~:>)"
               next 
               pipeline-bind-point 
               pipeline 
               indirect-commands-layout 
               streams 
               sequences-count 
               preprocess-buffer 
               preprocess-offset 
               preprocess-size 
               sequences-count-buffer 
               sequences-count-offset 
               sequences-index-buffer 
               sequences-index-offset)))

(defmethod print-object ((obj generated-commands-memory-requirements-info-nv) out)
  (with-slots (next
               pipeline-bind-point
               pipeline
               indirect-commands-layout
               max-sequences-count)
      obj
    (cl:format out "~i(~@<GENERATED-COMMANDS-MEMORY-REQUIREMENTS-INFO-NV~:@_:next ~s~:@_:pipeline-bind-point ~s~:@_:pipeline ~s~:@_:indirect-commands-layout ~s~:@_:max-sequences-count ~s~:>)"
               next 
               pipeline-bind-point 
               pipeline 
               indirect-commands-layout 
               max-sequences-count)))

(defmethod print-object ((obj physical-device-features-2) out)
  (with-slots (next
               features)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FEATURES-2~:@_:next ~s~:@_:features ~s~:>)"
               next 
               features)))

(defmethod print-object ((obj physical-device-properties-2) out)
  (with-slots (next
               properties)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROPERTIES-2~:@_:next ~s~:@_:properties ~s~:>)"
               next 
               properties)))

(defmethod print-object ((obj format-properties-2) out)
  (with-slots (next
               format-properties)
      obj
    (cl:format out "~i(~@<FORMAT-PROPERTIES-2~:@_:next ~s~:@_:format-properties ~s~:>)"
               next 
               format-properties)))

(defmethod print-object ((obj image-format-properties-2) out)
  (with-slots (next
               image-format-properties)
      obj
    (cl:format out "~i(~@<IMAGE-FORMAT-PROPERTIES-2~:@_:next ~s~:@_:image-format-properties ~s~:>)"
               next 
               image-format-properties)))

(defmethod print-object ((obj physical-device-image-format-info-2) out)
  (with-slots (next
               format
               type
               tiling
               usage
               flags)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-IMAGE-FORMAT-INFO-2~:@_:next ~s~:@_:format ~s~:@_:type ~s~:@_:tiling ~s~:@_:usage ~s~:@_:flags ~s~:>)"
               next 
               format 
               type 
               tiling 
               usage 
               flags)))

(defmethod print-object ((obj queue-family-properties-2) out)
  (with-slots (next
               queue-family-properties)
      obj
    (cl:format out "~i(~@<QUEUE-FAMILY-PROPERTIES-2~:@_:next ~s~:@_:queue-family-properties ~s~:>)"
               next 
               queue-family-properties)))

(defmethod print-object ((obj physical-device-memory-properties-2) out)
  (with-slots (next
               memory-properties)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MEMORY-PROPERTIES-2~:@_:next ~s~:@_:memory-properties ~s~:>)"
               next 
               memory-properties)))

(defmethod print-object ((obj sparse-image-format-properties-2) out)
  (with-slots (next
               properties)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-FORMAT-PROPERTIES-2~:@_:next ~s~:@_:properties ~s~:>)"
               next 
               properties)))

(defmethod print-object ((obj physical-device-sparse-image-format-info-2) out)
  (with-slots (next
               format
               type
               samples
               usage
               tiling)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SPARSE-IMAGE-FORMAT-INFO-2~:@_:next ~s~:@_:format ~s~:@_:type ~s~:@_:samples ~s~:@_:usage ~s~:@_:tiling ~s~:>)"
               next 
               format 
               type 
               samples 
               usage 
               tiling)))

(defmethod print-object ((obj physical-device-push-descriptor-properties-khr) out)
  (with-slots (next
               max-push-descriptors)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PUSH-DESCRIPTOR-PROPERTIES-KHR~:@_:next ~s~:@_:max-push-descriptors ~s~:>)"
               next 
               max-push-descriptors)))

(defmethod print-object ((obj conformance-version) out)
  (with-slots (major
               minor
               subminor
               patch)
      obj
    (cl:format out "~i(~@<CONFORMANCE-VERSION~:@_:major ~s~:@_:minor ~s~:@_:subminor ~s~:@_:patch ~s~:>)"
               major 
               minor 
               subminor 
               patch)))

(defmethod print-object ((obj physical-device-driver-properties) out)
  (with-slots (next
               driver-id
               driver-name
               driver-info
               conformance-version)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DRIVER-PROPERTIES~:@_:next ~s~:@_:driver-id ~s~:@_:driver-name ~s~:@_:driver-info ~s~:@_:conformance-version ~s~:>)"
               next 
               driver-id 
               driver-name 
               driver-info 
               conformance-version)))

(defmethod print-object ((obj present-regions-khr) out)
  (with-slots (next
               swapchain-count
               regions)
      obj
    (cl:format out "~i(~@<PRESENT-REGIONS-KHR~:@_:next ~s~:@_:swapchain-count ~s~:@_:regions ~s~:>)"
               next 
               swapchain-count 
               regions)))

(defmethod print-object ((obj present-region-khr) out)
  (with-slots (rectangles)
      obj
    (cl:format out "~i(~@<PRESENT-REGION-KHR~:@_:rectangles ~s~:>)"
               rectangles)))

(defmethod print-object ((obj rect-layer-khr) out)
  (with-slots (offset
               extent
               layer)
      obj
    (cl:format out "~i(~@<RECT-LAYER-KHR~:@_:offset ~s~:@_:extent ~s~:@_:layer ~s~:>)"
               offset 
               extent 
               layer)))

(defmethod print-object ((obj physical-device-variable-pointers-features) out)
  (with-slots (next
               variable-pointers-storage-buffer
               variable-pointers)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VARIABLE-POINTERS-FEATURES~:@_:next ~s~:@_:variable-pointers-storage-buffer ~s~:@_:variable-pointers ~s~:>)"
               next 
               variable-pointers-storage-buffer 
               variable-pointers)))

(defmethod print-object ((obj external-memory-properties) out)
  (with-slots (external-memory-features
               export-from-imported-handle-types
               compatible-handle-types)
      obj
    (cl:format out "~i(~@<EXTERNAL-MEMORY-PROPERTIES~:@_:external-memory-features ~s~:@_:export-from-imported-handle-types ~s~:@_:compatible-handle-types ~s~:>)"
               external-memory-features 
               export-from-imported-handle-types 
               compatible-handle-types)))

(defmethod print-object ((obj physical-device-external-image-format-info) out)
  (with-slots (next
               handle-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-IMAGE-FORMAT-INFO~:@_:next ~s~:@_:handle-type ~s~:>)"
               next 
               handle-type)))

(defmethod print-object ((obj external-image-format-properties) out)
  (with-slots (next
               external-memory-properties)
      obj
    (cl:format out "~i(~@<EXTERNAL-IMAGE-FORMAT-PROPERTIES~:@_:next ~s~:@_:external-memory-properties ~s~:>)"
               next 
               external-memory-properties)))

(defmethod print-object ((obj physical-device-external-buffer-info) out)
  (with-slots (next
               flags
               usage
               handle-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-BUFFER-INFO~:@_:next ~s~:@_:flags ~s~:@_:usage ~s~:@_:handle-type ~s~:>)"
               next 
               flags 
               usage 
               handle-type)))

(defmethod print-object ((obj external-buffer-properties) out)
  (with-slots (next
               external-memory-properties)
      obj
    (cl:format out "~i(~@<EXTERNAL-BUFFER-PROPERTIES~:@_:next ~s~:@_:external-memory-properties ~s~:>)"
               next 
               external-memory-properties)))

(defmethod print-object ((obj physical-device-id-properties) out)
  (with-slots (next
               device-uuid
               driver-uuid
               device-luid
               device-node-mask
               device-luid-valid)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ID-PROPERTIES~:@_:next ~s~:@_:device-uuid ~s~:@_:driver-uuid ~s~:@_:device-luid ~s~:@_:device-node-mask ~s~:@_:device-luid-valid ~s~:>)"
               next 
               device-uuid 
               driver-uuid 
               device-luid 
               device-node-mask 
               device-luid-valid)))

(defmethod print-object ((obj external-memory-image-create-info) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXTERNAL-MEMORY-IMAGE-CREATE-INFO~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj external-memory-buffer-create-info) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXTERNAL-MEMORY-BUFFER-CREATE-INFO~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj export-memory-allocate-info) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXPORT-MEMORY-ALLOCATE-INFO~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj import-memory-win32-handle-info-khr) out)
  (with-slots (next
               handle-type
               handle
               name)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:handle-type ~s~:@_:handle ~s~:@_:name ~s~:>)"
               next 
               handle-type 
               handle 
               name)))

(defmethod print-object ((obj export-memory-win32-handle-info-khr) out)
  (with-slots (next
               attributes
               dw-access
               name)
      obj
    (cl:format out "~i(~@<EXPORT-MEMORY-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:attributes ~s~:@_:dw-access ~s~:@_:name ~s~:>)"
               next 
               attributes 
               dw-access 
               name)))

(defmethod print-object ((obj import-memory-zircon-handle-info-fuchsia) out)
  (with-slots (next
               handle-type
               handle)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-ZIRCON-HANDLE-INFO-FUCHSIA~:@_:next ~s~:@_:handle-type ~s~:@_:handle ~s~:>)"
               next 
               handle-type 
               handle)))

(defmethod print-object ((obj memory-zircon-handle-properties-fuchsia) out)
  (with-slots (next
               memory-type-bits)
      obj
    (cl:format out "~i(~@<MEMORY-ZIRCON-HANDLE-PROPERTIES-FUCHSIA~:@_:next ~s~:@_:memory-type-bits ~s~:>)"
               next 
               memory-type-bits)))

(defmethod print-object ((obj memory-get-zircon-handle-info-fuchsia) out)
  (with-slots (next
               memory
               handle-type)
      obj
    (cl:format out "~i(~@<MEMORY-GET-ZIRCON-HANDLE-INFO-FUCHSIA~:@_:next ~s~:@_:memory ~s~:@_:handle-type ~s~:>)"
               next 
               memory 
               handle-type)))

(defmethod print-object ((obj memory-win32-handle-properties-khr) out)
  (with-slots (next
               memory-type-bits)
      obj
    (cl:format out "~i(~@<MEMORY-WIN32-HANDLE-PROPERTIES-KHR~:@_:next ~s~:@_:memory-type-bits ~s~:>)"
               next 
               memory-type-bits)))

(defmethod print-object ((obj memory-get-win32-handle-info-khr) out)
  (with-slots (next
               memory
               handle-type)
      obj
    (cl:format out "~i(~@<MEMORY-GET-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:memory ~s~:@_:handle-type ~s~:>)"
               next 
               memory 
               handle-type)))

(defmethod print-object ((obj import-memory-fd-info-khr) out)
  (with-slots (next
               handle-type
               fd)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-FD-INFO-KHR~:@_:next ~s~:@_:handle-type ~s~:@_:fd ~s~:>)"
               next 
               handle-type 
               fd)))

(defmethod print-object ((obj memory-fd-properties-khr) out)
  (with-slots (next
               memory-type-bits)
      obj
    (cl:format out "~i(~@<MEMORY-FD-PROPERTIES-KHR~:@_:next ~s~:@_:memory-type-bits ~s~:>)"
               next 
               memory-type-bits)))

(defmethod print-object ((obj memory-get-fd-info-khr) out)
  (with-slots (next
               memory
               handle-type)
      obj
    (cl:format out "~i(~@<MEMORY-GET-FD-INFO-KHR~:@_:next ~s~:@_:memory ~s~:@_:handle-type ~s~:>)"
               next 
               memory 
               handle-type)))

(defmethod print-object ((obj win32-keyed-mutex-acquire-release-info-khr) out)
  (with-slots (next
               acquire-syncs
               acquire-keys
               acquire-timeouts
               release-syncs
               release-keys)
      obj
    (cl:format out "~i(~@<WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-KHR~:@_:next ~s~:@_:acquire-syncs ~s~:@_:acquire-keys ~s~:@_:acquire-timeouts ~s~:@_:release-syncs ~s~:@_:release-keys ~s~:>)"
               next 
               acquire-syncs 
               acquire-keys 
               acquire-timeouts 
               release-syncs 
               release-keys)))

(defmethod print-object ((obj physical-device-external-semaphore-info) out)
  (with-slots (next
               handle-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-SEMAPHORE-INFO~:@_:next ~s~:@_:handle-type ~s~:>)"
               next 
               handle-type)))

(defmethod print-object ((obj external-semaphore-properties) out)
  (with-slots (next
               export-from-imported-handle-types
               compatible-handle-types
               external-semaphore-features)
      obj
    (cl:format out "~i(~@<EXTERNAL-SEMAPHORE-PROPERTIES~:@_:next ~s~:@_:export-from-imported-handle-types ~s~:@_:compatible-handle-types ~s~:@_:external-semaphore-features ~s~:>)"
               next 
               export-from-imported-handle-types 
               compatible-handle-types 
               external-semaphore-features)))

(defmethod print-object ((obj export-semaphore-create-info) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXPORT-SEMAPHORE-CREATE-INFO~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj import-semaphore-win32-handle-info-khr) out)
  (with-slots (next
               semaphore
               flags
               handle-type
               handle
               name)
      obj
    (cl:format out "~i(~@<IMPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:semaphore ~s~:@_:flags ~s~:@_:handle-type ~s~:@_:handle ~s~:@_:name ~s~:>)"
               next 
               semaphore 
               flags 
               handle-type 
               handle 
               name)))

(defmethod print-object ((obj export-semaphore-win32-handle-info-khr) out)
  (with-slots (next
               attributes
               dw-access
               name)
      obj
    (cl:format out "~i(~@<EXPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:attributes ~s~:@_:dw-access ~s~:@_:name ~s~:>)"
               next 
               attributes 
               dw-access 
               name)))

(defmethod print-object ((obj d-3d-1-2-fence-submit-info-khr) out)
  (with-slots (next
               wait-semaphore-values
               signal-semaphore-values)
      obj
    (cl:format out "~i(~@<D-3D-1-2-FENCE-SUBMIT-INFO-KHR~:@_:next ~s~:@_:wait-semaphore-values ~s~:@_:signal-semaphore-values ~s~:>)"
               next 
               wait-semaphore-values 
               signal-semaphore-values)))

(defmethod print-object ((obj semaphore-get-win32-handle-info-khr) out)
  (with-slots (next
               semaphore
               handle-type)
      obj
    (cl:format out "~i(~@<SEMAPHORE-GET-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:semaphore ~s~:@_:handle-type ~s~:>)"
               next 
               semaphore 
               handle-type)))

(defmethod print-object ((obj import-semaphore-fd-info-khr) out)
  (with-slots (next
               semaphore
               flags
               handle-type
               fd)
      obj
    (cl:format out "~i(~@<IMPORT-SEMAPHORE-FD-INFO-KHR~:@_:next ~s~:@_:semaphore ~s~:@_:flags ~s~:@_:handle-type ~s~:@_:fd ~s~:>)"
               next 
               semaphore 
               flags 
               handle-type 
               fd)))

(defmethod print-object ((obj semaphore-get-fd-info-khr) out)
  (with-slots (next
               semaphore
               handle-type)
      obj
    (cl:format out "~i(~@<SEMAPHORE-GET-FD-INFO-KHR~:@_:next ~s~:@_:semaphore ~s~:@_:handle-type ~s~:>)"
               next 
               semaphore 
               handle-type)))

(defmethod print-object ((obj import-semaphore-zircon-handle-info-fuchsia) out)
  (with-slots (next
               semaphore
               flags
               handle-type
               zircon-handle)
      obj
    (cl:format out "~i(~@<IMPORT-SEMAPHORE-ZIRCON-HANDLE-INFO-FUCHSIA~:@_:next ~s~:@_:semaphore ~s~:@_:flags ~s~:@_:handle-type ~s~:@_:zircon-handle ~s~:>)"
               next 
               semaphore 
               flags 
               handle-type 
               zircon-handle)))

(defmethod print-object ((obj semaphore-get-zircon-handle-info-fuchsia) out)
  (with-slots (next
               semaphore
               handle-type)
      obj
    (cl:format out "~i(~@<SEMAPHORE-GET-ZIRCON-HANDLE-INFO-FUCHSIA~:@_:next ~s~:@_:semaphore ~s~:@_:handle-type ~s~:>)"
               next 
               semaphore 
               handle-type)))

(defmethod print-object ((obj physical-device-external-fence-info) out)
  (with-slots (next
               handle-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-FENCE-INFO~:@_:next ~s~:@_:handle-type ~s~:>)"
               next 
               handle-type)))

(defmethod print-object ((obj external-fence-properties) out)
  (with-slots (next
               export-from-imported-handle-types
               compatible-handle-types
               external-fence-features)
      obj
    (cl:format out "~i(~@<EXTERNAL-FENCE-PROPERTIES~:@_:next ~s~:@_:export-from-imported-handle-types ~s~:@_:compatible-handle-types ~s~:@_:external-fence-features ~s~:>)"
               next 
               export-from-imported-handle-types 
               compatible-handle-types 
               external-fence-features)))

(defmethod print-object ((obj export-fence-create-info) out)
  (with-slots (next
               handle-types)
      obj
    (cl:format out "~i(~@<EXPORT-FENCE-CREATE-INFO~:@_:next ~s~:@_:handle-types ~s~:>)"
               next 
               handle-types)))

(defmethod print-object ((obj import-fence-win32-handle-info-khr) out)
  (with-slots (next
               fence
               flags
               handle-type
               handle
               name)
      obj
    (cl:format out "~i(~@<IMPORT-FENCE-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:fence ~s~:@_:flags ~s~:@_:handle-type ~s~:@_:handle ~s~:@_:name ~s~:>)"
               next 
               fence 
               flags 
               handle-type 
               handle 
               name)))

(defmethod print-object ((obj export-fence-win32-handle-info-khr) out)
  (with-slots (next
               attributes
               dw-access
               name)
      obj
    (cl:format out "~i(~@<EXPORT-FENCE-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:attributes ~s~:@_:dw-access ~s~:@_:name ~s~:>)"
               next 
               attributes 
               dw-access 
               name)))

(defmethod print-object ((obj fence-get-win32-handle-info-khr) out)
  (with-slots (next
               fence
               handle-type)
      obj
    (cl:format out "~i(~@<FENCE-GET-WIN32-HANDLE-INFO-KHR~:@_:next ~s~:@_:fence ~s~:@_:handle-type ~s~:>)"
               next 
               fence 
               handle-type)))

(defmethod print-object ((obj import-fence-fd-info-khr) out)
  (with-slots (next
               fence
               flags
               handle-type
               fd)
      obj
    (cl:format out "~i(~@<IMPORT-FENCE-FD-INFO-KHR~:@_:next ~s~:@_:fence ~s~:@_:flags ~s~:@_:handle-type ~s~:@_:fd ~s~:>)"
               next 
               fence 
               flags 
               handle-type 
               fd)))

(defmethod print-object ((obj fence-get-fd-info-khr) out)
  (with-slots (next
               fence
               handle-type)
      obj
    (cl:format out "~i(~@<FENCE-GET-FD-INFO-KHR~:@_:next ~s~:@_:fence ~s~:@_:handle-type ~s~:>)"
               next 
               fence 
               handle-type)))

(defmethod print-object ((obj physical-device-multiview-features) out)
  (with-slots (next
               multiview
               multiview-geometry-shader
               multiview-tessellation-shader)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MULTIVIEW-FEATURES~:@_:next ~s~:@_:multiview ~s~:@_:multiview-geometry-shader ~s~:@_:multiview-tessellation-shader ~s~:>)"
               next 
               multiview 
               multiview-geometry-shader 
               multiview-tessellation-shader)))

(defmethod print-object ((obj physical-device-multiview-properties) out)
  (with-slots (next
               max-multiview-view-count
               max-multiview-instance-index)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MULTIVIEW-PROPERTIES~:@_:next ~s~:@_:max-multiview-view-count ~s~:@_:max-multiview-instance-index ~s~:>)"
               next 
               max-multiview-view-count 
               max-multiview-instance-index)))

(defmethod print-object ((obj render-pass-multiview-create-info) out)
  (with-slots (next
               view-masks
               view-offsets
               correlation-masks)
      obj
    (cl:format out "~i(~@<RENDER-PASS-MULTIVIEW-CREATE-INFO~:@_:next ~s~:@_:view-masks ~s~:@_:view-offsets ~s~:@_:correlation-masks ~s~:>)"
               next 
               view-masks 
               view-offsets 
               correlation-masks)))

(defmethod print-object ((obj surface-capabilities-2-ext) out)
  (with-slots (next
               min-image-count
               max-image-count
               current-extent
               min-image-extent
               max-image-extent
               max-image-array-layers
               supported-transforms
               current-transform
               supported-composite-alpha
               supported-usage-flags
               supported-surface-counters)
      obj
    (cl:format out "~i(~@<SURFACE-CAPABILITIES-2-EXT~:@_:next ~s~:@_:min-image-count ~s~:@_:max-image-count ~s~:@_:current-extent ~s~:@_:min-image-extent ~s~:@_:max-image-extent ~s~:@_:max-image-array-layers ~s~:@_:supported-transforms ~s~:@_:current-transform ~s~:@_:supported-composite-alpha ~s~:@_:supported-usage-flags ~s~:@_:supported-surface-counters ~s~:>)"
               next 
               min-image-count 
               max-image-count 
               current-extent 
               min-image-extent 
               max-image-extent 
               max-image-array-layers 
               supported-transforms 
               current-transform 
               supported-composite-alpha 
               supported-usage-flags 
               supported-surface-counters)))

(defmethod print-object ((obj display-power-info-ext) out)
  (with-slots (next
               power-state)
      obj
    (cl:format out "~i(~@<DISPLAY-POWER-INFO-EXT~:@_:next ~s~:@_:power-state ~s~:>)"
               next 
               power-state)))

(defmethod print-object ((obj device-event-info-ext) out)
  (with-slots (next
               device-event)
      obj
    (cl:format out "~i(~@<DEVICE-EVENT-INFO-EXT~:@_:next ~s~:@_:device-event ~s~:>)"
               next 
               device-event)))

(defmethod print-object ((obj display-event-info-ext) out)
  (with-slots (next
               display-event)
      obj
    (cl:format out "~i(~@<DISPLAY-EVENT-INFO-EXT~:@_:next ~s~:@_:display-event ~s~:>)"
               next 
               display-event)))

(defmethod print-object ((obj swapchain-counter-create-info-ext) out)
  (with-slots (next
               surface-counters)
      obj
    (cl:format out "~i(~@<SWAPCHAIN-COUNTER-CREATE-INFO-EXT~:@_:next ~s~:@_:surface-counters ~s~:>)"
               next 
               surface-counters)))

(defmethod print-object ((obj physical-device-group-properties) out)
  (with-slots (next
               physical-device-count
               physical-devices
               subset-allocation)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-GROUP-PROPERTIES~:@_:next ~s~:@_:physical-device-count ~s~:@_:physical-devices ~s~:@_:subset-allocation ~s~:>)"
               next 
               physical-device-count 
               physical-devices 
               subset-allocation)))

(defmethod print-object ((obj memory-allocate-flags-info) out)
  (with-slots (next
               flags
               device-mask)
      obj
    (cl:format out "~i(~@<MEMORY-ALLOCATE-FLAGS-INFO~:@_:next ~s~:@_:flags ~s~:@_:device-mask ~s~:>)"
               next 
               flags 
               device-mask)))

(defmethod print-object ((obj bind-buffer-memory-info) out)
  (with-slots (next
               buffer
               memory
               memory-offset)
      obj
    (cl:format out "~i(~@<BIND-BUFFER-MEMORY-INFO~:@_:next ~s~:@_:buffer ~s~:@_:memory ~s~:@_:memory-offset ~s~:>)"
               next 
               buffer 
               memory 
               memory-offset)))

(defmethod print-object ((obj bind-buffer-memory-device-group-info) out)
  (with-slots (next
               device-indices)
      obj
    (cl:format out "~i(~@<BIND-BUFFER-MEMORY-DEVICE-GROUP-INFO~:@_:next ~s~:@_:device-indices ~s~:>)"
               next 
               device-indices)))

(defmethod print-object ((obj bind-image-memory-info) out)
  (with-slots (next
               image
               memory
               memory-offset)
      obj
    (cl:format out "~i(~@<BIND-IMAGE-MEMORY-INFO~:@_:next ~s~:@_:image ~s~:@_:memory ~s~:@_:memory-offset ~s~:>)"
               next 
               image 
               memory 
               memory-offset)))

(defmethod print-object ((obj bind-image-memory-device-group-info) out)
  (with-slots (next
               device-indices
               split-instance-bind-regions)
      obj
    (cl:format out "~i(~@<BIND-IMAGE-MEMORY-DEVICE-GROUP-INFO~:@_:next ~s~:@_:device-indices ~s~:@_:split-instance-bind-regions ~s~:>)"
               next 
               device-indices 
               split-instance-bind-regions)))

(defmethod print-object ((obj device-group-render-pass-begin-info) out)
  (with-slots (next
               device-mask
               device-render-areas)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-RENDER-PASS-BEGIN-INFO~:@_:next ~s~:@_:device-mask ~s~:@_:device-render-areas ~s~:>)"
               next 
               device-mask 
               device-render-areas)))

(defmethod print-object ((obj device-group-command-buffer-begin-info) out)
  (with-slots (next
               device-mask)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-COMMAND-BUFFER-BEGIN-INFO~:@_:next ~s~:@_:device-mask ~s~:>)"
               next 
               device-mask)))

(defmethod print-object ((obj device-group-submit-info) out)
  (with-slots (next
               wait-semaphore-device-indices
               command-buffer-device-masks
               signal-semaphore-device-indices)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-SUBMIT-INFO~:@_:next ~s~:@_:wait-semaphore-device-indices ~s~:@_:command-buffer-device-masks ~s~:@_:signal-semaphore-device-indices ~s~:>)"
               next 
               wait-semaphore-device-indices 
               command-buffer-device-masks 
               signal-semaphore-device-indices)))

(defmethod print-object ((obj device-group-bind-sparse-info) out)
  (with-slots (next
               resource-device-index
               memory-device-index)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-BIND-SPARSE-INFO~:@_:next ~s~:@_:resource-device-index ~s~:@_:memory-device-index ~s~:>)"
               next 
               resource-device-index 
               memory-device-index)))

(defmethod print-object ((obj device-group-present-capabilities-khr) out)
  (with-slots (next
               present-mask
               modes)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-PRESENT-CAPABILITIES-KHR~:@_:next ~s~:@_:present-mask ~s~:@_:modes ~s~:>)"
               next 
               present-mask 
               modes)))

(defmethod print-object ((obj image-swapchain-create-info-khr) out)
  (with-slots (next
               swapchain)
      obj
    (cl:format out "~i(~@<IMAGE-SWAPCHAIN-CREATE-INFO-KHR~:@_:next ~s~:@_:swapchain ~s~:>)"
               next 
               swapchain)))

(defmethod print-object ((obj bind-image-memory-swapchain-info-khr) out)
  (with-slots (next
               swapchain
               image-index)
      obj
    (cl:format out "~i(~@<BIND-IMAGE-MEMORY-SWAPCHAIN-INFO-KHR~:@_:next ~s~:@_:swapchain ~s~:@_:image-index ~s~:>)"
               next 
               swapchain 
               image-index)))

(defmethod print-object ((obj acquire-next-image-info-khr) out)
  (with-slots (next
               swapchain
               timeout
               semaphore
               fence
               device-mask)
      obj
    (cl:format out "~i(~@<ACQUIRE-NEXT-IMAGE-INFO-KHR~:@_:next ~s~:@_:swapchain ~s~:@_:timeout ~s~:@_:semaphore ~s~:@_:fence ~s~:@_:device-mask ~s~:>)"
               next 
               swapchain 
               timeout 
               semaphore 
               fence 
               device-mask)))

(defmethod print-object ((obj device-group-present-info-khr) out)
  (with-slots (next
               device-masks
               mode)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-PRESENT-INFO-KHR~:@_:next ~s~:@_:device-masks ~s~:@_:mode ~s~:>)"
               next 
               device-masks 
               mode)))

(defmethod print-object ((obj device-group-device-create-info) out)
  (with-slots (next
               physical-devices)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-DEVICE-CREATE-INFO~:@_:next ~s~:@_:physical-devices ~s~:>)"
               next 
               physical-devices)))

(defmethod print-object ((obj device-group-swapchain-create-info-khr) out)
  (with-slots (next
               modes)
      obj
    (cl:format out "~i(~@<DEVICE-GROUP-SWAPCHAIN-CREATE-INFO-KHR~:@_:next ~s~:@_:modes ~s~:>)"
               next 
               modes)))

(defmethod print-object ((obj descriptor-update-template-entry) out)
  (with-slots (dst-binding
               dst-array-element
               descriptor-count
               descriptor-type
               offset
               stride)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-UPDATE-TEMPLATE-ENTRY~:@_:dst-binding ~s~:@_:dst-array-element ~s~:@_:descriptor-count ~s~:@_:descriptor-type ~s~:@_:offset ~s~:@_:stride ~s~:>)"
               dst-binding 
               dst-array-element 
               descriptor-count 
               descriptor-type 
               offset 
               stride)))

(defmethod print-object ((obj descriptor-update-template-create-info) out)
  (with-slots (next
               flags
               descriptor-update-entries
               template-type
               descriptor-set-layout
               pipeline-bind-point
               pipeline-layout
               set)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-UPDATE-TEMPLATE-CREATE-INFO~:@_:next ~s~:@_:flags ~s~:@_:descriptor-update-entries ~s~:@_:template-type ~s~:@_:descriptor-set-layout ~s~:@_:pipeline-bind-point ~s~:@_:pipeline-layout ~s~:@_:set ~s~:>)"
               next 
               flags 
               descriptor-update-entries 
               template-type 
               descriptor-set-layout 
               pipeline-bind-point 
               pipeline-layout 
               set)))

(defmethod print-object ((obj x-y-color-ext) out)
  (with-slots (x
               y)
      obj
    (cl:format out "~i(~@<X-Y-COLOR-EXT~:@_:x ~s~:@_:y ~s~:>)"
               x 
               y)))

(defmethod print-object ((obj physical-device-present-id-features-khr) out)
  (with-slots (next
               present-id)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PRESENT-ID-FEATURES-KHR~:@_:next ~s~:@_:present-id ~s~:>)"
               next 
               present-id)))

(defmethod print-object ((obj present-id-khr) out)
  (with-slots (next
               present-ids)
      obj
    (cl:format out "~i(~@<PRESENT-ID-KHR~:@_:next ~s~:@_:present-ids ~s~:>)"
               next 
               present-ids)))

(defmethod print-object ((obj physical-device-present-wait-features-khr) out)
  (with-slots (next
               present-wait)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PRESENT-WAIT-FEATURES-KHR~:@_:next ~s~:@_:present-wait ~s~:>)"
               next 
               present-wait)))

(defmethod print-object ((obj hdr-metadata-ext) out)
  (with-slots (next
               display-primary-red
               display-primary-green
               display-primary-blue
               white-point
               max-luminance
               min-luminance
               max-content-light-level
               max-frame-average-light-level)
      obj
    (cl:format out "~i(~@<HDR-METADATA-EXT~:@_:next ~s~:@_:display-primary-red ~s~:@_:display-primary-green ~s~:@_:display-primary-blue ~s~:@_:white-point ~s~:@_:max-luminance ~s~:@_:min-luminance ~s~:@_:max-content-light-level ~s~:@_:max-frame-average-light-level ~s~:>)"
               next 
               display-primary-red 
               display-primary-green 
               display-primary-blue 
               white-point 
               max-luminance 
               min-luminance 
               max-content-light-level 
               max-frame-average-light-level)))

(defmethod print-object ((obj display-native-hdr-surface-capabilities-amd) out)
  (with-slots (next
               local-dimming-support)
      obj
    (cl:format out "~i(~@<DISPLAY-NATIVE-HDR-SURFACE-CAPABILITIES-AMD~:@_:next ~s~:@_:local-dimming-support ~s~:>)"
               next 
               local-dimming-support)))

(defmethod print-object ((obj swapchain-display-native-hdr-create-info-amd) out)
  (with-slots (next
               local-dimming-enable)
      obj
    (cl:format out "~i(~@<SWAPCHAIN-DISPLAY-NATIVE-HDR-CREATE-INFO-AMD~:@_:next ~s~:@_:local-dimming-enable ~s~:>)"
               next 
               local-dimming-enable)))

(defmethod print-object ((obj refresh-cycle-duration-google) out)
  (with-slots (refresh-duration)
      obj
    (cl:format out "~i(~@<REFRESH-CYCLE-DURATION-GOOGLE~:@_:refresh-duration ~s~:>)"
               refresh-duration)))

(defmethod print-object ((obj past-presentation-timing-google) out)
  (with-slots (present-id
               desired-present-time
               actual-present-time
               earliest-present-time
               present-margin)
      obj
    (cl:format out "~i(~@<PAST-PRESENTATION-TIMING-GOOGLE~:@_:present-id ~s~:@_:desired-present-time ~s~:@_:actual-present-time ~s~:@_:earliest-present-time ~s~:@_:present-margin ~s~:>)"
               present-id 
               desired-present-time 
               actual-present-time 
               earliest-present-time 
               present-margin)))

(defmethod print-object ((obj present-times-info-google) out)
  (with-slots (next
               swapchain-count
               times)
      obj
    (cl:format out "~i(~@<PRESENT-TIMES-INFO-GOOGLE~:@_:next ~s~:@_:swapchain-count ~s~:@_:times ~s~:>)"
               next 
               swapchain-count 
               times)))

(defmethod print-object ((obj present-time-google) out)
  (with-slots (present-id
               desired-present-time)
      obj
    (cl:format out "~i(~@<PRESENT-TIME-GOOGLE~:@_:present-id ~s~:@_:desired-present-time ~s~:>)"
               present-id 
               desired-present-time)))

(defmethod print-object ((obj ios-surface-create-info-mvk) out)
  (with-slots (next
               flags
               view)
      obj
    (cl:format out "~i(~@<IOS-SURFACE-CREATE-INFO-MVK~:@_:next ~s~:@_:flags ~s~:@_:view ~s~:>)"
               next 
               flags 
               view)))

(defmethod print-object ((obj mac-os-surface-create-info-mvk) out)
  (with-slots (next
               flags
               view)
      obj
    (cl:format out "~i(~@<MAC-OS-SURFACE-CREATE-INFO-MVK~:@_:next ~s~:@_:flags ~s~:@_:view ~s~:>)"
               next 
               flags 
               view)))

(defmethod print-object ((obj metal-surface-create-info-ext) out)
  (with-slots (next
               flags
               layer)
      obj
    (cl:format out "~i(~@<METAL-SURFACE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:layer ~s~:>)"
               next 
               flags 
               layer)))

(defmethod print-object ((obj viewport-w-scaling-nv) out)
  (with-slots (xcoeff
               ycoeff)
      obj
    (cl:format out "~i(~@<VIEWPORT-W-SCALING-NV~:@_:xcoeff ~s~:@_:ycoeff ~s~:>)"
               xcoeff 
               ycoeff)))

(defmethod print-object ((obj pipeline-viewport-w-scaling-state-create-info-nv) out)
  (with-slots (next
               viewport-w-scaling-enable
               viewport-w-scalings)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-W-SCALING-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:viewport-w-scaling-enable ~s~:@_:viewport-w-scalings ~s~:>)"
               next 
               viewport-w-scaling-enable 
               viewport-w-scalings)))

(defmethod print-object ((obj viewport-swizzle-nv) out)
  (with-slots (x
               y
               z
               w)
      obj
    (cl:format out "~i(~@<VIEWPORT-SWIZZLE-NV~:@_:x ~s~:@_:y ~s~:@_:z ~s~:@_:w ~s~:>)"
               x 
               y 
               z 
               w)))

(defmethod print-object ((obj pipeline-viewport-swizzle-state-create-info-nv) out)
  (with-slots (next
               flags
               viewport-swizzles)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-SWIZZLE-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:viewport-swizzles ~s~:>)"
               next 
               flags 
               viewport-swizzles)))

(defmethod print-object ((obj physical-device-discard-rectangle-properties-ext) out)
  (with-slots (next
               max-discard-rectangles)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DISCARD-RECTANGLE-PROPERTIES-EXT~:@_:next ~s~:@_:max-discard-rectangles ~s~:>)"
               next 
               max-discard-rectangles)))

(defmethod print-object ((obj pipeline-discard-rectangle-state-create-info-ext) out)
  (with-slots (next
               flags
               discard-rectangle-mode
               discard-rectangles)
      obj
    (cl:format out "~i(~@<PIPELINE-DISCARD-RECTANGLE-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:discard-rectangle-mode ~s~:@_:discard-rectangles ~s~:>)"
               next 
               flags 
               discard-rectangle-mode 
               discard-rectangles)))

(defmethod print-object ((obj physical-device-multiview-per-view-attributes-properties-nvx) out)
  (with-slots (next
               per-view-position-all-components)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MULTIVIEW-PER-VIEW-ATTRIBUTES-PROPERTIES-NVX~:@_:next ~s~:@_:per-view-position-all-components ~s~:>)"
               next 
               per-view-position-all-components)))

(defmethod print-object ((obj input-attachment-aspect-reference) out)
  (with-slots (subpass
               input-attachment-index
               aspect-mask)
      obj
    (cl:format out "~i(~@<INPUT-ATTACHMENT-ASPECT-REFERENCE~:@_:subpass ~s~:@_:input-attachment-index ~s~:@_:aspect-mask ~s~:>)"
               subpass 
               input-attachment-index 
               aspect-mask)))

(defmethod print-object ((obj render-pass-input-attachment-aspect-create-info) out)
  (with-slots (next
               aspect-references)
      obj
    (cl:format out "~i(~@<RENDER-PASS-INPUT-ATTACHMENT-ASPECT-CREATE-INFO~:@_:next ~s~:@_:aspect-references ~s~:>)"
               next 
               aspect-references)))

(defmethod print-object ((obj physical-device-surface-info-2-khr) out)
  (with-slots (next
               surface)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SURFACE-INFO-2-KHR~:@_:next ~s~:@_:surface ~s~:>)"
               next 
               surface)))

(defmethod print-object ((obj surface-capabilities-2-khr) out)
  (with-slots (next
               surface-capabilities)
      obj
    (cl:format out "~i(~@<SURFACE-CAPABILITIES-2-KHR~:@_:next ~s~:@_:surface-capabilities ~s~:>)"
               next 
               surface-capabilities)))

(defmethod print-object ((obj surface-format-2-khr) out)
  (with-slots (next
               surface-format)
      obj
    (cl:format out "~i(~@<SURFACE-FORMAT-2-KHR~:@_:next ~s~:@_:surface-format ~s~:>)"
               next 
               surface-format)))

(defmethod print-object ((obj display-properties-2-khr) out)
  (with-slots (next
               display-properties)
      obj
    (cl:format out "~i(~@<DISPLAY-PROPERTIES-2-KHR~:@_:next ~s~:@_:display-properties ~s~:>)"
               next 
               display-properties)))

(defmethod print-object ((obj display-plane-properties-2-khr) out)
  (with-slots (next
               display-plane-properties)
      obj
    (cl:format out "~i(~@<DISPLAY-PLANE-PROPERTIES-2-KHR~:@_:next ~s~:@_:display-plane-properties ~s~:>)"
               next 
               display-plane-properties)))

(defmethod print-object ((obj display-mode-properties-2-khr) out)
  (with-slots (next
               display-mode-properties)
      obj
    (cl:format out "~i(~@<DISPLAY-MODE-PROPERTIES-2-KHR~:@_:next ~s~:@_:display-mode-properties ~s~:>)"
               next 
               display-mode-properties)))

(defmethod print-object ((obj display-plane-info-2-khr) out)
  (with-slots (next
               mode
               plane-index)
      obj
    (cl:format out "~i(~@<DISPLAY-PLANE-INFO-2-KHR~:@_:next ~s~:@_:mode ~s~:@_:plane-index ~s~:>)"
               next 
               mode 
               plane-index)))

(defmethod print-object ((obj display-plane-capabilities-2-khr) out)
  (with-slots (next
               capabilities)
      obj
    (cl:format out "~i(~@<DISPLAY-PLANE-CAPABILITIES-2-KHR~:@_:next ~s~:@_:capabilities ~s~:>)"
               next 
               capabilities)))

(defmethod print-object ((obj shared-present-surface-capabilities-khr) out)
  (with-slots (next
               shared-present-supported-usage-flags)
      obj
    (cl:format out "~i(~@<SHARED-PRESENT-SURFACE-CAPABILITIES-KHR~:@_:next ~s~:@_:shared-present-supported-usage-flags ~s~:>)"
               next 
               shared-present-supported-usage-flags)))

(defmethod print-object ((obj physical-device-16-bit-storage-features) out)
  (with-slots (next
               storage-buffer-16-bit-access
               uniform-and-storage-buffer-16-bit-access
               storage-push-constant-16
               storage-input-output-16)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-16-BIT-STORAGE-FEATURES~:@_:next ~s~:@_:storage-buffer-16-bit-access ~s~:@_:uniform-and-storage-buffer-16-bit-access ~s~:@_:storage-push-constant-16 ~s~:@_:storage-input-output-16 ~s~:>)"
               next 
               storage-buffer-16-bit-access 
               uniform-and-storage-buffer-16-bit-access 
               storage-push-constant-16 
               storage-input-output-16)))

(defmethod print-object ((obj physical-device-subgroup-properties) out)
  (with-slots (next
               subgroup-size
               supported-stages
               supported-operations
               quad-operations-in-all-stages)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SUBGROUP-PROPERTIES~:@_:next ~s~:@_:subgroup-size ~s~:@_:supported-stages ~s~:@_:supported-operations ~s~:@_:quad-operations-in-all-stages ~s~:>)"
               next 
               subgroup-size 
               supported-stages 
               supported-operations 
               quad-operations-in-all-stages)))

(defmethod print-object ((obj physical-device-shader-subgroup-extended-types-features) out)
  (with-slots (next
               shader-subgroup-extended-types)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-SUBGROUP-EXTENDED-TYPES-FEATURES~:@_:next ~s~:@_:shader-subgroup-extended-types ~s~:>)"
               next 
               shader-subgroup-extended-types)))

(defmethod print-object ((obj buffer-memory-requirements-info-2) out)
  (with-slots (next
               buffer)
      obj
    (cl:format out "~i(~@<BUFFER-MEMORY-REQUIREMENTS-INFO-2~:@_:next ~s~:@_:buffer ~s~:>)"
               next 
               buffer)))

(defmethod print-object ((obj device-buffer-memory-requirements-khr) out)
  (with-slots (next
               create-info)
      obj
    (cl:format out "~i(~@<DEVICE-BUFFER-MEMORY-REQUIREMENTS-KHR~:@_:next ~s~:@_:create-info ~s~:>)"
               next 
               create-info)))

(defmethod print-object ((obj image-memory-requirements-info-2) out)
  (with-slots (next
               image)
      obj
    (cl:format out "~i(~@<IMAGE-MEMORY-REQUIREMENTS-INFO-2~:@_:next ~s~:@_:image ~s~:>)"
               next 
               image)))

(defmethod print-object ((obj image-sparse-memory-requirements-info-2) out)
  (with-slots (next
               image)
      obj
    (cl:format out "~i(~@<IMAGE-SPARSE-MEMORY-REQUIREMENTS-INFO-2~:@_:next ~s~:@_:image ~s~:>)"
               next 
               image)))

(defmethod print-object ((obj device-image-memory-requirements-khr) out)
  (with-slots (next
               create-info
               plane-aspect)
      obj
    (cl:format out "~i(~@<DEVICE-IMAGE-MEMORY-REQUIREMENTS-KHR~:@_:next ~s~:@_:create-info ~s~:@_:plane-aspect ~s~:>)"
               next 
               create-info 
               plane-aspect)))

(defmethod print-object ((obj memory-requirements-2) out)
  (with-slots (next
               memory-requirements)
      obj
    (cl:format out "~i(~@<MEMORY-REQUIREMENTS-2~:@_:next ~s~:@_:memory-requirements ~s~:>)"
               next 
               memory-requirements)))

(defmethod print-object ((obj sparse-image-memory-requirements-2) out)
  (with-slots (next
               memory-requirements)
      obj
    (cl:format out "~i(~@<SPARSE-IMAGE-MEMORY-REQUIREMENTS-2~:@_:next ~s~:@_:memory-requirements ~s~:>)"
               next 
               memory-requirements)))

(defmethod print-object ((obj physical-device-point-clipping-properties) out)
  (with-slots (next
               point-clipping-behavior)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-POINT-CLIPPING-PROPERTIES~:@_:next ~s~:@_:point-clipping-behavior ~s~:>)"
               next 
               point-clipping-behavior)))

(defmethod print-object ((obj memory-dedicated-requirements) out)
  (with-slots (next
               prefers-dedicated-allocation
               requires-dedicated-allocation)
      obj
    (cl:format out "~i(~@<MEMORY-DEDICATED-REQUIREMENTS~:@_:next ~s~:@_:prefers-dedicated-allocation ~s~:@_:requires-dedicated-allocation ~s~:>)"
               next 
               prefers-dedicated-allocation 
               requires-dedicated-allocation)))

(defmethod print-object ((obj memory-dedicated-allocate-info) out)
  (with-slots (next
               image
               buffer)
      obj
    (cl:format out "~i(~@<MEMORY-DEDICATED-ALLOCATE-INFO~:@_:next ~s~:@_:image ~s~:@_:buffer ~s~:>)"
               next 
               image 
               buffer)))

(defmethod print-object ((obj image-view-usage-create-info) out)
  (with-slots (next
               usage)
      obj
    (cl:format out "~i(~@<IMAGE-VIEW-USAGE-CREATE-INFO~:@_:next ~s~:@_:usage ~s~:>)"
               next 
               usage)))

(defmethod print-object ((obj pipeline-tessellation-domain-origin-state-create-info) out)
  (with-slots (next
               domain-origin)
      obj
    (cl:format out "~i(~@<PIPELINE-TESSELLATION-DOMAIN-ORIGIN-STATE-CREATE-INFO~:@_:next ~s~:@_:domain-origin ~s~:>)"
               next 
               domain-origin)))

(defmethod print-object ((obj sampler-ycbcr-conversion-info) out)
  (with-slots (next
               conversion)
      obj
    (cl:format out "~i(~@<SAMPLER-YCBCR-CONVERSION-INFO~:@_:next ~s~:@_:conversion ~s~:>)"
               next 
               conversion)))

(defmethod print-object ((obj sampler-ycbcr-conversion-create-info) out)
  (with-slots (next
               format
               ycbcr-model
               ycbcr-range
               components
               x-chroma-offset
               y-chroma-offset
               chroma-filter
               force-explicit-reconstruction)
      obj
    (cl:format out "~i(~@<SAMPLER-YCBCR-CONVERSION-CREATE-INFO~:@_:next ~s~:@_:format ~s~:@_:ycbcr-model ~s~:@_:ycbcr-range ~s~:@_:components ~s~:@_:x-chroma-offset ~s~:@_:y-chroma-offset ~s~:@_:chroma-filter ~s~:@_:force-explicit-reconstruction ~s~:>)"
               next 
               format 
               ycbcr-model 
               ycbcr-range 
               components 
               x-chroma-offset 
               y-chroma-offset 
               chroma-filter 
               force-explicit-reconstruction)))

(defmethod print-object ((obj bind-image-plane-memory-info) out)
  (with-slots (next
               plane-aspect)
      obj
    (cl:format out "~i(~@<BIND-IMAGE-PLANE-MEMORY-INFO~:@_:next ~s~:@_:plane-aspect ~s~:>)"
               next 
               plane-aspect)))

(defmethod print-object ((obj image-plane-memory-requirements-info) out)
  (with-slots (next
               plane-aspect)
      obj
    (cl:format out "~i(~@<IMAGE-PLANE-MEMORY-REQUIREMENTS-INFO~:@_:next ~s~:@_:plane-aspect ~s~:>)"
               next 
               plane-aspect)))

(defmethod print-object ((obj physical-device-sampler-ycbcr-conversion-features) out)
  (with-slots (next
               sampler-ycbcr-conversion)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SAMPLER-YCBCR-CONVERSION-FEATURES~:@_:next ~s~:@_:sampler-ycbcr-conversion ~s~:>)"
               next 
               sampler-ycbcr-conversion)))

(defmethod print-object ((obj sampler-ycbcr-conversion-image-format-properties) out)
  (with-slots (next
               combined-image-sampler-descriptor-count)
      obj
    (cl:format out "~i(~@<SAMPLER-YCBCR-CONVERSION-IMAGE-FORMAT-PROPERTIES~:@_:next ~s~:@_:combined-image-sampler-descriptor-count ~s~:>)"
               next 
               combined-image-sampler-descriptor-count)))

(defmethod print-object ((obj texture-l-o-d-gather-format-properties-amd) out)
  (with-slots (next
               supports-texture-gather-l-o-d-bias-amd)
      obj
    (cl:format out "~i(~@<TEXTURE-L-O-D-GATHER-FORMAT-PROPERTIES-AMD~:@_:next ~s~:@_:supports-texture-gather-l-o-d-bias-amd ~s~:>)"
               next 
               supports-texture-gather-l-o-d-bias-amd)))

(defmethod print-object ((obj conditional-rendering-begin-info-ext) out)
  (with-slots (next
               buffer
               offset
               flags)
      obj
    (cl:format out "~i(~@<CONDITIONAL-RENDERING-BEGIN-INFO-EXT~:@_:next ~s~:@_:buffer ~s~:@_:offset ~s~:@_:flags ~s~:>)"
               next 
               buffer 
               offset 
               flags)))

(defmethod print-object ((obj protected-submit-info) out)
  (with-slots (next
               protected-submit)
      obj
    (cl:format out "~i(~@<PROTECTED-SUBMIT-INFO~:@_:next ~s~:@_:protected-submit ~s~:>)"
               next 
               protected-submit)))

(defmethod print-object ((obj physical-device-protected-memory-features) out)
  (with-slots (next
               protected-memory)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROTECTED-MEMORY-FEATURES~:@_:next ~s~:@_:protected-memory ~s~:>)"
               next 
               protected-memory)))

(defmethod print-object ((obj physical-device-protected-memory-properties) out)
  (with-slots (next
               protected-no-fault)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROTECTED-MEMORY-PROPERTIES~:@_:next ~s~:@_:protected-no-fault ~s~:>)"
               next 
               protected-no-fault)))

(defmethod print-object ((obj device-queue-info-2) out)
  (with-slots (next
               flags
               queue-family-index
               queue-index)
      obj
    (cl:format out "~i(~@<DEVICE-QUEUE-INFO-2~:@_:next ~s~:@_:flags ~s~:@_:queue-family-index ~s~:@_:queue-index ~s~:>)"
               next 
               flags 
               queue-family-index 
               queue-index)))

(defmethod print-object ((obj pipeline-coverage-to-color-state-create-info-nv) out)
  (with-slots (next
               flags
               coverage-to-color-enable
               coverage-to-color-location)
      obj
    (cl:format out "~i(~@<PIPELINE-COVERAGE-TO-COLOR-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:coverage-to-color-enable ~s~:@_:coverage-to-color-location ~s~:>)"
               next 
               flags 
               coverage-to-color-enable 
               coverage-to-color-location)))

(defmethod print-object ((obj physical-device-sampler-filter-minmax-properties) out)
  (with-slots (next
               filter-minmax-single-component-formats
               filter-minmax-image-component-mapping)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SAMPLER-FILTER-MINMAX-PROPERTIES~:@_:next ~s~:@_:filter-minmax-single-component-formats ~s~:@_:filter-minmax-image-component-mapping ~s~:>)"
               next 
               filter-minmax-single-component-formats 
               filter-minmax-image-component-mapping)))

(defmethod print-object ((obj sample-location-ext) out)
  (with-slots (x
               y)
      obj
    (cl:format out "~i(~@<SAMPLE-LOCATION-EXT~:@_:x ~s~:@_:y ~s~:>)"
               x 
               y)))

(defmethod print-object ((obj sample-locations-info-ext) out)
  (with-slots (next
               sample-locations-per-pixel
               sample-location-grid-size
               sample-locations)
      obj
    (cl:format out "~i(~@<SAMPLE-LOCATIONS-INFO-EXT~:@_:next ~s~:@_:sample-locations-per-pixel ~s~:@_:sample-location-grid-size ~s~:@_:sample-locations ~s~:>)"
               next 
               sample-locations-per-pixel 
               sample-location-grid-size 
               sample-locations)))

(defmethod print-object ((obj attachment-sample-locations-ext) out)
  (with-slots (attachment-index
               sample-locations-info)
      obj
    (cl:format out "~i(~@<ATTACHMENT-SAMPLE-LOCATIONS-EXT~:@_:attachment-index ~s~:@_:sample-locations-info ~s~:>)"
               attachment-index 
               sample-locations-info)))

(defmethod print-object ((obj subpass-sample-locations-ext) out)
  (with-slots (subpass-index
               sample-locations-info)
      obj
    (cl:format out "~i(~@<SUBPASS-SAMPLE-LOCATIONS-EXT~:@_:subpass-index ~s~:@_:sample-locations-info ~s~:>)"
               subpass-index 
               sample-locations-info)))

(defmethod print-object ((obj render-pass-sample-locations-begin-info-ext) out)
  (with-slots (next
               attachment-initial-sample-locations
               post-subpass-sample-locations)
      obj
    (cl:format out "~i(~@<RENDER-PASS-SAMPLE-LOCATIONS-BEGIN-INFO-EXT~:@_:next ~s~:@_:attachment-initial-sample-locations ~s~:@_:post-subpass-sample-locations ~s~:>)"
               next 
               attachment-initial-sample-locations 
               post-subpass-sample-locations)))

(defmethod print-object ((obj pipeline-sample-locations-state-create-info-ext) out)
  (with-slots (next
               sample-locations-enable
               sample-locations-info)
      obj
    (cl:format out "~i(~@<PIPELINE-SAMPLE-LOCATIONS-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:sample-locations-enable ~s~:@_:sample-locations-info ~s~:>)"
               next 
               sample-locations-enable 
               sample-locations-info)))

(defmethod print-object ((obj physical-device-sample-locations-properties-ext) out)
  (with-slots (next
               sample-location-sample-counts
               max-sample-location-grid-size
               sample-location-coordinate-range
               sample-location-sub-pixel-bits
               variable-sample-locations)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SAMPLE-LOCATIONS-PROPERTIES-EXT~:@_:next ~s~:@_:sample-location-sample-counts ~s~:@_:max-sample-location-grid-size ~s~:@_:sample-location-coordinate-range ~s~:@_:sample-location-sub-pixel-bits ~s~:@_:variable-sample-locations ~s~:>)"
               next 
               sample-location-sample-counts 
               max-sample-location-grid-size 
               sample-location-coordinate-range 
               sample-location-sub-pixel-bits 
               variable-sample-locations)))

(defmethod print-object ((obj multisample-properties-ext) out)
  (with-slots (next
               max-sample-location-grid-size)
      obj
    (cl:format out "~i(~@<MULTISAMPLE-PROPERTIES-EXT~:@_:next ~s~:@_:max-sample-location-grid-size ~s~:>)"
               next 
               max-sample-location-grid-size)))

(defmethod print-object ((obj sampler-reduction-mode-create-info) out)
  (with-slots (next
               reduction-mode)
      obj
    (cl:format out "~i(~@<SAMPLER-REDUCTION-MODE-CREATE-INFO~:@_:next ~s~:@_:reduction-mode ~s~:>)"
               next 
               reduction-mode)))

(defmethod print-object ((obj physical-device-blend-operation-advanced-features-ext) out)
  (with-slots (next
               advanced-blend-coherent-operations)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-FEATURES-EXT~:@_:next ~s~:@_:advanced-blend-coherent-operations ~s~:>)"
               next 
               advanced-blend-coherent-operations)))

(defmethod print-object ((obj physical-device-multi-draw-features-ext) out)
  (with-slots (next
               multi-draw)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MULTI-DRAW-FEATURES-EXT~:@_:next ~s~:@_:multi-draw ~s~:>)"
               next 
               multi-draw)))

(defmethod print-object ((obj physical-device-blend-operation-advanced-properties-ext) out)
  (with-slots (next
               advanced-blend-max-color-attachments
               advanced-blend-independent-blend
               advanced-blend-non-premultiplied-src-color
               advanced-blend-non-premultiplied-dst-color
               advanced-blend-correlated-overlap
               advanced-blend-all-operations)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-PROPERTIES-EXT~:@_:next ~s~:@_:advanced-blend-max-color-attachments ~s~:@_:advanced-blend-independent-blend ~s~:@_:advanced-blend-non-premultiplied-src-color ~s~:@_:advanced-blend-non-premultiplied-dst-color ~s~:@_:advanced-blend-correlated-overlap ~s~:@_:advanced-blend-all-operations ~s~:>)"
               next 
               advanced-blend-max-color-attachments 
               advanced-blend-independent-blend 
               advanced-blend-non-premultiplied-src-color 
               advanced-blend-non-premultiplied-dst-color 
               advanced-blend-correlated-overlap 
               advanced-blend-all-operations)))

(defmethod print-object ((obj pipeline-color-blend-advanced-state-create-info-ext) out)
  (with-slots (next
               src-premultiplied
               dst-premultiplied
               blend-overlap)
      obj
    (cl:format out "~i(~@<PIPELINE-COLOR-BLEND-ADVANCED-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:src-premultiplied ~s~:@_:dst-premultiplied ~s~:@_:blend-overlap ~s~:>)"
               next 
               src-premultiplied 
               dst-premultiplied 
               blend-overlap)))

(defmethod print-object ((obj physical-device-inline-uniform-block-features-ext) out)
  (with-slots (next
               inline-uniform-block
               descriptor-binding-inline-uniform-block-update-after-bind)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-FEATURES-EXT~:@_:next ~s~:@_:inline-uniform-block ~s~:@_:descriptor-binding-inline-uniform-block-update-after-bind ~s~:>)"
               next 
               inline-uniform-block 
               descriptor-binding-inline-uniform-block-update-after-bind)))

(defmethod print-object ((obj physical-device-inline-uniform-block-properties-ext) out)
  (with-slots (next
               max-inline-uniform-block-size
               max-per-stage-descriptor-inline-uniform-blocks
               max-per-stage-descriptor-update-after-bind-inline-uniform-blocks
               max-descriptor-set-inline-uniform-blocks
               max-descriptor-set-update-after-bind-inline-uniform-blocks)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-PROPERTIES-EXT~:@_:next ~s~:@_:max-inline-uniform-block-size ~s~:@_:max-per-stage-descriptor-inline-uniform-blocks ~s~:@_:max-per-stage-descriptor-update-after-bind-inline-uniform-blocks ~s~:@_:max-descriptor-set-inline-uniform-blocks ~s~:@_:max-descriptor-set-update-after-bind-inline-uniform-blocks ~s~:>)"
               next 
               max-inline-uniform-block-size 
               max-per-stage-descriptor-inline-uniform-blocks 
               max-per-stage-descriptor-update-after-bind-inline-uniform-blocks 
               max-descriptor-set-inline-uniform-blocks 
               max-descriptor-set-update-after-bind-inline-uniform-blocks)))

(defmethod print-object ((obj write-descriptor-set-inline-uniform-block-ext) out)
  (with-slots (next
               data-size
               data)
      obj
    (cl:format out "~i(~@<WRITE-DESCRIPTOR-SET-INLINE-UNIFORM-BLOCK-EXT~:@_:next ~s~:@_:data-size ~s~:@_:data ~s~:>)"
               next 
               data-size 
               data)))

(defmethod print-object ((obj descriptor-pool-inline-uniform-block-create-info-ext) out)
  (with-slots (next
               max-inline-uniform-block-bindings)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-POOL-INLINE-UNIFORM-BLOCK-CREATE-INFO-EXT~:@_:next ~s~:@_:max-inline-uniform-block-bindings ~s~:>)"
               next 
               max-inline-uniform-block-bindings)))

(defmethod print-object ((obj pipeline-coverage-modulation-state-create-info-nv) out)
  (with-slots (next
               flags
               coverage-modulation-mode
               coverage-modulation-table-enable
               coverage-modulation-table)
      obj
    (cl:format out "~i(~@<PIPELINE-COVERAGE-MODULATION-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:coverage-modulation-mode ~s~:@_:coverage-modulation-table-enable ~s~:@_:coverage-modulation-table ~s~:>)"
               next 
               flags 
               coverage-modulation-mode 
               coverage-modulation-table-enable 
               coverage-modulation-table)))

(defmethod print-object ((obj image-format-list-create-info) out)
  (with-slots (next
               view-formats)
      obj
    (cl:format out "~i(~@<IMAGE-FORMAT-LIST-CREATE-INFO~:@_:next ~s~:@_:view-formats ~s~:>)"
               next 
               view-formats)))

(defmethod print-object ((obj validation-cache-create-info-ext) out)
  (with-slots (next
               flags
               initial-data-size
               initial-data)
      obj
    (cl:format out "~i(~@<VALIDATION-CACHE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:initial-data-size ~s~:@_:initial-data ~s~:>)"
               next 
               flags 
               initial-data-size 
               initial-data)))

(defmethod print-object ((obj shader-module-validation-cache-create-info-ext) out)
  (with-slots (next
               validation-cache)
      obj
    (cl:format out "~i(~@<SHADER-MODULE-VALIDATION-CACHE-CREATE-INFO-EXT~:@_:next ~s~:@_:validation-cache ~s~:>)"
               next 
               validation-cache)))

(defmethod print-object ((obj physical-device-maintenance-3-properties) out)
  (with-slots (next
               max-per-set-descriptors
               max-memory-allocation-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MAINTENANCE-3-PROPERTIES~:@_:next ~s~:@_:max-per-set-descriptors ~s~:@_:max-memory-allocation-size ~s~:>)"
               next 
               max-per-set-descriptors 
               max-memory-allocation-size)))

(defmethod print-object ((obj physical-device-maintenance-4-features-khr) out)
  (with-slots (next
               maintenance-4)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MAINTENANCE-4-FEATURES-KHR~:@_:next ~s~:@_:maintenance-4 ~s~:>)"
               next 
               maintenance-4)))

(defmethod print-object ((obj physical-device-maintenance-4-properties-khr) out)
  (with-slots (next
               max-buffer-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MAINTENANCE-4-PROPERTIES-KHR~:@_:next ~s~:@_:max-buffer-size ~s~:>)"
               next 
               max-buffer-size)))

(defmethod print-object ((obj descriptor-set-layout-support) out)
  (with-slots (next
               supported)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-LAYOUT-SUPPORT~:@_:next ~s~:@_:supported ~s~:>)"
               next 
               supported)))

(defmethod print-object ((obj physical-device-shader-draw-parameters-features) out)
  (with-slots (next
               shader-draw-parameters)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-DRAW-PARAMETERS-FEATURES~:@_:next ~s~:@_:shader-draw-parameters ~s~:>)"
               next 
               shader-draw-parameters)))

(defmethod print-object ((obj physical-device-shader-float-16-int-8-features) out)
  (with-slots (next
               shader-float-16
               shader-int-8)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-FLOAT-16-INT-8-FEATURES~:@_:next ~s~:@_:shader-float-16 ~s~:@_:shader-int-8 ~s~:>)"
               next 
               shader-float-16 
               shader-int-8)))

(defmethod print-object ((obj physical-device-float-controls-properties) out)
  (with-slots (next
               denorm-behavior-independence
               rounding-mode-independence
               shader-signed-zero-inf-nan-preserve-float-16
               shader-signed-zero-inf-nan-preserve-float-32
               shader-signed-zero-inf-nan-preserve-float-64
               shader-denorm-preserve-float-16
               shader-denorm-preserve-float-32
               shader-denorm-preserve-float-64
               shader-denorm-flush-to-zero-float-16
               shader-denorm-flush-to-zero-float-32
               shader-denorm-flush-to-zero-float-64
               shader-rounding-mode-rte-float-16
               shader-rounding-mode-rte-float-32
               shader-rounding-mode-rte-float-64
               shader-rounding-mode-rtz-float-16
               shader-rounding-mode-rtz-float-32
               shader-rounding-mode-rtz-float-64)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FLOAT-CONTROLS-PROPERTIES~:@_:next ~s~:@_:denorm-behavior-independence ~s~:@_:rounding-mode-independence ~s~:@_:shader-signed-zero-inf-nan-preserve-float-16 ~s~:@_:shader-signed-zero-inf-nan-preserve-float-32 ~s~:@_:shader-signed-zero-inf-nan-preserve-float-64 ~s~:@_:shader-denorm-preserve-float-16 ~s~:@_:shader-denorm-preserve-float-32 ~s~:@_:shader-denorm-preserve-float-64 ~s~:@_:shader-denorm-flush-to-zero-float-16 ~s~:@_:shader-denorm-flush-to-zero-float-32 ~s~:@_:shader-denorm-flush-to-zero-float-64 ~s~:@_:shader-rounding-mode-rte-float-16 ~s~:@_:shader-rounding-mode-rte-float-32 ~s~:@_:shader-rounding-mode-rte-float-64 ~s~:@_:shader-rounding-mode-rtz-float-16 ~s~:@_:shader-rounding-mode-rtz-float-32 ~s~:@_:shader-rounding-mode-rtz-float-64 ~s~:>)"
               next 
               denorm-behavior-independence 
               rounding-mode-independence 
               shader-signed-zero-inf-nan-preserve-float-16 
               shader-signed-zero-inf-nan-preserve-float-32 
               shader-signed-zero-inf-nan-preserve-float-64 
               shader-denorm-preserve-float-16 
               shader-denorm-preserve-float-32 
               shader-denorm-preserve-float-64 
               shader-denorm-flush-to-zero-float-16 
               shader-denorm-flush-to-zero-float-32 
               shader-denorm-flush-to-zero-float-64 
               shader-rounding-mode-rte-float-16 
               shader-rounding-mode-rte-float-32 
               shader-rounding-mode-rte-float-64 
               shader-rounding-mode-rtz-float-16 
               shader-rounding-mode-rtz-float-32 
               shader-rounding-mode-rtz-float-64)))

(defmethod print-object ((obj physical-device-host-query-reset-features) out)
  (with-slots (next
               host-query-reset)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-HOST-QUERY-RESET-FEATURES~:@_:next ~s~:@_:host-query-reset ~s~:>)"
               next 
               host-query-reset)))

(defmethod print-object ((obj shader-resource-usage-amd) out)
  (with-slots (num-used-vgprs
               num-used-sgprs
               lds-size-per-local-work-group
               lds-usage-size-in-bytes
               scratch-mem-usage-in-bytes)
      obj
    (cl:format out "~i(~@<SHADER-RESOURCE-USAGE-AMD~:@_:num-used-vgprs ~s~:@_:num-used-sgprs ~s~:@_:lds-size-per-local-work-group ~s~:@_:lds-usage-size-in-bytes ~s~:@_:scratch-mem-usage-in-bytes ~s~:>)"
               num-used-vgprs 
               num-used-sgprs 
               lds-size-per-local-work-group 
               lds-usage-size-in-bytes 
               scratch-mem-usage-in-bytes)))

(defmethod print-object ((obj shader-statistics-info-amd) out)
  (with-slots (shader-stage-mask
               resource-usage
               num-physical-vgprs
               num-physical-sgprs
               num-available-vgprs
               num-available-sgprs
               compute-work-group-size)
      obj
    (cl:format out "~i(~@<SHADER-STATISTICS-INFO-AMD~:@_:shader-stage-mask ~s~:@_:resource-usage ~s~:@_:num-physical-vgprs ~s~:@_:num-physical-sgprs ~s~:@_:num-available-vgprs ~s~:@_:num-available-sgprs ~s~:@_:compute-work-group-size ~s~:>)"
               shader-stage-mask 
               resource-usage 
               num-physical-vgprs 
               num-physical-sgprs 
               num-available-vgprs 
               num-available-sgprs 
               compute-work-group-size)))

(defmethod print-object ((obj device-queue-global-priority-create-info-ext) out)
  (with-slots (next
               global-priority)
      obj
    (cl:format out "~i(~@<DEVICE-QUEUE-GLOBAL-PRIORITY-CREATE-INFO-EXT~:@_:next ~s~:@_:global-priority ~s~:>)"
               next 
               global-priority)))

(defmethod print-object ((obj physical-device-global-priority-query-features-ext) out)
  (with-slots (next
               global-priority-query)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-GLOBAL-PRIORITY-QUERY-FEATURES-EXT~:@_:next ~s~:@_:global-priority-query ~s~:>)"
               next 
               global-priority-query)))

(defmethod print-object ((obj queue-family-global-priority-properties-ext) out)
  (with-slots (next
               priority-count
               priorities)
      obj
    (cl:format out "~i(~@<QUEUE-FAMILY-GLOBAL-PRIORITY-PROPERTIES-EXT~:@_:next ~s~:@_:priority-count ~s~:@_:priorities ~s~:>)"
               next 
               priority-count 
               priorities)))

(defmethod print-object ((obj debug-utils-object-name-info-ext) out)
  (with-slots (next
               object-type
               object-handle
               object-name)
      obj
    (cl:format out "~i(~@<DEBUG-UTILS-OBJECT-NAME-INFO-EXT~:@_:next ~s~:@_:object-type ~s~:@_:object-handle ~s~:@_:object-name ~s~:>)"
               next 
               object-type 
               object-handle 
               object-name)))

(defmethod print-object ((obj debug-utils-object-tag-info-ext) out)
  (with-slots (next
               object-type
               object-handle
               tag-name
               tag-size
               tag)
      obj
    (cl:format out "~i(~@<DEBUG-UTILS-OBJECT-TAG-INFO-EXT~:@_:next ~s~:@_:object-type ~s~:@_:object-handle ~s~:@_:tag-name ~s~:@_:tag-size ~s~:@_:tag ~s~:>)"
               next 
               object-type 
               object-handle 
               tag-name 
               tag-size 
               tag)))

(defmethod print-object ((obj debug-utils-label-ext) out)
  (with-slots (next
               label-name
               color)
      obj
    (cl:format out "~i(~@<DEBUG-UTILS-LABEL-EXT~:@_:next ~s~:@_:label-name ~s~:@_:color ~s~:>)"
               next 
               label-name 
               color)))

(defmethod print-object ((obj debug-utils-messenger-create-info-ext) out)
  (with-slots (next
               flags
               message-severity
               message-type
               pfn-user-callback
               user-data)
      obj
    (cl:format out "~i(~@<DEBUG-UTILS-MESSENGER-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:message-severity ~s~:@_:message-type ~s~:@_:pfn-user-callback ~s~:@_:user-data ~s~:>)"
               next 
               flags 
               message-severity 
               message-type 
               pfn-user-callback 
               user-data)))

(defmethod print-object ((obj debug-utils-messenger-callback-data-ext) out)
  (with-slots (next
               flags
               message-id-name
               message-id-number
               message
               queue-labels
               cmd-buf-labels
               objects)
      obj
    (cl:format out "~i(~@<DEBUG-UTILS-MESSENGER-CALLBACK-DATA-EXT~:@_:next ~s~:@_:flags ~s~:@_:message-id-name ~s~:@_:message-id-number ~s~:@_:message ~s~:@_:queue-labels ~s~:@_:cmd-buf-labels ~s~:@_:objects ~s~:>)"
               next 
               flags 
               message-id-name 
               message-id-number 
               message 
               queue-labels 
               cmd-buf-labels 
               objects)))

(defmethod print-object ((obj physical-device-device-memory-report-features-ext) out)
  (with-slots (next
               device-memory-report)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEVICE-MEMORY-REPORT-FEATURES-EXT~:@_:next ~s~:@_:device-memory-report ~s~:>)"
               next 
               device-memory-report)))

(defmethod print-object ((obj device-device-memory-report-create-info-ext) out)
  (with-slots (next
               flags
               pfn-user-callback
               user-data)
      obj
    (cl:format out "~i(~@<DEVICE-DEVICE-MEMORY-REPORT-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:pfn-user-callback ~s~:@_:user-data ~s~:>)"
               next 
               flags 
               pfn-user-callback 
               user-data)))

(defmethod print-object ((obj device-memory-report-callback-data-ext) out)
  (with-slots (next
               flags
               type
               memory-object-id
               size
               object-type
               object-handle
               heap-index)
      obj
    (cl:format out "~i(~@<DEVICE-MEMORY-REPORT-CALLBACK-DATA-EXT~:@_:next ~s~:@_:flags ~s~:@_:type ~s~:@_:memory-object-id ~s~:@_:size ~s~:@_:object-type ~s~:@_:object-handle ~s~:@_:heap-index ~s~:>)"
               next 
               flags 
               type 
               memory-object-id 
               size 
               object-type 
               object-handle 
               heap-index)))

(defmethod print-object ((obj import-memory-host-pointer-info-ext) out)
  (with-slots (next
               handle-type
               host-pointer)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-HOST-POINTER-INFO-EXT~:@_:next ~s~:@_:handle-type ~s~:@_:host-pointer ~s~:>)"
               next 
               handle-type 
               host-pointer)))

(defmethod print-object ((obj memory-host-pointer-properties-ext) out)
  (with-slots (next
               memory-type-bits)
      obj
    (cl:format out "~i(~@<MEMORY-HOST-POINTER-PROPERTIES-EXT~:@_:next ~s~:@_:memory-type-bits ~s~:>)"
               next 
               memory-type-bits)))

(defmethod print-object ((obj physical-device-external-memory-host-properties-ext) out)
  (with-slots (next
               min-imported-host-pointer-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-MEMORY-HOST-PROPERTIES-EXT~:@_:next ~s~:@_:min-imported-host-pointer-alignment ~s~:>)"
               next 
               min-imported-host-pointer-alignment)))

(defmethod print-object ((obj physical-device-conservative-rasterization-properties-ext) out)
  (with-slots (next
               primitive-overestimation-size
               max-extra-primitive-overestimation-size
               extra-primitive-overestimation-size-granularity
               primitive-underestimation
               conservative-point-and-line-rasterization
               degenerate-triangles-rasterized
               degenerate-lines-rasterized
               fully-covered-fragment-shader-input-variable
               conservative-rasterization-post-depth-coverage)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-CONSERVATIVE-RASTERIZATION-PROPERTIES-EXT~:@_:next ~s~:@_:primitive-overestimation-size ~s~:@_:max-extra-primitive-overestimation-size ~s~:@_:extra-primitive-overestimation-size-granularity ~s~:@_:primitive-underestimation ~s~:@_:conservative-point-and-line-rasterization ~s~:@_:degenerate-triangles-rasterized ~s~:@_:degenerate-lines-rasterized ~s~:@_:fully-covered-fragment-shader-input-variable ~s~:@_:conservative-rasterization-post-depth-coverage ~s~:>)"
               next 
               primitive-overestimation-size 
               max-extra-primitive-overestimation-size 
               extra-primitive-overestimation-size-granularity 
               primitive-underestimation 
               conservative-point-and-line-rasterization 
               degenerate-triangles-rasterized 
               degenerate-lines-rasterized 
               fully-covered-fragment-shader-input-variable 
               conservative-rasterization-post-depth-coverage)))

(defmethod print-object ((obj calibrated-timestamp-info-ext) out)
  (with-slots (next
               time-domain)
      obj
    (cl:format out "~i(~@<CALIBRATED-TIMESTAMP-INFO-EXT~:@_:next ~s~:@_:time-domain ~s~:>)"
               next 
               time-domain)))

(defmethod print-object ((obj physical-device-shader-core-properties-amd) out)
  (with-slots (next
               shader-engine-count
               shader-arrays-per-engine-count
               compute-units-per-shader-array
               simd-per-compute-unit
               wavefronts-per-simd
               wavefront-size
               sgprs-per-simd
               min-sgpr-allocation
               max-sgpr-allocation
               sgpr-allocation-granularity
               vgprs-per-simd
               min-vgpr-allocation
               max-vgpr-allocation
               vgpr-allocation-granularity)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-AMD~:@_:next ~s~:@_:shader-engine-count ~s~:@_:shader-arrays-per-engine-count ~s~:@_:compute-units-per-shader-array ~s~:@_:simd-per-compute-unit ~s~:@_:wavefronts-per-simd ~s~:@_:wavefront-size ~s~:@_:sgprs-per-simd ~s~:@_:min-sgpr-allocation ~s~:@_:max-sgpr-allocation ~s~:@_:sgpr-allocation-granularity ~s~:@_:vgprs-per-simd ~s~:@_:min-vgpr-allocation ~s~:@_:max-vgpr-allocation ~s~:@_:vgpr-allocation-granularity ~s~:>)"
               next 
               shader-engine-count 
               shader-arrays-per-engine-count 
               compute-units-per-shader-array 
               simd-per-compute-unit 
               wavefronts-per-simd 
               wavefront-size 
               sgprs-per-simd 
               min-sgpr-allocation 
               max-sgpr-allocation 
               sgpr-allocation-granularity 
               vgprs-per-simd 
               min-vgpr-allocation 
               max-vgpr-allocation 
               vgpr-allocation-granularity)))

(defmethod print-object ((obj physical-device-shader-core-properties-2-amd) out)
  (with-slots (next
               shader-core-features
               active-compute-unit-count)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-2-AMD~:@_:next ~s~:@_:shader-core-features ~s~:@_:active-compute-unit-count ~s~:>)"
               next 
               shader-core-features 
               active-compute-unit-count)))

(defmethod print-object ((obj pipeline-rasterization-conservative-state-create-info-ext) out)
  (with-slots (next
               flags
               conservative-rasterization-mode
               extra-primitive-overestimation-size)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-CONSERVATIVE-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:conservative-rasterization-mode ~s~:@_:extra-primitive-overestimation-size ~s~:>)"
               next 
               flags 
               conservative-rasterization-mode 
               extra-primitive-overestimation-size)))

(defmethod print-object ((obj physical-device-descriptor-indexing-features) out)
  (with-slots (next
               shader-input-attachment-array-dynamic-indexing
               shader-uniform-texel-buffer-array-dynamic-indexing
               shader-storage-texel-buffer-array-dynamic-indexing
               shader-uniform-buffer-array-non-uniform-indexing
               shader-sampled-image-array-non-uniform-indexing
               shader-storage-buffer-array-non-uniform-indexing
               shader-storage-image-array-non-uniform-indexing
               shader-input-attachment-array-non-uniform-indexing
               shader-uniform-texel-buffer-array-non-uniform-indexing
               shader-storage-texel-buffer-array-non-uniform-indexing
               descriptor-binding-uniform-buffer-update-after-bind
               descriptor-binding-sampled-image-update-after-bind
               descriptor-binding-storage-image-update-after-bind
               descriptor-binding-storage-buffer-update-after-bind
               descriptor-binding-uniform-texel-buffer-update-after-bind
               descriptor-binding-storage-texel-buffer-update-after-bind
               descriptor-binding-update-unused-while-pending
               descriptor-binding-partially-bound
               descriptor-binding-variable-descriptor-count
               runtime-descriptor-array)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-FEATURES~:@_:next ~s~:@_:shader-input-attachment-array-dynamic-indexing ~s~:@_:shader-uniform-texel-buffer-array-dynamic-indexing ~s~:@_:shader-storage-texel-buffer-array-dynamic-indexing ~s~:@_:shader-uniform-buffer-array-non-uniform-indexing ~s~:@_:shader-sampled-image-array-non-uniform-indexing ~s~:@_:shader-storage-buffer-array-non-uniform-indexing ~s~:@_:shader-storage-image-array-non-uniform-indexing ~s~:@_:shader-input-attachment-array-non-uniform-indexing ~s~:@_:shader-uniform-texel-buffer-array-non-uniform-indexing ~s~:@_:shader-storage-texel-buffer-array-non-uniform-indexing ~s~:@_:descriptor-binding-uniform-buffer-update-after-bind ~s~:@_:descriptor-binding-sampled-image-update-after-bind ~s~:@_:descriptor-binding-storage-image-update-after-bind ~s~:@_:descriptor-binding-storage-buffer-update-after-bind ~s~:@_:descriptor-binding-uniform-texel-buffer-update-after-bind ~s~:@_:descriptor-binding-storage-texel-buffer-update-after-bind ~s~:@_:descriptor-binding-update-unused-while-pending ~s~:@_:descriptor-binding-partially-bound ~s~:@_:descriptor-binding-variable-descriptor-count ~s~:@_:runtime-descriptor-array ~s~:>)"
               next 
               shader-input-attachment-array-dynamic-indexing 
               shader-uniform-texel-buffer-array-dynamic-indexing 
               shader-storage-texel-buffer-array-dynamic-indexing 
               shader-uniform-buffer-array-non-uniform-indexing 
               shader-sampled-image-array-non-uniform-indexing 
               shader-storage-buffer-array-non-uniform-indexing 
               shader-storage-image-array-non-uniform-indexing 
               shader-input-attachment-array-non-uniform-indexing 
               shader-uniform-texel-buffer-array-non-uniform-indexing 
               shader-storage-texel-buffer-array-non-uniform-indexing 
               descriptor-binding-uniform-buffer-update-after-bind 
               descriptor-binding-sampled-image-update-after-bind 
               descriptor-binding-storage-image-update-after-bind 
               descriptor-binding-storage-buffer-update-after-bind 
               descriptor-binding-uniform-texel-buffer-update-after-bind 
               descriptor-binding-storage-texel-buffer-update-after-bind 
               descriptor-binding-update-unused-while-pending 
               descriptor-binding-partially-bound 
               descriptor-binding-variable-descriptor-count 
               runtime-descriptor-array)))

(defmethod print-object ((obj physical-device-descriptor-indexing-properties) out)
  (with-slots (next
               max-update-after-bind-descriptors-in-all-pools
               shader-uniform-buffer-array-non-uniform-indexing-native
               shader-sampled-image-array-non-uniform-indexing-native
               shader-storage-buffer-array-non-uniform-indexing-native
               shader-storage-image-array-non-uniform-indexing-native
               shader-input-attachment-array-non-uniform-indexing-native
               robust-buffer-access-update-after-bind
               quad-divergent-implicit-lod
               max-per-stage-descriptor-update-after-bind-samplers
               max-per-stage-descriptor-update-after-bind-uniform-buffers
               max-per-stage-descriptor-update-after-bind-storage-buffers
               max-per-stage-descriptor-update-after-bind-sampled-images
               max-per-stage-descriptor-update-after-bind-storage-images
               max-per-stage-descriptor-update-after-bind-input-attachments
               max-per-stage-update-after-bind-resources
               max-descriptor-set-update-after-bind-samplers
               max-descriptor-set-update-after-bind-uniform-buffers
               max-descriptor-set-update-after-bind-uniform-buffers-dynamic
               max-descriptor-set-update-after-bind-storage-buffers
               max-descriptor-set-update-after-bind-storage-buffers-dynamic
               max-descriptor-set-update-after-bind-sampled-images
               max-descriptor-set-update-after-bind-storage-images
               max-descriptor-set-update-after-bind-input-attachments)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-PROPERTIES~:@_:next ~s~:@_:max-update-after-bind-descriptors-in-all-pools ~s~:@_:shader-uniform-buffer-array-non-uniform-indexing-native ~s~:@_:shader-sampled-image-array-non-uniform-indexing-native ~s~:@_:shader-storage-buffer-array-non-uniform-indexing-native ~s~:@_:shader-storage-image-array-non-uniform-indexing-native ~s~:@_:shader-input-attachment-array-non-uniform-indexing-native ~s~:@_:robust-buffer-access-update-after-bind ~s~:@_:quad-divergent-implicit-lod ~s~:@_:max-per-stage-descriptor-update-after-bind-samplers ~s~:@_:max-per-stage-descriptor-update-after-bind-uniform-buffers ~s~:@_:max-per-stage-descriptor-update-after-bind-storage-buffers ~s~:@_:max-per-stage-descriptor-update-after-bind-sampled-images ~s~:@_:max-per-stage-descriptor-update-after-bind-storage-images ~s~:@_:max-per-stage-descriptor-update-after-bind-input-attachments ~s~:@_:max-per-stage-update-after-bind-resources ~s~:@_:max-descriptor-set-update-after-bind-samplers ~s~:@_:max-descriptor-set-update-after-bind-uniform-buffers ~s~:@_:max-descriptor-set-update-after-bind-uniform-buffers-dynamic ~s~:@_:max-descriptor-set-update-after-bind-storage-buffers ~s~:@_:max-descriptor-set-update-after-bind-storage-buffers-dynamic ~s~:@_:max-descriptor-set-update-after-bind-sampled-images ~s~:@_:max-descriptor-set-update-after-bind-storage-images ~s~:@_:max-descriptor-set-update-after-bind-input-attachments ~s~:>)"
               next 
               max-update-after-bind-descriptors-in-all-pools 
               shader-uniform-buffer-array-non-uniform-indexing-native 
               shader-sampled-image-array-non-uniform-indexing-native 
               shader-storage-buffer-array-non-uniform-indexing-native 
               shader-storage-image-array-non-uniform-indexing-native 
               shader-input-attachment-array-non-uniform-indexing-native 
               robust-buffer-access-update-after-bind 
               quad-divergent-implicit-lod 
               max-per-stage-descriptor-update-after-bind-samplers 
               max-per-stage-descriptor-update-after-bind-uniform-buffers 
               max-per-stage-descriptor-update-after-bind-storage-buffers 
               max-per-stage-descriptor-update-after-bind-sampled-images 
               max-per-stage-descriptor-update-after-bind-storage-images 
               max-per-stage-descriptor-update-after-bind-input-attachments 
               max-per-stage-update-after-bind-resources 
               max-descriptor-set-update-after-bind-samplers 
               max-descriptor-set-update-after-bind-uniform-buffers 
               max-descriptor-set-update-after-bind-uniform-buffers-dynamic 
               max-descriptor-set-update-after-bind-storage-buffers 
               max-descriptor-set-update-after-bind-storage-buffers-dynamic 
               max-descriptor-set-update-after-bind-sampled-images 
               max-descriptor-set-update-after-bind-storage-images 
               max-descriptor-set-update-after-bind-input-attachments)))

(defmethod print-object ((obj descriptor-set-layout-binding-flags-create-info) out)
  (with-slots (next
               binding-flags)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-LAYOUT-BINDING-FLAGS-CREATE-INFO~:@_:next ~s~:@_:binding-flags ~s~:>)"
               next 
               binding-flags)))

(defmethod print-object ((obj descriptor-set-variable-descriptor-count-allocate-info) out)
  (with-slots (next
               descriptor-counts)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-ALLOCATE-INFO~:@_:next ~s~:@_:descriptor-counts ~s~:>)"
               next 
               descriptor-counts)))

(defmethod print-object ((obj descriptor-set-variable-descriptor-count-layout-support) out)
  (with-slots (next
               max-variable-descriptor-count)
      obj
    (cl:format out "~i(~@<DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-LAYOUT-SUPPORT~:@_:next ~s~:@_:max-variable-descriptor-count ~s~:>)"
               next 
               max-variable-descriptor-count)))

(defmethod print-object ((obj attachment-description-2) out)
  (with-slots (next
               flags
               format
               samples
               load-op
               store-op
               stencil-load-op
               stencil-store-op
               initial-layout
               final-layout)
      obj
    (cl:format out "~i(~@<ATTACHMENT-DESCRIPTION-2~:@_:next ~s~:@_:flags ~s~:@_:format ~s~:@_:samples ~s~:@_:load-op ~s~:@_:store-op ~s~:@_:stencil-load-op ~s~:@_:stencil-store-op ~s~:@_:initial-layout ~s~:@_:final-layout ~s~:>)"
               next 
               flags 
               format 
               samples 
               load-op 
               store-op 
               stencil-load-op 
               stencil-store-op 
               initial-layout 
               final-layout)))

(defmethod print-object ((obj attachment-reference-2) out)
  (with-slots (next
               attachment
               layout
               aspect-mask)
      obj
    (cl:format out "~i(~@<ATTACHMENT-REFERENCE-2~:@_:next ~s~:@_:attachment ~s~:@_:layout ~s~:@_:aspect-mask ~s~:>)"
               next 
               attachment 
               layout 
               aspect-mask)))

(defmethod print-object ((obj subpass-description-2) out)
  (with-slots (next
               flags
               pipeline-bind-point
               view-mask
               input-attachments
               color-attachments
               resolve-attachments
               depth-stencil-attachment
               preserve-attachments)
      obj
    (cl:format out "~i(~@<SUBPASS-DESCRIPTION-2~:@_:next ~s~:@_:flags ~s~:@_:pipeline-bind-point ~s~:@_:view-mask ~s~:@_:input-attachments ~s~:@_:color-attachments ~s~:@_:resolve-attachments ~s~:@_:depth-stencil-attachment ~s~:@_:preserve-attachments ~s~:>)"
               next 
               flags 
               pipeline-bind-point 
               view-mask 
               input-attachments 
               color-attachments 
               resolve-attachments 
               depth-stencil-attachment 
               preserve-attachments)))

(defmethod print-object ((obj subpass-dependency-2) out)
  (with-slots (next
               src-subpass
               dst-subpass
               src-stage-mask
               dst-stage-mask
               src-access-mask
               dst-access-mask
               dependency-flags
               view-offset)
      obj
    (cl:format out "~i(~@<SUBPASS-DEPENDENCY-2~:@_:next ~s~:@_:src-subpass ~s~:@_:dst-subpass ~s~:@_:src-stage-mask ~s~:@_:dst-stage-mask ~s~:@_:src-access-mask ~s~:@_:dst-access-mask ~s~:@_:dependency-flags ~s~:@_:view-offset ~s~:>)"
               next 
               src-subpass 
               dst-subpass 
               src-stage-mask 
               dst-stage-mask 
               src-access-mask 
               dst-access-mask 
               dependency-flags 
               view-offset)))

(defmethod print-object ((obj render-pass-create-info-2) out)
  (with-slots (next
               flags
               attachments
               subpasses
               dependencies
               correlated-view-masks)
      obj
    (cl:format out "~i(~@<RENDER-PASS-CREATE-INFO-2~:@_:next ~s~:@_:flags ~s~:@_:attachments ~s~:@_:subpasses ~s~:@_:dependencies ~s~:@_:correlated-view-masks ~s~:>)"
               next 
               flags 
               attachments 
               subpasses 
               dependencies 
               correlated-view-masks)))

(defmethod print-object ((obj subpass-begin-info) out)
  (with-slots (next
               contents)
      obj
    (cl:format out "~i(~@<SUBPASS-BEGIN-INFO~:@_:next ~s~:@_:contents ~s~:>)"
               next 
               contents)))

(defmethod print-object ((obj subpass-end-info) out)
  (with-slots (next)
      obj
    (cl:format out "~i(~@<SUBPASS-END-INFO~:@_:next ~s~:>)"
               next)))

(defmethod print-object ((obj physical-device-timeline-semaphore-features) out)
  (with-slots (next
               timeline-semaphore)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-FEATURES~:@_:next ~s~:@_:timeline-semaphore ~s~:>)"
               next 
               timeline-semaphore)))

(defmethod print-object ((obj physical-device-timeline-semaphore-properties) out)
  (with-slots (next
               max-timeline-semaphore-value-difference)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-PROPERTIES~:@_:next ~s~:@_:max-timeline-semaphore-value-difference ~s~:>)"
               next 
               max-timeline-semaphore-value-difference)))

(defmethod print-object ((obj semaphore-type-create-info) out)
  (with-slots (next
               semaphore-type
               initial-value)
      obj
    (cl:format out "~i(~@<SEMAPHORE-TYPE-CREATE-INFO~:@_:next ~s~:@_:semaphore-type ~s~:@_:initial-value ~s~:>)"
               next 
               semaphore-type 
               initial-value)))

(defmethod print-object ((obj timeline-semaphore-submit-info) out)
  (with-slots (next
               wait-semaphore-values
               signal-semaphore-values)
      obj
    (cl:format out "~i(~@<TIMELINE-SEMAPHORE-SUBMIT-INFO~:@_:next ~s~:@_:wait-semaphore-values ~s~:@_:signal-semaphore-values ~s~:>)"
               next 
               wait-semaphore-values 
               signal-semaphore-values)))

(defmethod print-object ((obj semaphore-wait-info) out)
  (with-slots (next
               flags
               semaphores
               values)
      obj
    (cl:format out "~i(~@<SEMAPHORE-WAIT-INFO~:@_:next ~s~:@_:flags ~s~:@_:semaphores ~s~:@_:values ~s~:>)"
               next 
               flags 
               semaphores 
               values)))

(defmethod print-object ((obj semaphore-signal-info) out)
  (with-slots (next
               semaphore
               value)
      obj
    (cl:format out "~i(~@<SEMAPHORE-SIGNAL-INFO~:@_:next ~s~:@_:semaphore ~s~:@_:value ~s~:>)"
               next 
               semaphore 
               value)))

(defmethod print-object ((obj vertex-input-binding-divisor-description-ext) out)
  (with-slots (binding
               divisor)
      obj
    (cl:format out "~i(~@<VERTEX-INPUT-BINDING-DIVISOR-DESCRIPTION-EXT~:@_:binding ~s~:@_:divisor ~s~:>)"
               binding 
               divisor)))

(defmethod print-object ((obj pipeline-vertex-input-divisor-state-create-info-ext) out)
  (with-slots (next
               vertex-binding-divisors)
      obj
    (cl:format out "~i(~@<PIPELINE-VERTEX-INPUT-DIVISOR-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:vertex-binding-divisors ~s~:>)"
               next 
               vertex-binding-divisors)))

(defmethod print-object ((obj physical-device-vertex-attribute-divisor-properties-ext) out)
  (with-slots (next
               max-vertex-attrib-divisor)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-PROPERTIES-EXT~:@_:next ~s~:@_:max-vertex-attrib-divisor ~s~:>)"
               next 
               max-vertex-attrib-divisor)))

(defmethod print-object ((obj physical-device-p-c-i-bus-info-properties-ext) out)
  (with-slots (next
               pci-domain
               pci-bus
               pci-device
               pci-function)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-P-C-I-BUS-INFO-PROPERTIES-EXT~:@_:next ~s~:@_:pci-domain ~s~:@_:pci-bus ~s~:@_:pci-device ~s~:@_:pci-function ~s~:>)"
               next 
               pci-domain 
               pci-bus 
               pci-device 
               pci-function)))

(defmethod print-object ((obj import-android-hardware-buffer-info-android) out)
  (with-slots (next
               buffer)
      obj
    (cl:format out "~i(~@<IMPORT-ANDROID-HARDWARE-BUFFER-INFO-ANDROID~:@_:next ~s~:@_:buffer ~s~:>)"
               next 
               buffer)))

(defmethod print-object ((obj android-hardware-buffer-usage-android) out)
  (with-slots (next
               android-hardware-buffer-usage)
      obj
    (cl:format out "~i(~@<ANDROID-HARDWARE-BUFFER-USAGE-ANDROID~:@_:next ~s~:@_:android-hardware-buffer-usage ~s~:>)"
               next 
               android-hardware-buffer-usage)))

(defmethod print-object ((obj android-hardware-buffer-properties-android) out)
  (with-slots (next
               allocation-size
               memory-type-bits)
      obj
    (cl:format out "~i(~@<ANDROID-HARDWARE-BUFFER-PROPERTIES-ANDROID~:@_:next ~s~:@_:allocation-size ~s~:@_:memory-type-bits ~s~:>)"
               next 
               allocation-size 
               memory-type-bits)))

(defmethod print-object ((obj memory-get-android-hardware-buffer-info-android) out)
  (with-slots (next
               memory)
      obj
    (cl:format out "~i(~@<MEMORY-GET-ANDROID-HARDWARE-BUFFER-INFO-ANDROID~:@_:next ~s~:@_:memory ~s~:>)"
               next 
               memory)))

(defmethod print-object ((obj android-hardware-buffer-format-properties-android) out)
  (with-slots (next
               format
               external-format
               format-features
               sampler-ycbcr-conversion-components
               suggested-ycbcr-model
               suggested-ycbcr-range
               suggested-x-chroma-offset
               suggested-y-chroma-offset)
      obj
    (cl:format out "~i(~@<ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-ANDROID~:@_:next ~s~:@_:format ~s~:@_:external-format ~s~:@_:format-features ~s~:@_:sampler-ycbcr-conversion-components ~s~:@_:suggested-ycbcr-model ~s~:@_:suggested-ycbcr-range ~s~:@_:suggested-x-chroma-offset ~s~:@_:suggested-y-chroma-offset ~s~:>)"
               next 
               format 
               external-format 
               format-features 
               sampler-ycbcr-conversion-components 
               suggested-ycbcr-model 
               suggested-ycbcr-range 
               suggested-x-chroma-offset 
               suggested-y-chroma-offset)))

(defmethod print-object ((obj command-buffer-inheritance-conditional-rendering-info-ext) out)
  (with-slots (next
               conditional-rendering-enable)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-INHERITANCE-CONDITIONAL-RENDERING-INFO-EXT~:@_:next ~s~:@_:conditional-rendering-enable ~s~:>)"
               next 
               conditional-rendering-enable)))

(defmethod print-object ((obj external-format-android) out)
  (with-slots (next
               external-format)
      obj
    (cl:format out "~i(~@<EXTERNAL-FORMAT-ANDROID~:@_:next ~s~:@_:external-format ~s~:>)"
               next 
               external-format)))

(defmethod print-object ((obj physical-device-8-bit-storage-features) out)
  (with-slots (next
               storage-buffer-8-bit-access
               uniform-and-storage-buffer-8-bit-access
               storage-push-constant-8)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-8-BIT-STORAGE-FEATURES~:@_:next ~s~:@_:storage-buffer-8-bit-access ~s~:@_:uniform-and-storage-buffer-8-bit-access ~s~:@_:storage-push-constant-8 ~s~:>)"
               next 
               storage-buffer-8-bit-access 
               uniform-and-storage-buffer-8-bit-access 
               storage-push-constant-8)))

(defmethod print-object ((obj physical-device-conditional-rendering-features-ext) out)
  (with-slots (next
               conditional-rendering
               inherited-conditional-rendering)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-CONDITIONAL-RENDERING-FEATURES-EXT~:@_:next ~s~:@_:conditional-rendering ~s~:@_:inherited-conditional-rendering ~s~:>)"
               next 
               conditional-rendering 
               inherited-conditional-rendering)))

(defmethod print-object ((obj physical-device-vulkan-memory-model-features) out)
  (with-slots (next
               vulkan-memory-model
               vulkan-memory-model-device-scope
               vulkan-memory-model-availability-visibility-chains)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VULKAN-MEMORY-MODEL-FEATURES~:@_:next ~s~:@_:vulkan-memory-model ~s~:@_:vulkan-memory-model-device-scope ~s~:@_:vulkan-memory-model-availability-visibility-chains ~s~:>)"
               next 
               vulkan-memory-model 
               vulkan-memory-model-device-scope 
               vulkan-memory-model-availability-visibility-chains)))

(defmethod print-object ((obj physical-device-shader-atomic-int-64-features) out)
  (with-slots (next
               shader-buffer-int-64-atomics
               shader-shared-int-64-atomics)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-ATOMIC-INT-64-FEATURES~:@_:next ~s~:@_:shader-buffer-int-64-atomics ~s~:@_:shader-shared-int-64-atomics ~s~:>)"
               next 
               shader-buffer-int-64-atomics 
               shader-shared-int-64-atomics)))

(defmethod print-object ((obj physical-device-shader-atomic-float-features-ext) out)
  (with-slots (next
               shader-buffer-float-32-atomics
               shader-buffer-float-32-atomic-add
               shader-buffer-float-64-atomics
               shader-buffer-float-64-atomic-add
               shader-shared-float-32-atomics
               shader-shared-float-32-atomic-add
               shader-shared-float-64-atomics
               shader-shared-float-64-atomic-add
               shader-image-float-32-atomics
               shader-image-float-32-atomic-add
               sparse-image-float-32-atomics
               sparse-image-float-32-atomic-add)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-FEATURES-EXT~:@_:next ~s~:@_:shader-buffer-float-32-atomics ~s~:@_:shader-buffer-float-32-atomic-add ~s~:@_:shader-buffer-float-64-atomics ~s~:@_:shader-buffer-float-64-atomic-add ~s~:@_:shader-shared-float-32-atomics ~s~:@_:shader-shared-float-32-atomic-add ~s~:@_:shader-shared-float-64-atomics ~s~:@_:shader-shared-float-64-atomic-add ~s~:@_:shader-image-float-32-atomics ~s~:@_:shader-image-float-32-atomic-add ~s~:@_:sparse-image-float-32-atomics ~s~:@_:sparse-image-float-32-atomic-add ~s~:>)"
               next 
               shader-buffer-float-32-atomics 
               shader-buffer-float-32-atomic-add 
               shader-buffer-float-64-atomics 
               shader-buffer-float-64-atomic-add 
               shader-shared-float-32-atomics 
               shader-shared-float-32-atomic-add 
               shader-shared-float-64-atomics 
               shader-shared-float-64-atomic-add 
               shader-image-float-32-atomics 
               shader-image-float-32-atomic-add 
               sparse-image-float-32-atomics 
               sparse-image-float-32-atomic-add)))

(defmethod print-object ((obj physical-device-shader-atomic-float-2-features-ext) out)
  (with-slots (next
               shader-buffer-float-16-atomics
               shader-buffer-float-16-atomic-add
               shader-buffer-float-16-atomic-min-max
               shader-buffer-float-32-atomic-min-max
               shader-buffer-float-64-atomic-min-max
               shader-shared-float-16-atomics
               shader-shared-float-16-atomic-add
               shader-shared-float-16-atomic-min-max
               shader-shared-float-32-atomic-min-max
               shader-shared-float-64-atomic-min-max
               shader-image-float-32-atomic-min-max
               sparse-image-float-32-atomic-min-max)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-2-FEATURES-EXT~:@_:next ~s~:@_:shader-buffer-float-16-atomics ~s~:@_:shader-buffer-float-16-atomic-add ~s~:@_:shader-buffer-float-16-atomic-min-max ~s~:@_:shader-buffer-float-32-atomic-min-max ~s~:@_:shader-buffer-float-64-atomic-min-max ~s~:@_:shader-shared-float-16-atomics ~s~:@_:shader-shared-float-16-atomic-add ~s~:@_:shader-shared-float-16-atomic-min-max ~s~:@_:shader-shared-float-32-atomic-min-max ~s~:@_:shader-shared-float-64-atomic-min-max ~s~:@_:shader-image-float-32-atomic-min-max ~s~:@_:sparse-image-float-32-atomic-min-max ~s~:>)"
               next 
               shader-buffer-float-16-atomics 
               shader-buffer-float-16-atomic-add 
               shader-buffer-float-16-atomic-min-max 
               shader-buffer-float-32-atomic-min-max 
               shader-buffer-float-64-atomic-min-max 
               shader-shared-float-16-atomics 
               shader-shared-float-16-atomic-add 
               shader-shared-float-16-atomic-min-max 
               shader-shared-float-32-atomic-min-max 
               shader-shared-float-64-atomic-min-max 
               shader-image-float-32-atomic-min-max 
               sparse-image-float-32-atomic-min-max)))

(defmethod print-object ((obj physical-device-vertex-attribute-divisor-features-ext) out)
  (with-slots (next
               vertex-attribute-instance-rate-divisor
               vertex-attribute-instance-rate-zero-divisor)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-FEATURES-EXT~:@_:next ~s~:@_:vertex-attribute-instance-rate-divisor ~s~:@_:vertex-attribute-instance-rate-zero-divisor ~s~:>)"
               next 
               vertex-attribute-instance-rate-divisor 
               vertex-attribute-instance-rate-zero-divisor)))

(defmethod print-object ((obj queue-family-checkpoint-properties-nv) out)
  (with-slots (next
               checkpoint-execution-stage-mask)
      obj
    (cl:format out "~i(~@<QUEUE-FAMILY-CHECKPOINT-PROPERTIES-NV~:@_:next ~s~:@_:checkpoint-execution-stage-mask ~s~:>)"
               next 
               checkpoint-execution-stage-mask)))

(defmethod print-object ((obj checkpoint-data-nv) out)
  (with-slots (next
               stage
               checkpoint-marker)
      obj
    (cl:format out "~i(~@<CHECKPOINT-DATA-NV~:@_:next ~s~:@_:stage ~s~:@_:checkpoint-marker ~s~:>)"
               next 
               stage 
               checkpoint-marker)))

(defmethod print-object ((obj physical-device-depth-stencil-resolve-properties) out)
  (with-slots (next
               supported-depth-resolve-modes
               supported-stencil-resolve-modes
               independent-resolve-none
               independent-resolve)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEPTH-STENCIL-RESOLVE-PROPERTIES~:@_:next ~s~:@_:supported-depth-resolve-modes ~s~:@_:supported-stencil-resolve-modes ~s~:@_:independent-resolve-none ~s~:@_:independent-resolve ~s~:>)"
               next 
               supported-depth-resolve-modes 
               supported-stencil-resolve-modes 
               independent-resolve-none 
               independent-resolve)))

(defmethod print-object ((obj subpass-description-depth-stencil-resolve) out)
  (with-slots (next
               depth-resolve-mode
               stencil-resolve-mode
               depth-stencil-resolve-attachment)
      obj
    (cl:format out "~i(~@<SUBPASS-DESCRIPTION-DEPTH-STENCIL-RESOLVE~:@_:next ~s~:@_:depth-resolve-mode ~s~:@_:stencil-resolve-mode ~s~:@_:depth-stencil-resolve-attachment ~s~:>)"
               next 
               depth-resolve-mode 
               stencil-resolve-mode 
               depth-stencil-resolve-attachment)))

(defmethod print-object ((obj image-view-astc-decode-mode-ext) out)
  (with-slots (next
               decode-mode)
      obj
    (cl:format out "~i(~@<IMAGE-VIEW-ASTC-DECODE-MODE-EXT~:@_:next ~s~:@_:decode-mode ~s~:>)"
               next 
               decode-mode)))

(defmethod print-object ((obj physical-device-astc-decode-features-ext) out)
  (with-slots (next
               decode-mode-shared-exponent)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ASTC-DECODE-FEATURES-EXT~:@_:next ~s~:@_:decode-mode-shared-exponent ~s~:>)"
               next 
               decode-mode-shared-exponent)))

(defmethod print-object ((obj physical-device-transform-feedback-features-ext) out)
  (with-slots (next
               transform-feedback
               geometry-streams)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-FEATURES-EXT~:@_:next ~s~:@_:transform-feedback ~s~:@_:geometry-streams ~s~:>)"
               next 
               transform-feedback 
               geometry-streams)))

(defmethod print-object ((obj physical-device-transform-feedback-properties-ext) out)
  (with-slots (next
               max-transform-feedback-streams
               max-transform-feedback-buffers
               max-transform-feedback-buffer-size
               max-transform-feedback-stream-data-size
               max-transform-feedback-buffer-data-size
               max-transform-feedback-buffer-data-stride
               transform-feedback-queries
               transform-feedback-streams-lines-triangles
               transform-feedback-rasterization-stream-select
               transform-feedback-draw)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-PROPERTIES-EXT~:@_:next ~s~:@_:max-transform-feedback-streams ~s~:@_:max-transform-feedback-buffers ~s~:@_:max-transform-feedback-buffer-size ~s~:@_:max-transform-feedback-stream-data-size ~s~:@_:max-transform-feedback-buffer-data-size ~s~:@_:max-transform-feedback-buffer-data-stride ~s~:@_:transform-feedback-queries ~s~:@_:transform-feedback-streams-lines-triangles ~s~:@_:transform-feedback-rasterization-stream-select ~s~:@_:transform-feedback-draw ~s~:>)"
               next 
               max-transform-feedback-streams 
               max-transform-feedback-buffers 
               max-transform-feedback-buffer-size 
               max-transform-feedback-stream-data-size 
               max-transform-feedback-buffer-data-size 
               max-transform-feedback-buffer-data-stride 
               transform-feedback-queries 
               transform-feedback-streams-lines-triangles 
               transform-feedback-rasterization-stream-select 
               transform-feedback-draw)))

(defmethod print-object ((obj pipeline-rasterization-state-stream-create-info-ext) out)
  (with-slots (next
               flags
               rasterization-stream)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-STATE-STREAM-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:rasterization-stream ~s~:>)"
               next 
               flags 
               rasterization-stream)))

(defmethod print-object ((obj physical-device-representative-fragment-test-features-nv) out)
  (with-slots (next
               representative-fragment-test)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-REPRESENTATIVE-FRAGMENT-TEST-FEATURES-NV~:@_:next ~s~:@_:representative-fragment-test ~s~:>)"
               next 
               representative-fragment-test)))

(defmethod print-object ((obj pipeline-representative-fragment-test-state-create-info-nv) out)
  (with-slots (next
               representative-fragment-test-enable)
      obj
    (cl:format out "~i(~@<PIPELINE-REPRESENTATIVE-FRAGMENT-TEST-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:representative-fragment-test-enable ~s~:>)"
               next 
               representative-fragment-test-enable)))

(defmethod print-object ((obj physical-device-exclusive-scissor-features-nv) out)
  (with-slots (next
               exclusive-scissor)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXCLUSIVE-SCISSOR-FEATURES-NV~:@_:next ~s~:@_:exclusive-scissor ~s~:>)"
               next 
               exclusive-scissor)))

(defmethod print-object ((obj pipeline-viewport-exclusive-scissor-state-create-info-nv) out)
  (with-slots (next
               exclusive-scissors)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-EXCLUSIVE-SCISSOR-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:exclusive-scissors ~s~:>)"
               next 
               exclusive-scissors)))

(defmethod print-object ((obj physical-device-corner-sampled-image-features-nv) out)
  (with-slots (next
               corner-sampled-image)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-CORNER-SAMPLED-IMAGE-FEATURES-NV~:@_:next ~s~:@_:corner-sampled-image ~s~:>)"
               next 
               corner-sampled-image)))

(defmethod print-object ((obj physical-device-compute-shader-derivatives-features-nv) out)
  (with-slots (next
               compute-derivative-group-quads
               compute-derivative-group-linear)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COMPUTE-SHADER-DERIVATIVES-FEATURES-NV~:@_:next ~s~:@_:compute-derivative-group-quads ~s~:@_:compute-derivative-group-linear ~s~:>)"
               next 
               compute-derivative-group-quads 
               compute-derivative-group-linear)))

(defmethod print-object ((obj physical-device-fragment-shader-barycentric-features-nv) out)
  (with-slots (next
               fragment-shader-barycentric)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADER-BARYCENTRIC-FEATURES-NV~:@_:next ~s~:@_:fragment-shader-barycentric ~s~:>)"
               next 
               fragment-shader-barycentric)))

(defmethod print-object ((obj physical-device-shader-image-footprint-features-nv) out)
  (with-slots (next
               image-footprint)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-IMAGE-FOOTPRINT-FEATURES-NV~:@_:next ~s~:@_:image-footprint ~s~:>)"
               next 
               image-footprint)))

(defmethod print-object ((obj physical-device-dedicated-allocation-image-aliasing-features-nv) out)
  (with-slots (next
               dedicated-allocation-image-aliasing)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEDICATED-ALLOCATION-IMAGE-ALIASING-FEATURES-NV~:@_:next ~s~:@_:dedicated-allocation-image-aliasing ~s~:>)"
               next 
               dedicated-allocation-image-aliasing)))

(defmethod print-object ((obj shading-rate-palette-nv) out)
  (with-slots (shading-rate-palette-entries)
      obj
    (cl:format out "~i(~@<SHADING-RATE-PALETTE-NV~:@_:shading-rate-palette-entries ~s~:>)"
               shading-rate-palette-entries)))

(defmethod print-object ((obj pipeline-viewport-shading-rate-image-state-create-info-nv) out)
  (with-slots (next
               shading-rate-image-enable
               shading-rate-palettes)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-SHADING-RATE-IMAGE-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:shading-rate-image-enable ~s~:@_:shading-rate-palettes ~s~:>)"
               next 
               shading-rate-image-enable 
               shading-rate-palettes)))

(defmethod print-object ((obj physical-device-shading-rate-image-features-nv) out)
  (with-slots (next
               shading-rate-image
               shading-rate-coarse-sample-order)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADING-RATE-IMAGE-FEATURES-NV~:@_:next ~s~:@_:shading-rate-image ~s~:@_:shading-rate-coarse-sample-order ~s~:>)"
               next 
               shading-rate-image 
               shading-rate-coarse-sample-order)))

(defmethod print-object ((obj physical-device-shading-rate-image-properties-nv) out)
  (with-slots (next
               shading-rate-texel-size
               shading-rate-palette-size
               shading-rate-max-coarse-samples)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADING-RATE-IMAGE-PROPERTIES-NV~:@_:next ~s~:@_:shading-rate-texel-size ~s~:@_:shading-rate-palette-size ~s~:@_:shading-rate-max-coarse-samples ~s~:>)"
               next 
               shading-rate-texel-size 
               shading-rate-palette-size 
               shading-rate-max-coarse-samples)))

(defmethod print-object ((obj physical-device-invocation-mask-features-huawei) out)
  (with-slots (next
               invocation-mask)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-INVOCATION-MASK-FEATURES-HUAWEI~:@_:next ~s~:@_:invocation-mask ~s~:>)"
               next 
               invocation-mask)))

(defmethod print-object ((obj coarse-sample-location-nv) out)
  (with-slots (pixel-x
               pixel-y
               sample)
      obj
    (cl:format out "~i(~@<COARSE-SAMPLE-LOCATION-NV~:@_:pixel-x ~s~:@_:pixel-y ~s~:@_:sample ~s~:>)"
               pixel-x 
               pixel-y 
               sample)))

(defmethod print-object ((obj coarse-sample-order-custom-nv) out)
  (with-slots (shading-rate
               sample-count
               sample-locations)
      obj
    (cl:format out "~i(~@<COARSE-SAMPLE-ORDER-CUSTOM-NV~:@_:shading-rate ~s~:@_:sample-count ~s~:@_:sample-locations ~s~:>)"
               shading-rate 
               sample-count 
               sample-locations)))

(defmethod print-object ((obj pipeline-viewport-coarse-sample-order-state-create-info-nv) out)
  (with-slots (next
               sample-order-type
               custom-sample-orders)
      obj
    (cl:format out "~i(~@<PIPELINE-VIEWPORT-COARSE-SAMPLE-ORDER-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:sample-order-type ~s~:@_:custom-sample-orders ~s~:>)"
               next 
               sample-order-type 
               custom-sample-orders)))

(defmethod print-object ((obj physical-device-mesh-shader-features-nv) out)
  (with-slots (next
               task-shader
               mesh-shader)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MESH-SHADER-FEATURES-NV~:@_:next ~s~:@_:task-shader ~s~:@_:mesh-shader ~s~:>)"
               next 
               task-shader 
               mesh-shader)))

(defmethod print-object ((obj physical-device-mesh-shader-properties-nv) out)
  (with-slots (next
               max-draw-mesh-tasks-count
               max-task-work-group-invocations
               max-task-work-group-size
               max-task-total-memory-size
               max-task-output-count
               max-mesh-work-group-invocations
               max-mesh-work-group-size
               max-mesh-total-memory-size
               max-mesh-output-vertices
               max-mesh-output-primitives
               max-mesh-multiview-view-count
               mesh-output-per-vertex-granularity
               mesh-output-per-primitive-granularity)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MESH-SHADER-PROPERTIES-NV~:@_:next ~s~:@_:max-draw-mesh-tasks-count ~s~:@_:max-task-work-group-invocations ~s~:@_:max-task-work-group-size ~s~:@_:max-task-total-memory-size ~s~:@_:max-task-output-count ~s~:@_:max-mesh-work-group-invocations ~s~:@_:max-mesh-work-group-size ~s~:@_:max-mesh-total-memory-size ~s~:@_:max-mesh-output-vertices ~s~:@_:max-mesh-output-primitives ~s~:@_:max-mesh-multiview-view-count ~s~:@_:mesh-output-per-vertex-granularity ~s~:@_:mesh-output-per-primitive-granularity ~s~:>)"
               next 
               max-draw-mesh-tasks-count 
               max-task-work-group-invocations 
               max-task-work-group-size 
               max-task-total-memory-size 
               max-task-output-count 
               max-mesh-work-group-invocations 
               max-mesh-work-group-size 
               max-mesh-total-memory-size 
               max-mesh-output-vertices 
               max-mesh-output-primitives 
               max-mesh-multiview-view-count 
               mesh-output-per-vertex-granularity 
               mesh-output-per-primitive-granularity)))

(defmethod print-object ((obj draw-mesh-tasks-indirect-command-nv) out)
  (with-slots (task-count
               first-task)
      obj
    (cl:format out "~i(~@<DRAW-MESH-TASKS-INDIRECT-COMMAND-NV~:@_:task-count ~s~:@_:first-task ~s~:>)"
               task-count 
               first-task)))

(defmethod print-object ((obj ray-tracing-shader-group-create-info-nv) out)
  (with-slots (next
               type
               general-shader
               closest-hit-shader
               any-hit-shader
               intersection-shader)
      obj
    (cl:format out "~i(~@<RAY-TRACING-SHADER-GROUP-CREATE-INFO-NV~:@_:next ~s~:@_:type ~s~:@_:general-shader ~s~:@_:closest-hit-shader ~s~:@_:any-hit-shader ~s~:@_:intersection-shader ~s~:>)"
               next 
               type 
               general-shader 
               closest-hit-shader 
               any-hit-shader 
               intersection-shader)))

(defmethod print-object ((obj ray-tracing-shader-group-create-info-khr) out)
  (with-slots (next
               type
               general-shader
               closest-hit-shader
               any-hit-shader
               intersection-shader
               shader-group-capture-replay-handle)
      obj
    (cl:format out "~i(~@<RAY-TRACING-SHADER-GROUP-CREATE-INFO-KHR~:@_:next ~s~:@_:type ~s~:@_:general-shader ~s~:@_:closest-hit-shader ~s~:@_:any-hit-shader ~s~:@_:intersection-shader ~s~:@_:shader-group-capture-replay-handle ~s~:>)"
               next 
               type 
               general-shader 
               closest-hit-shader 
               any-hit-shader 
               intersection-shader 
               shader-group-capture-replay-handle)))

(defmethod print-object ((obj ray-tracing-pipeline-create-info-nv) out)
  (with-slots (next
               flags
               stages
               groups
               max-recursion-depth
               layout
               base-pipeline-handle
               base-pipeline-index)
      obj
    (cl:format out "~i(~@<RAY-TRACING-PIPELINE-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:stages ~s~:@_:groups ~s~:@_:max-recursion-depth ~s~:@_:layout ~s~:@_:base-pipeline-handle ~s~:@_:base-pipeline-index ~s~:>)"
               next 
               flags 
               stages 
               groups 
               max-recursion-depth 
               layout 
               base-pipeline-handle 
               base-pipeline-index)))

(defmethod print-object ((obj ray-tracing-pipeline-create-info-khr) out)
  (with-slots (next
               flags
               stages
               groups
               max-pipeline-ray-recursion-depth
               library-info
               library-interface
               dynamic-state
               layout
               base-pipeline-handle
               base-pipeline-index)
      obj
    (cl:format out "~i(~@<RAY-TRACING-PIPELINE-CREATE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:stages ~s~:@_:groups ~s~:@_:max-pipeline-ray-recursion-depth ~s~:@_:library-info ~s~:@_:library-interface ~s~:@_:dynamic-state ~s~:@_:layout ~s~:@_:base-pipeline-handle ~s~:@_:base-pipeline-index ~s~:>)"
               next 
               flags 
               stages 
               groups 
               max-pipeline-ray-recursion-depth 
               library-info 
               library-interface 
               dynamic-state 
               layout 
               base-pipeline-handle 
               base-pipeline-index)))

(defmethod print-object ((obj geometry-triangles-nv) out)
  (with-slots (next
               vertex-data
               vertex-offset
               vertex-count
               vertex-stride
               vertex-format
               index-data
               index-offset
               index-count
               index-type
               transform-data
               transform-offset)
      obj
    (cl:format out "~i(~@<GEOMETRY-TRIANGLES-NV~:@_:next ~s~:@_:vertex-data ~s~:@_:vertex-offset ~s~:@_:vertex-count ~s~:@_:vertex-stride ~s~:@_:vertex-format ~s~:@_:index-data ~s~:@_:index-offset ~s~:@_:index-count ~s~:@_:index-type ~s~:@_:transform-data ~s~:@_:transform-offset ~s~:>)"
               next 
               vertex-data 
               vertex-offset 
               vertex-count 
               vertex-stride 
               vertex-format 
               index-data 
               index-offset 
               index-count 
               index-type 
               transform-data 
               transform-offset)))

(defmethod print-object ((obj geometry-aabb-nv) out)
  (with-slots (next
               aabb-data
               num-aabbs
               stride
               offset)
      obj
    (cl:format out "~i(~@<GEOMETRY-AABB-NV~:@_:next ~s~:@_:aabb-data ~s~:@_:num-aabbs ~s~:@_:stride ~s~:@_:offset ~s~:>)"
               next 
               aabb-data 
               num-aabbs 
               stride 
               offset)))

(defmethod print-object ((obj geometry-data-nv) out)
  (with-slots (triangles
               aabbs)
      obj
    (cl:format out "~i(~@<GEOMETRY-DATA-NV~:@_:triangles ~s~:@_:aabbs ~s~:>)"
               triangles 
               aabbs)))

(defmethod print-object ((obj geometry-nv) out)
  (with-slots (next
               geometry-type
               geometry
               flags)
      obj
    (cl:format out "~i(~@<GEOMETRY-NV~:@_:next ~s~:@_:geometry-type ~s~:@_:geometry ~s~:@_:flags ~s~:>)"
               next 
               geometry-type 
               geometry 
               flags)))

(defmethod print-object ((obj acceleration-structure-info-nv) out)
  (with-slots (next
               type
               flags
               instance-count
               geometries)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-INFO-NV~:@_:next ~s~:@_:type ~s~:@_:flags ~s~:@_:instance-count ~s~:@_:geometries ~s~:>)"
               next 
               type 
               flags 
               instance-count 
               geometries)))

(defmethod print-object ((obj acceleration-structure-create-info-nv) out)
  (with-slots (next
               compacted-size
               info)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-CREATE-INFO-NV~:@_:next ~s~:@_:compacted-size ~s~:@_:info ~s~:>)"
               next 
               compacted-size 
               info)))

(defmethod print-object ((obj bind-acceleration-structure-memory-info-nv) out)
  (with-slots (next
               acceleration-structure
               memory
               memory-offset
               device-indices)
      obj
    (cl:format out "~i(~@<BIND-ACCELERATION-STRUCTURE-MEMORY-INFO-NV~:@_:next ~s~:@_:acceleration-structure ~s~:@_:memory ~s~:@_:memory-offset ~s~:@_:device-indices ~s~:>)"
               next 
               acceleration-structure 
               memory 
               memory-offset 
               device-indices)))

(defmethod print-object ((obj write-descriptor-set-acceleration-structure-khr) out)
  (with-slots (next
               acceleration-structures)
      obj
    (cl:format out "~i(~@<WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-KHR~:@_:next ~s~:@_:acceleration-structures ~s~:>)"
               next 
               acceleration-structures)))

(defmethod print-object ((obj write-descriptor-set-acceleration-structure-nv) out)
  (with-slots (next
               acceleration-structures)
      obj
    (cl:format out "~i(~@<WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-NV~:@_:next ~s~:@_:acceleration-structures ~s~:>)"
               next 
               acceleration-structures)))

(defmethod print-object ((obj acceleration-structure-memory-requirements-info-nv) out)
  (with-slots (next
               type
               acceleration-structure)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-MEMORY-REQUIREMENTS-INFO-NV~:@_:next ~s~:@_:type ~s~:@_:acceleration-structure ~s~:>)"
               next 
               type 
               acceleration-structure)))

(defmethod print-object ((obj physical-device-acceleration-structure-features-khr) out)
  (with-slots (next
               acceleration-structure
               acceleration-structure-capture-replay
               acceleration-structure-indirect-build
               acceleration-structure-host-commands
               descriptor-binding-acceleration-structure-update-after-bind)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-FEATURES-KHR~:@_:next ~s~:@_:acceleration-structure ~s~:@_:acceleration-structure-capture-replay ~s~:@_:acceleration-structure-indirect-build ~s~:@_:acceleration-structure-host-commands ~s~:@_:descriptor-binding-acceleration-structure-update-after-bind ~s~:>)"
               next 
               acceleration-structure 
               acceleration-structure-capture-replay 
               acceleration-structure-indirect-build 
               acceleration-structure-host-commands 
               descriptor-binding-acceleration-structure-update-after-bind)))

(defmethod print-object ((obj physical-device-ray-tracing-pipeline-features-khr) out)
  (with-slots (next
               ray-tracing-pipeline
               ray-tracing-pipeline-shader-group-handle-capture-replay
               ray-tracing-pipeline-shader-group-handle-capture-replay-mixed
               ray-tracing-pipeline-trace-rays-indirect
               ray-traversal-primitive-culling)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-FEATURES-KHR~:@_:next ~s~:@_:ray-tracing-pipeline ~s~:@_:ray-tracing-pipeline-shader-group-handle-capture-replay ~s~:@_:ray-tracing-pipeline-shader-group-handle-capture-replay-mixed ~s~:@_:ray-tracing-pipeline-trace-rays-indirect ~s~:@_:ray-traversal-primitive-culling ~s~:>)"
               next 
               ray-tracing-pipeline 
               ray-tracing-pipeline-shader-group-handle-capture-replay 
               ray-tracing-pipeline-shader-group-handle-capture-replay-mixed 
               ray-tracing-pipeline-trace-rays-indirect 
               ray-traversal-primitive-culling)))

(defmethod print-object ((obj physical-device-ray-query-features-khr) out)
  (with-slots (next
               ray-query)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-RAY-QUERY-FEATURES-KHR~:@_:next ~s~:@_:ray-query ~s~:>)"
               next 
               ray-query)))

(defmethod print-object ((obj physical-device-acceleration-structure-properties-khr) out)
  (with-slots (next
               max-geometry-count
               max-instance-count
               max-primitive-count
               max-per-stage-descriptor-acceleration-structures
               max-per-stage-descriptor-update-after-bind-acceleration-structures
               max-descriptor-set-acceleration-structures
               max-descriptor-set-update-after-bind-acceleration-structures
               min-acceleration-structure-scratch-offset-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-PROPERTIES-KHR~:@_:next ~s~:@_:max-geometry-count ~s~:@_:max-instance-count ~s~:@_:max-primitive-count ~s~:@_:max-per-stage-descriptor-acceleration-structures ~s~:@_:max-per-stage-descriptor-update-after-bind-acceleration-structures ~s~:@_:max-descriptor-set-acceleration-structures ~s~:@_:max-descriptor-set-update-after-bind-acceleration-structures ~s~:@_:min-acceleration-structure-scratch-offset-alignment ~s~:>)"
               next 
               max-geometry-count 
               max-instance-count 
               max-primitive-count 
               max-per-stage-descriptor-acceleration-structures 
               max-per-stage-descriptor-update-after-bind-acceleration-structures 
               max-descriptor-set-acceleration-structures 
               max-descriptor-set-update-after-bind-acceleration-structures 
               min-acceleration-structure-scratch-offset-alignment)))

(defmethod print-object ((obj physical-device-ray-tracing-pipeline-properties-khr) out)
  (with-slots (next
               shader-group-handle-size
               max-ray-recursion-depth
               max-shader-group-stride
               shader-group-base-alignment
               shader-group-handle-capture-replay-size
               max-ray-dispatch-invocation-count
               shader-group-handle-alignment
               max-ray-hit-attribute-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-PROPERTIES-KHR~:@_:next ~s~:@_:shader-group-handle-size ~s~:@_:max-ray-recursion-depth ~s~:@_:max-shader-group-stride ~s~:@_:shader-group-base-alignment ~s~:@_:shader-group-handle-capture-replay-size ~s~:@_:max-ray-dispatch-invocation-count ~s~:@_:shader-group-handle-alignment ~s~:@_:max-ray-hit-attribute-size ~s~:>)"
               next 
               shader-group-handle-size 
               max-ray-recursion-depth 
               max-shader-group-stride 
               shader-group-base-alignment 
               shader-group-handle-capture-replay-size 
               max-ray-dispatch-invocation-count 
               shader-group-handle-alignment 
               max-ray-hit-attribute-size)))

(defmethod print-object ((obj physical-device-ray-tracing-properties-nv) out)
  (with-slots (next
               shader-group-handle-size
               max-recursion-depth
               max-shader-group-stride
               shader-group-base-alignment
               max-geometry-count
               max-instance-count
               max-triangle-count
               max-descriptor-set-acceleration-structures)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-RAY-TRACING-PROPERTIES-NV~:@_:next ~s~:@_:shader-group-handle-size ~s~:@_:max-recursion-depth ~s~:@_:max-shader-group-stride ~s~:@_:shader-group-base-alignment ~s~:@_:max-geometry-count ~s~:@_:max-instance-count ~s~:@_:max-triangle-count ~s~:@_:max-descriptor-set-acceleration-structures ~s~:>)"
               next 
               shader-group-handle-size 
               max-recursion-depth 
               max-shader-group-stride 
               shader-group-base-alignment 
               max-geometry-count 
               max-instance-count 
               max-triangle-count 
               max-descriptor-set-acceleration-structures)))

(defmethod print-object ((obj strided-device-address-region-khr) out)
  (with-slots (device-address
               stride
               size)
      obj
    (cl:format out "~i(~@<STRIDED-DEVICE-ADDRESS-REGION-KHR~:@_:device-address ~s~:@_:stride ~s~:@_:size ~s~:>)"
               device-address 
               stride 
               size)))

(defmethod print-object ((obj trace-rays-indirect-command-khr) out)
  (with-slots (width
               height
               depth)
      obj
    (cl:format out "~i(~@<TRACE-RAYS-INDIRECT-COMMAND-KHR~:@_:width ~s~:@_:height ~s~:@_:depth ~s~:>)"
               width 
               height 
               depth)))

(defmethod print-object ((obj drm-format-modifier-properties-list-ext) out)
  (with-slots (next
               drm-format-modifier-properties)
      obj
    (cl:format out "~i(~@<DRM-FORMAT-MODIFIER-PROPERTIES-LIST-EXT~:@_:next ~s~:@_:drm-format-modifier-properties ~s~:>)"
               next 
               drm-format-modifier-properties)))

(defmethod print-object ((obj drm-format-modifier-properties-ext) out)
  (with-slots (drm-format-modifier
               drm-format-modifier-plane-count
               drm-format-modifier-tiling-features)
      obj
    (cl:format out "~i(~@<DRM-FORMAT-MODIFIER-PROPERTIES-EXT~:@_:drm-format-modifier ~s~:@_:drm-format-modifier-plane-count ~s~:@_:drm-format-modifier-tiling-features ~s~:>)"
               drm-format-modifier 
               drm-format-modifier-plane-count 
               drm-format-modifier-tiling-features)))

(defmethod print-object ((obj physical-device-image-drm-format-modifier-info-ext) out)
  (with-slots (next
               drm-format-modifier
               sharing-mode
               queue-family-indices)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-IMAGE-DRM-FORMAT-MODIFIER-INFO-EXT~:@_:next ~s~:@_:drm-format-modifier ~s~:@_:sharing-mode ~s~:@_:queue-family-indices ~s~:>)"
               next 
               drm-format-modifier 
               sharing-mode 
               queue-family-indices)))

(defmethod print-object ((obj image-drm-format-modifier-list-create-info-ext) out)
  (with-slots (next
               drm-format-modifiers)
      obj
    (cl:format out "~i(~@<IMAGE-DRM-FORMAT-MODIFIER-LIST-CREATE-INFO-EXT~:@_:next ~s~:@_:drm-format-modifiers ~s~:>)"
               next 
               drm-format-modifiers)))

(defmethod print-object ((obj image-drm-format-modifier-explicit-create-info-ext) out)
  (with-slots (next
               drm-format-modifier
               plane-layouts)
      obj
    (cl:format out "~i(~@<IMAGE-DRM-FORMAT-MODIFIER-EXPLICIT-CREATE-INFO-EXT~:@_:next ~s~:@_:drm-format-modifier ~s~:@_:plane-layouts ~s~:>)"
               next 
               drm-format-modifier 
               plane-layouts)))

(defmethod print-object ((obj image-drm-format-modifier-properties-ext) out)
  (with-slots (next
               drm-format-modifier)
      obj
    (cl:format out "~i(~@<IMAGE-DRM-FORMAT-MODIFIER-PROPERTIES-EXT~:@_:next ~s~:@_:drm-format-modifier ~s~:>)"
               next 
               drm-format-modifier)))

(defmethod print-object ((obj image-stencil-usage-create-info) out)
  (with-slots (next
               stencil-usage)
      obj
    (cl:format out "~i(~@<IMAGE-STENCIL-USAGE-CREATE-INFO~:@_:next ~s~:@_:stencil-usage ~s~:>)"
               next 
               stencil-usage)))

(defmethod print-object ((obj device-memory-overallocation-create-info-amd) out)
  (with-slots (next
               overallocation-behavior)
      obj
    (cl:format out "~i(~@<DEVICE-MEMORY-OVERALLOCATION-CREATE-INFO-AMD~:@_:next ~s~:@_:overallocation-behavior ~s~:>)"
               next 
               overallocation-behavior)))

(defmethod print-object ((obj physical-device-fragment-density-map-features-ext) out)
  (with-slots (next
               fragment-density-map
               fragment-density-map-dynamic
               fragment-density-map-non-subsampled-images)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-FEATURES-EXT~:@_:next ~s~:@_:fragment-density-map ~s~:@_:fragment-density-map-dynamic ~s~:@_:fragment-density-map-non-subsampled-images ~s~:>)"
               next 
               fragment-density-map 
               fragment-density-map-dynamic 
               fragment-density-map-non-subsampled-images)))

(defmethod print-object ((obj physical-device-fragment-density-map-2-features-ext) out)
  (with-slots (next
               fragment-density-map-deferred)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-FEATURES-EXT~:@_:next ~s~:@_:fragment-density-map-deferred ~s~:>)"
               next 
               fragment-density-map-deferred)))

(defmethod print-object ((obj physical-device-fragment-density-map-properties-ext) out)
  (with-slots (next
               min-fragment-density-texel-size
               max-fragment-density-texel-size
               fragment-density-invocations)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-PROPERTIES-EXT~:@_:next ~s~:@_:min-fragment-density-texel-size ~s~:@_:max-fragment-density-texel-size ~s~:@_:fragment-density-invocations ~s~:>)"
               next 
               min-fragment-density-texel-size 
               max-fragment-density-texel-size 
               fragment-density-invocations)))

(defmethod print-object ((obj physical-device-fragment-density-map-2-properties-ext) out)
  (with-slots (next
               subsampled-loads
               subsampled-coarse-reconstruction-early-access
               max-subsampled-array-layers
               max-descriptor-set-subsampled-samplers)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-PROPERTIES-EXT~:@_:next ~s~:@_:subsampled-loads ~s~:@_:subsampled-coarse-reconstruction-early-access ~s~:@_:max-subsampled-array-layers ~s~:@_:max-descriptor-set-subsampled-samplers ~s~:>)"
               next 
               subsampled-loads 
               subsampled-coarse-reconstruction-early-access 
               max-subsampled-array-layers 
               max-descriptor-set-subsampled-samplers)))

(defmethod print-object ((obj render-pass-fragment-density-map-create-info-ext) out)
  (with-slots (next
               fragment-density-map-attachment)
      obj
    (cl:format out "~i(~@<RENDER-PASS-FRAGMENT-DENSITY-MAP-CREATE-INFO-EXT~:@_:next ~s~:@_:fragment-density-map-attachment ~s~:>)"
               next 
               fragment-density-map-attachment)))

(defmethod print-object ((obj physical-device-scalar-block-layout-features) out)
  (with-slots (next
               scalar-block-layout)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SCALAR-BLOCK-LAYOUT-FEATURES~:@_:next ~s~:@_:scalar-block-layout ~s~:>)"
               next 
               scalar-block-layout)))

(defmethod print-object ((obj surface-protected-capabilities-khr) out)
  (with-slots (next
               supports-protected)
      obj
    (cl:format out "~i(~@<SURFACE-PROTECTED-CAPABILITIES-KHR~:@_:next ~s~:@_:supports-protected ~s~:>)"
               next 
               supports-protected)))

(defmethod print-object ((obj physical-device-uniform-buffer-standard-layout-features) out)
  (with-slots (next
               uniform-buffer-standard-layout)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-UNIFORM-BUFFER-STANDARD-LAYOUT-FEATURES~:@_:next ~s~:@_:uniform-buffer-standard-layout ~s~:>)"
               next 
               uniform-buffer-standard-layout)))

(defmethod print-object ((obj physical-device-depth-clip-enable-features-ext) out)
  (with-slots (next
               depth-clip-enable)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DEPTH-CLIP-ENABLE-FEATURES-EXT~:@_:next ~s~:@_:depth-clip-enable ~s~:>)"
               next 
               depth-clip-enable)))

(defmethod print-object ((obj pipeline-rasterization-depth-clip-state-create-info-ext) out)
  (with-slots (next
               flags
               depth-clip-enable)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-DEPTH-CLIP-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:depth-clip-enable ~s~:>)"
               next 
               flags 
               depth-clip-enable)))

(defmethod print-object ((obj physical-device-memory-budget-properties-ext) out)
  (with-slots (next
               heap-budget
               heap-usage)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MEMORY-BUDGET-PROPERTIES-EXT~:@_:next ~s~:@_:heap-budget ~s~:@_:heap-usage ~s~:>)"
               next 
               heap-budget 
               heap-usage)))

(defmethod print-object ((obj physical-device-memory-priority-features-ext) out)
  (with-slots (next
               memory-priority)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MEMORY-PRIORITY-FEATURES-EXT~:@_:next ~s~:@_:memory-priority ~s~:>)"
               next 
               memory-priority)))

(defmethod print-object ((obj memory-priority-allocate-info-ext) out)
  (with-slots (next
               priority)
      obj
    (cl:format out "~i(~@<MEMORY-PRIORITY-ALLOCATE-INFO-EXT~:@_:next ~s~:@_:priority ~s~:>)"
               next 
               priority)))

(defmethod print-object ((obj physical-device-pageable-device-local-memory-features-ext) out)
  (with-slots (next
               pageable-device-local-memory)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PAGEABLE-DEVICE-LOCAL-MEMORY-FEATURES-EXT~:@_:next ~s~:@_:pageable-device-local-memory ~s~:>)"
               next 
               pageable-device-local-memory)))

(defmethod print-object ((obj physical-device-buffer-device-address-features) out)
  (with-slots (next
               buffer-device-address
               buffer-device-address-capture-replay
               buffer-device-address-multi-device)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES~:@_:next ~s~:@_:buffer-device-address ~s~:@_:buffer-device-address-capture-replay ~s~:@_:buffer-device-address-multi-device ~s~:>)"
               next 
               buffer-device-address 
               buffer-device-address-capture-replay 
               buffer-device-address-multi-device)))

(defmethod print-object ((obj physical-device-buffer-device-address-features-ext) out)
  (with-slots (next
               buffer-device-address
               buffer-device-address-capture-replay
               buffer-device-address-multi-device)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES-EXT~:@_:next ~s~:@_:buffer-device-address ~s~:@_:buffer-device-address-capture-replay ~s~:@_:buffer-device-address-multi-device ~s~:>)"
               next 
               buffer-device-address 
               buffer-device-address-capture-replay 
               buffer-device-address-multi-device)))

(defmethod print-object ((obj buffer-device-address-info) out)
  (with-slots (next
               buffer)
      obj
    (cl:format out "~i(~@<BUFFER-DEVICE-ADDRESS-INFO~:@_:next ~s~:@_:buffer ~s~:>)"
               next 
               buffer)))

(defmethod print-object ((obj buffer-opaque-capture-address-create-info) out)
  (with-slots (next
               opaque-capture-address)
      obj
    (cl:format out "~i(~@<BUFFER-OPAQUE-CAPTURE-ADDRESS-CREATE-INFO~:@_:next ~s~:@_:opaque-capture-address ~s~:>)"
               next 
               opaque-capture-address)))

(defmethod print-object ((obj buffer-device-address-create-info-ext) out)
  (with-slots (next
               device-address)
      obj
    (cl:format out "~i(~@<BUFFER-DEVICE-ADDRESS-CREATE-INFO-EXT~:@_:next ~s~:@_:device-address ~s~:>)"
               next 
               device-address)))

(defmethod print-object ((obj physical-device-image-view-image-format-info-ext) out)
  (with-slots (next
               image-view-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-IMAGE-VIEW-IMAGE-FORMAT-INFO-EXT~:@_:next ~s~:@_:image-view-type ~s~:>)"
               next 
               image-view-type)))

(defmethod print-object ((obj filter-cubic-image-view-image-format-properties-ext) out)
  (with-slots (next
               filter-cubic
               filter-cubic-minmax)
      obj
    (cl:format out "~i(~@<FILTER-CUBIC-IMAGE-VIEW-IMAGE-FORMAT-PROPERTIES-EXT~:@_:next ~s~:@_:filter-cubic ~s~:@_:filter-cubic-minmax ~s~:>)"
               next 
               filter-cubic 
               filter-cubic-minmax)))

(defmethod print-object ((obj physical-device-imageless-framebuffer-features) out)
  (with-slots (next
               imageless-framebuffer)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-IMAGELESS-FRAMEBUFFER-FEATURES~:@_:next ~s~:@_:imageless-framebuffer ~s~:>)"
               next 
               imageless-framebuffer)))

(defmethod print-object ((obj framebuffer-attachments-create-info) out)
  (with-slots (next
               attachment-image-infos)
      obj
    (cl:format out "~i(~@<FRAMEBUFFER-ATTACHMENTS-CREATE-INFO~:@_:next ~s~:@_:attachment-image-infos ~s~:>)"
               next 
               attachment-image-infos)))

(defmethod print-object ((obj framebuffer-attachment-image-info) out)
  (with-slots (next
               flags
               usage
               width
               height
               layer-count
               view-formats)
      obj
    (cl:format out "~i(~@<FRAMEBUFFER-ATTACHMENT-IMAGE-INFO~:@_:next ~s~:@_:flags ~s~:@_:usage ~s~:@_:width ~s~:@_:height ~s~:@_:layer-count ~s~:@_:view-formats ~s~:>)"
               next 
               flags 
               usage 
               width 
               height 
               layer-count 
               view-formats)))

(defmethod print-object ((obj render-pass-attachment-begin-info) out)
  (with-slots (next
               attachments)
      obj
    (cl:format out "~i(~@<RENDER-PASS-ATTACHMENT-BEGIN-INFO~:@_:next ~s~:@_:attachments ~s~:>)"
               next 
               attachments)))

(defmethod print-object ((obj physical-device-texture-compression-astc-h-d-r-features-ext) out)
  (with-slots (next
               texture-compression-astc_-h-d-r)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TEXTURE-COMPRESSION-ASTC-H-D-R-FEATURES-EXT~:@_:next ~s~:@_:texture-compression-astc_-h-d-r ~s~:>)"
               next 
               texture-compression-astc_-h-d-r)))

(defmethod print-object ((obj physical-device-cooperative-matrix-features-nv) out)
  (with-slots (next
               cooperative-matrix
               cooperative-matrix-robust-buffer-access)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COOPERATIVE-MATRIX-FEATURES-NV~:@_:next ~s~:@_:cooperative-matrix ~s~:@_:cooperative-matrix-robust-buffer-access ~s~:>)"
               next 
               cooperative-matrix 
               cooperative-matrix-robust-buffer-access)))

(defmethod print-object ((obj physical-device-cooperative-matrix-properties-nv) out)
  (with-slots (next
               cooperative-matrix-supported-stages)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COOPERATIVE-MATRIX-PROPERTIES-NV~:@_:next ~s~:@_:cooperative-matrix-supported-stages ~s~:>)"
               next 
               cooperative-matrix-supported-stages)))

(defmethod print-object ((obj cooperative-matrix-properties-nv) out)
  (with-slots (next
               m-size
               n-size
               k-size
               a-type
               b-type
               c-type
               d-type
               scope)
      obj
    (cl:format out "~i(~@<COOPERATIVE-MATRIX-PROPERTIES-NV~:@_:next ~s~:@_:m-size ~s~:@_:n-size ~s~:@_:k-size ~s~:@_:a-type ~s~:@_:b-type ~s~:@_:c-type ~s~:@_:d-type ~s~:@_:scope ~s~:>)"
               next 
               m-size 
               n-size 
               k-size 
               a-type 
               b-type 
               c-type 
               d-type 
               scope)))

(defmethod print-object ((obj physical-device-ycbcr-image-arrays-features-ext) out)
  (with-slots (next
               ycbcr-image-arrays)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-YCBCR-IMAGE-ARRAYS-FEATURES-EXT~:@_:next ~s~:@_:ycbcr-image-arrays ~s~:>)"
               next 
               ycbcr-image-arrays)))

(defmethod print-object ((obj image-view-handle-info-nvx) out)
  (with-slots (next
               image-view
               descriptor-type
               sampler)
      obj
    (cl:format out "~i(~@<IMAGE-VIEW-HANDLE-INFO-NVX~:@_:next ~s~:@_:image-view ~s~:@_:descriptor-type ~s~:@_:sampler ~s~:>)"
               next 
               image-view 
               descriptor-type 
               sampler)))

(defmethod print-object ((obj image-view-address-properties-nvx) out)
  (with-slots (next
               device-address
               size)
      obj
    (cl:format out "~i(~@<IMAGE-VIEW-ADDRESS-PROPERTIES-NVX~:@_:next ~s~:@_:device-address ~s~:@_:size ~s~:>)"
               next 
               device-address 
               size)))

(defmethod print-object ((obj present-frame-token-ggp) out)
  (with-slots (next
               frame-token)
      obj
    (cl:format out "~i(~@<PRESENT-FRAME-TOKEN-GGP~:@_:next ~s~:@_:frame-token ~s~:>)"
               next 
               frame-token)))

(defmethod print-object ((obj pipeline-creation-feedback-ext) out)
  (with-slots (flags
               duration)
      obj
    (cl:format out "~i(~@<PIPELINE-CREATION-FEEDBACK-EXT~:@_:flags ~s~:@_:duration ~s~:>)"
               flags 
               duration)))

(defmethod print-object ((obj pipeline-creation-feedback-create-info-ext) out)
  (with-slots (next
               pipeline-creation-feedback
               pipeline-stage-creation-feedbacks)
      obj
    (cl:format out "~i(~@<PIPELINE-CREATION-FEEDBACK-CREATE-INFO-EXT~:@_:next ~s~:@_:pipeline-creation-feedback ~s~:@_:pipeline-stage-creation-feedbacks ~s~:>)"
               next 
               pipeline-creation-feedback 
               pipeline-stage-creation-feedbacks)))

(defmethod print-object ((obj surface-full-screen-exclusive-info-ext) out)
  (with-slots (next
               full-screen-exclusive)
      obj
    (cl:format out "~i(~@<SURFACE-FULL-SCREEN-EXCLUSIVE-INFO-EXT~:@_:next ~s~:@_:full-screen-exclusive ~s~:>)"
               next 
               full-screen-exclusive)))

(defmethod print-object ((obj surface-full-screen-exclusive-win32-info-ext) out)
  (with-slots (next
               hmonitor)
      obj
    (cl:format out "~i(~@<SURFACE-FULL-SCREEN-EXCLUSIVE-WIN32-INFO-EXT~:@_:next ~s~:@_:hmonitor ~s~:>)"
               next 
               hmonitor)))

(defmethod print-object ((obj surface-capabilities-full-screen-exclusive-ext) out)
  (with-slots (next
               full-screen-exclusive-supported)
      obj
    (cl:format out "~i(~@<SURFACE-CAPABILITIES-FULL-SCREEN-EXCLUSIVE-EXT~:@_:next ~s~:@_:full-screen-exclusive-supported ~s~:>)"
               next 
               full-screen-exclusive-supported)))

(defmethod print-object ((obj physical-device-performance-query-features-khr) out)
  (with-slots (next
               performance-counter-query-pools
               performance-counter-multiple-query-pools)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PERFORMANCE-QUERY-FEATURES-KHR~:@_:next ~s~:@_:performance-counter-query-pools ~s~:@_:performance-counter-multiple-query-pools ~s~:>)"
               next 
               performance-counter-query-pools 
               performance-counter-multiple-query-pools)))

(defmethod print-object ((obj physical-device-performance-query-properties-khr) out)
  (with-slots (next
               allow-command-buffer-query-copies)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PERFORMANCE-QUERY-PROPERTIES-KHR~:@_:next ~s~:@_:allow-command-buffer-query-copies ~s~:>)"
               next 
               allow-command-buffer-query-copies)))

(defmethod print-object ((obj performance-counter-khr) out)
  (with-slots (next
               unit
               scope
               storage
               uuid)
      obj
    (cl:format out "~i(~@<PERFORMANCE-COUNTER-KHR~:@_:next ~s~:@_:unit ~s~:@_:scope ~s~:@_:storage ~s~:@_:uuid ~s~:>)"
               next 
               unit 
               scope 
               storage 
               uuid)))

(defmethod print-object ((obj performance-counter-description-khr) out)
  (with-slots (next
               flags
               name
               category
               description)
      obj
    (cl:format out "~i(~@<PERFORMANCE-COUNTER-DESCRIPTION-KHR~:@_:next ~s~:@_:flags ~s~:@_:name ~s~:@_:category ~s~:@_:description ~s~:>)"
               next 
               flags 
               name 
               category 
               description)))

(defmethod print-object ((obj query-pool-performance-create-info-khr) out)
  (with-slots (next
               queue-family-index
               counter-indices)
      obj
    (cl:format out "~i(~@<QUERY-POOL-PERFORMANCE-CREATE-INFO-KHR~:@_:next ~s~:@_:queue-family-index ~s~:@_:counter-indices ~s~:>)"
               next 
               queue-family-index 
               counter-indices)))

(defmethod print-object ((obj performance-counter-result-khr) out)
  (with-slots (int-32
               int-64
               uint-32
               uint-64
               float-32
               float-64)
      obj
    (cl:format out "~i(~@<PERFORMANCE-COUNTER-RESULT-KHR~:@_:int-32 ~s~:@_:int-64 ~s~:@_:uint-32 ~s~:@_:uint-64 ~s~:@_:float-32 ~s~:@_:float-64 ~s~:>)"
               int-32 
               int-64 
               uint-32 
               uint-64 
               float-32 
               float-64)))

(defmethod print-object ((obj acquire-profiling-lock-info-khr) out)
  (with-slots (next
               flags
               timeout)
      obj
    (cl:format out "~i(~@<ACQUIRE-PROFILING-LOCK-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:timeout ~s~:>)"
               next 
               flags 
               timeout)))

(defmethod print-object ((obj performance-query-submit-info-khr) out)
  (with-slots (next
               counter-pass-index)
      obj
    (cl:format out "~i(~@<PERFORMANCE-QUERY-SUBMIT-INFO-KHR~:@_:next ~s~:@_:counter-pass-index ~s~:>)"
               next 
               counter-pass-index)))

(defmethod print-object ((obj headless-surface-create-info-ext) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<HEADLESS-SURFACE-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj physical-device-coverage-reduction-mode-features-nv) out)
  (with-slots (next
               coverage-reduction-mode)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COVERAGE-REDUCTION-MODE-FEATURES-NV~:@_:next ~s~:@_:coverage-reduction-mode ~s~:>)"
               next 
               coverage-reduction-mode)))

(defmethod print-object ((obj pipeline-coverage-reduction-state-create-info-nv) out)
  (with-slots (next
               flags
               coverage-reduction-mode)
      obj
    (cl:format out "~i(~@<PIPELINE-COVERAGE-REDUCTION-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:@_:coverage-reduction-mode ~s~:>)"
               next 
               flags 
               coverage-reduction-mode)))

(defmethod print-object ((obj framebuffer-mixed-samples-combination-nv) out)
  (with-slots (next
               coverage-reduction-mode
               rasterization-samples
               depth-stencil-samples
               color-samples)
      obj
    (cl:format out "~i(~@<FRAMEBUFFER-MIXED-SAMPLES-COMBINATION-NV~:@_:next ~s~:@_:coverage-reduction-mode ~s~:@_:rasterization-samples ~s~:@_:depth-stencil-samples ~s~:@_:color-samples ~s~:>)"
               next 
               coverage-reduction-mode 
               rasterization-samples 
               depth-stencil-samples 
               color-samples)))

(defmethod print-object ((obj physical-device-shader-integer-functions-2-features-intel) out)
  (with-slots (next
               shader-integer-functions-2)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-INTEGER-FUNCTIONS-2-FEATURES-INTEL~:@_:next ~s~:@_:shader-integer-functions-2 ~s~:>)"
               next 
               shader-integer-functions-2)))

(defmethod print-object ((obj performance-value-data-intel) out)
  (with-slots (value-32
               value-64
               value-float
               value-bool
               value-string)
      obj
    (cl:format out "~i(~@<PERFORMANCE-VALUE-DATA-INTEL~:@_:value-32 ~s~:@_:value-64 ~s~:@_:value-float ~s~:@_:value-bool ~s~:@_:value-string ~s~:>)"
               value-32 
               value-64 
               value-float 
               value-bool 
               value-string)))

(defmethod print-object ((obj performance-value-intel) out)
  (with-slots (type
               data)
      obj
    (cl:format out "~i(~@<PERFORMANCE-VALUE-INTEL~:@_:type ~s~:@_:data ~s~:>)"
               type 
               data)))

(defmethod print-object ((obj initialize-performance-api-info-intel) out)
  (with-slots (next
               user-data)
      obj
    (cl:format out "~i(~@<INITIALIZE-PERFORMANCE-API-INFO-INTEL~:@_:next ~s~:@_:user-data ~s~:>)"
               next 
               user-data)))

(defmethod print-object ((obj query-pool-performance-query-create-info-intel) out)
  (with-slots (next
               performance-counters-sampling)
      obj
    (cl:format out "~i(~@<QUERY-POOL-PERFORMANCE-QUERY-CREATE-INFO-INTEL~:@_:next ~s~:@_:performance-counters-sampling ~s~:>)"
               next 
               performance-counters-sampling)))

(defmethod print-object ((obj performance-marker-info-intel) out)
  (with-slots (next
               marker)
      obj
    (cl:format out "~i(~@<PERFORMANCE-MARKER-INFO-INTEL~:@_:next ~s~:@_:marker ~s~:>)"
               next 
               marker)))

(defmethod print-object ((obj performance-stream-marker-info-intel) out)
  (with-slots (next
               marker)
      obj
    (cl:format out "~i(~@<PERFORMANCE-STREAM-MARKER-INFO-INTEL~:@_:next ~s~:@_:marker ~s~:>)"
               next 
               marker)))

(defmethod print-object ((obj performance-override-info-intel) out)
  (with-slots (next
               type
               enable
               parameter)
      obj
    (cl:format out "~i(~@<PERFORMANCE-OVERRIDE-INFO-INTEL~:@_:next ~s~:@_:type ~s~:@_:enable ~s~:@_:parameter ~s~:>)"
               next 
               type 
               enable 
               parameter)))

(defmethod print-object ((obj performance-configuration-acquire-info-intel) out)
  (with-slots (next
               type)
      obj
    (cl:format out "~i(~@<PERFORMANCE-CONFIGURATION-ACQUIRE-INFO-INTEL~:@_:next ~s~:@_:type ~s~:>)"
               next 
               type)))

(defmethod print-object ((obj physical-device-shader-clock-features-khr) out)
  (with-slots (next
               shader-subgroup-clock
               shader-device-clock)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-CLOCK-FEATURES-KHR~:@_:next ~s~:@_:shader-subgroup-clock ~s~:@_:shader-device-clock ~s~:>)"
               next 
               shader-subgroup-clock 
               shader-device-clock)))

(defmethod print-object ((obj physical-device-index-type-uint-8-features-ext) out)
  (with-slots (next
               index-type-uint-8)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-INDEX-TYPE-UINT-8-FEATURES-EXT~:@_:next ~s~:@_:index-type-uint-8 ~s~:>)"
               next 
               index-type-uint-8)))

(defmethod print-object ((obj physical-device-shader-s-m-builtins-properties-nv) out)
  (with-slots (next
               shader-s-m-count
               shader-warps-per-s-m)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-PROPERTIES-NV~:@_:next ~s~:@_:shader-s-m-count ~s~:@_:shader-warps-per-s-m ~s~:>)"
               next 
               shader-s-m-count 
               shader-warps-per-s-m)))

(defmethod print-object ((obj physical-device-shader-s-m-builtins-features-nv) out)
  (with-slots (next
               shader-s-m-builtins)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-FEATURES-NV~:@_:next ~s~:@_:shader-s-m-builtins ~s~:>)"
               next 
               shader-s-m-builtins)))

(defmethod print-object ((obj physical-device-fragment-shader-interlock-features-ext) out)
  (with-slots (next
               fragment-shader-sample-interlock
               fragment-shader-pixel-interlock
               fragment-shader-shading-rate-interlock)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADER-INTERLOCK-FEATURES-EXT~:@_:next ~s~:@_:fragment-shader-sample-interlock ~s~:@_:fragment-shader-pixel-interlock ~s~:@_:fragment-shader-shading-rate-interlock ~s~:>)"
               next 
               fragment-shader-sample-interlock 
               fragment-shader-pixel-interlock 
               fragment-shader-shading-rate-interlock)))

(defmethod print-object ((obj physical-device-separate-depth-stencil-layouts-features) out)
  (with-slots (next
               separate-depth-stencil-layouts)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SEPARATE-DEPTH-STENCIL-LAYOUTS-FEATURES~:@_:next ~s~:@_:separate-depth-stencil-layouts ~s~:>)"
               next 
               separate-depth-stencil-layouts)))

(defmethod print-object ((obj attachment-reference-stencil-layout) out)
  (with-slots (next
               stencil-layout)
      obj
    (cl:format out "~i(~@<ATTACHMENT-REFERENCE-STENCIL-LAYOUT~:@_:next ~s~:@_:stencil-layout ~s~:>)"
               next 
               stencil-layout)))

(defmethod print-object ((obj physical-device-primitive-topology-list-restart-features-ext) out)
  (with-slots (next
               primitive-topology-list-restart
               primitive-topology-patch-list-restart)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PRIMITIVE-TOPOLOGY-LIST-RESTART-FEATURES-EXT~:@_:next ~s~:@_:primitive-topology-list-restart ~s~:@_:primitive-topology-patch-list-restart ~s~:>)"
               next 
               primitive-topology-list-restart 
               primitive-topology-patch-list-restart)))

(defmethod print-object ((obj attachment-description-stencil-layout) out)
  (with-slots (next
               stencil-initial-layout
               stencil-final-layout)
      obj
    (cl:format out "~i(~@<ATTACHMENT-DESCRIPTION-STENCIL-LAYOUT~:@_:next ~s~:@_:stencil-initial-layout ~s~:@_:stencil-final-layout ~s~:>)"
               next 
               stencil-initial-layout 
               stencil-final-layout)))

(defmethod print-object ((obj physical-device-pipeline-executable-properties-features-khr) out)
  (with-slots (next
               pipeline-executable-info)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PIPELINE-EXECUTABLE-PROPERTIES-FEATURES-KHR~:@_:next ~s~:@_:pipeline-executable-info ~s~:>)"
               next 
               pipeline-executable-info)))

(defmethod print-object ((obj pipeline-info-khr) out)
  (with-slots (next
               pipeline)
      obj
    (cl:format out "~i(~@<PIPELINE-INFO-KHR~:@_:next ~s~:@_:pipeline ~s~:>)"
               next 
               pipeline)))

(defmethod print-object ((obj pipeline-executable-properties-khr) out)
  (with-slots (next
               stages
               name
               description
               subgroup-size)
      obj
    (cl:format out "~i(~@<PIPELINE-EXECUTABLE-PROPERTIES-KHR~:@_:next ~s~:@_:stages ~s~:@_:name ~s~:@_:description ~s~:@_:subgroup-size ~s~:>)"
               next 
               stages 
               name 
               description 
               subgroup-size)))

(defmethod print-object ((obj pipeline-executable-info-khr) out)
  (with-slots (next
               pipeline
               executable-index)
      obj
    (cl:format out "~i(~@<PIPELINE-EXECUTABLE-INFO-KHR~:@_:next ~s~:@_:pipeline ~s~:@_:executable-index ~s~:>)"
               next 
               pipeline 
               executable-index)))

(defmethod print-object ((obj pipeline-executable-statistic-value-khr) out)
  (with-slots (b32
               i64
               u64
               f64)
      obj
    (cl:format out "~i(~@<PIPELINE-EXECUTABLE-STATISTIC-VALUE-KHR~:@_:b32 ~s~:@_:i64 ~s~:@_:u64 ~s~:@_:f64 ~s~:>)"
               b32 
               i64 
               u64 
               f64)))

(defmethod print-object ((obj pipeline-executable-statistic-khr) out)
  (with-slots (next
               name
               description
               format
               value)
      obj
    (cl:format out "~i(~@<PIPELINE-EXECUTABLE-STATISTIC-KHR~:@_:next ~s~:@_:name ~s~:@_:description ~s~:@_:format ~s~:@_:value ~s~:>)"
               next 
               name 
               description 
               format 
               value)))

(defmethod print-object ((obj pipeline-executable-internal-representation-khr) out)
  (with-slots (next
               name
               description
               is-text
               data-size
               data)
      obj
    (cl:format out "~i(~@<PIPELINE-EXECUTABLE-INTERNAL-REPRESENTATION-KHR~:@_:next ~s~:@_:name ~s~:@_:description ~s~:@_:is-text ~s~:@_:data-size ~s~:@_:data ~s~:>)"
               next 
               name 
               description 
               is-text 
               data-size 
               data)))

(defmethod print-object ((obj physical-device-shader-demote-to-helper-invocation-features-ext) out)
  (with-slots (next
               shader-demote-to-helper-invocation)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-DEMOTE-TO-HELPER-INVOCATION-FEATURES-EXT~:@_:next ~s~:@_:shader-demote-to-helper-invocation ~s~:>)"
               next 
               shader-demote-to-helper-invocation)))

(defmethod print-object ((obj physical-device-texel-buffer-alignment-features-ext) out)
  (with-slots (next
               texel-buffer-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-FEATURES-EXT~:@_:next ~s~:@_:texel-buffer-alignment ~s~:>)"
               next 
               texel-buffer-alignment)))

(defmethod print-object ((obj physical-device-texel-buffer-alignment-properties-ext) out)
  (with-slots (next
               storage-texel-buffer-offset-alignment-bytes
               storage-texel-buffer-offset-single-texel-alignment
               uniform-texel-buffer-offset-alignment-bytes
               uniform-texel-buffer-offset-single-texel-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-PROPERTIES-EXT~:@_:next ~s~:@_:storage-texel-buffer-offset-alignment-bytes ~s~:@_:storage-texel-buffer-offset-single-texel-alignment ~s~:@_:uniform-texel-buffer-offset-alignment-bytes ~s~:@_:uniform-texel-buffer-offset-single-texel-alignment ~s~:>)"
               next 
               storage-texel-buffer-offset-alignment-bytes 
               storage-texel-buffer-offset-single-texel-alignment 
               uniform-texel-buffer-offset-alignment-bytes 
               uniform-texel-buffer-offset-single-texel-alignment)))

(defmethod print-object ((obj physical-device-subgroup-size-control-features-ext) out)
  (with-slots (next
               subgroup-size-control
               compute-full-subgroups)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-FEATURES-EXT~:@_:next ~s~:@_:subgroup-size-control ~s~:@_:compute-full-subgroups ~s~:>)"
               next 
               subgroup-size-control 
               compute-full-subgroups)))

(defmethod print-object ((obj physical-device-subgroup-size-control-properties-ext) out)
  (with-slots (next
               min-subgroup-size
               max-subgroup-size
               max-compute-workgroup-subgroups
               required-subgroup-size-stages)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-PROPERTIES-EXT~:@_:next ~s~:@_:min-subgroup-size ~s~:@_:max-subgroup-size ~s~:@_:max-compute-workgroup-subgroups ~s~:@_:required-subgroup-size-stages ~s~:>)"
               next 
               min-subgroup-size 
               max-subgroup-size 
               max-compute-workgroup-subgroups 
               required-subgroup-size-stages)))

(defmethod print-object ((obj pipeline-shader-stage-required-subgroup-size-create-info-ext) out)
  (with-slots (next
               required-subgroup-size)
      obj
    (cl:format out "~i(~@<PIPELINE-SHADER-STAGE-REQUIRED-SUBGROUP-SIZE-CREATE-INFO-EXT~:@_:next ~s~:@_:required-subgroup-size ~s~:>)"
               next 
               required-subgroup-size)))

(defmethod print-object ((obj subpass-shading-pipeline-create-info-huawei) out)
  (with-slots (next
               render-pass
               subpass)
      obj
    (cl:format out "~i(~@<SUBPASS-SHADING-PIPELINE-CREATE-INFO-HUAWEI~:@_:next ~s~:@_:render-pass ~s~:@_:subpass ~s~:>)"
               next 
               render-pass 
               subpass)))

(defmethod print-object ((obj physical-device-subpass-shading-properties-huawei) out)
  (with-slots (next
               max-subpass-shading-workgroup-size-aspect-ratio)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SUBPASS-SHADING-PROPERTIES-HUAWEI~:@_:next ~s~:@_:max-subpass-shading-workgroup-size-aspect-ratio ~s~:>)"
               next 
               max-subpass-shading-workgroup-size-aspect-ratio)))

(defmethod print-object ((obj memory-opaque-capture-address-allocate-info) out)
  (with-slots (next
               opaque-capture-address)
      obj
    (cl:format out "~i(~@<MEMORY-OPAQUE-CAPTURE-ADDRESS-ALLOCATE-INFO~:@_:next ~s~:@_:opaque-capture-address ~s~:>)"
               next 
               opaque-capture-address)))

(defmethod print-object ((obj device-memory-opaque-capture-address-info) out)
  (with-slots (next
               memory)
      obj
    (cl:format out "~i(~@<DEVICE-MEMORY-OPAQUE-CAPTURE-ADDRESS-INFO~:@_:next ~s~:@_:memory ~s~:>)"
               next 
               memory)))

(defmethod print-object ((obj physical-device-line-rasterization-features-ext) out)
  (with-slots (next
               rectangular-lines
               bresenham-lines
               smooth-lines
               stippled-rectangular-lines
               stippled-bresenham-lines
               stippled-smooth-lines)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-LINE-RASTERIZATION-FEATURES-EXT~:@_:next ~s~:@_:rectangular-lines ~s~:@_:bresenham-lines ~s~:@_:smooth-lines ~s~:@_:stippled-rectangular-lines ~s~:@_:stippled-bresenham-lines ~s~:@_:stippled-smooth-lines ~s~:>)"
               next 
               rectangular-lines 
               bresenham-lines 
               smooth-lines 
               stippled-rectangular-lines 
               stippled-bresenham-lines 
               stippled-smooth-lines)))

(defmethod print-object ((obj physical-device-line-rasterization-properties-ext) out)
  (with-slots (next
               line-sub-pixel-precision-bits)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-LINE-RASTERIZATION-PROPERTIES-EXT~:@_:next ~s~:@_:line-sub-pixel-precision-bits ~s~:>)"
               next 
               line-sub-pixel-precision-bits)))

(defmethod print-object ((obj pipeline-rasterization-line-state-create-info-ext) out)
  (with-slots (next
               line-rasterization-mode
               stippled-line-enable
               line-stipple-factor
               line-stipple-pattern)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-LINE-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:line-rasterization-mode ~s~:@_:stippled-line-enable ~s~:@_:line-stipple-factor ~s~:@_:line-stipple-pattern ~s~:>)"
               next 
               line-rasterization-mode 
               stippled-line-enable 
               line-stipple-factor 
               line-stipple-pattern)))

(defmethod print-object ((obj physical-device-pipeline-creation-cache-control-features-ext) out)
  (with-slots (next
               pipeline-creation-cache-control)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PIPELINE-CREATION-CACHE-CONTROL-FEATURES-EXT~:@_:next ~s~:@_:pipeline-creation-cache-control ~s~:>)"
               next 
               pipeline-creation-cache-control)))

(defmethod print-object ((obj physical-device-vulkan-1-1-features) out)
  (with-slots (next
               storage-buffer-16-bit-access
               uniform-and-storage-buffer-16-bit-access
               storage-push-constant-16
               storage-input-output-16
               multiview
               multiview-geometry-shader
               multiview-tessellation-shader
               variable-pointers-storage-buffer
               variable-pointers
               protected-memory
               sampler-ycbcr-conversion
               shader-draw-parameters)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VULKAN-1-1-FEATURES~:@_:next ~s~:@_:storage-buffer-16-bit-access ~s~:@_:uniform-and-storage-buffer-16-bit-access ~s~:@_:storage-push-constant-16 ~s~:@_:storage-input-output-16 ~s~:@_:multiview ~s~:@_:multiview-geometry-shader ~s~:@_:multiview-tessellation-shader ~s~:@_:variable-pointers-storage-buffer ~s~:@_:variable-pointers ~s~:@_:protected-memory ~s~:@_:sampler-ycbcr-conversion ~s~:@_:shader-draw-parameters ~s~:>)"
               next 
               storage-buffer-16-bit-access 
               uniform-and-storage-buffer-16-bit-access 
               storage-push-constant-16 
               storage-input-output-16 
               multiview 
               multiview-geometry-shader 
               multiview-tessellation-shader 
               variable-pointers-storage-buffer 
               variable-pointers 
               protected-memory 
               sampler-ycbcr-conversion 
               shader-draw-parameters)))

(defmethod print-object ((obj physical-device-vulkan-1-1-properties) out)
  (with-slots (next
               device-uuid
               driver-uuid
               device-luid
               device-node-mask
               device-luid-valid
               subgroup-size
               subgroup-supported-stages
               subgroup-supported-operations
               subgroup-quad-operations-in-all-stages
               point-clipping-behavior
               max-multiview-view-count
               max-multiview-instance-index
               protected-no-fault
               max-per-set-descriptors
               max-memory-allocation-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VULKAN-1-1-PROPERTIES~:@_:next ~s~:@_:device-uuid ~s~:@_:driver-uuid ~s~:@_:device-luid ~s~:@_:device-node-mask ~s~:@_:device-luid-valid ~s~:@_:subgroup-size ~s~:@_:subgroup-supported-stages ~s~:@_:subgroup-supported-operations ~s~:@_:subgroup-quad-operations-in-all-stages ~s~:@_:point-clipping-behavior ~s~:@_:max-multiview-view-count ~s~:@_:max-multiview-instance-index ~s~:@_:protected-no-fault ~s~:@_:max-per-set-descriptors ~s~:@_:max-memory-allocation-size ~s~:>)"
               next 
               device-uuid 
               driver-uuid 
               device-luid 
               device-node-mask 
               device-luid-valid 
               subgroup-size 
               subgroup-supported-stages 
               subgroup-supported-operations 
               subgroup-quad-operations-in-all-stages 
               point-clipping-behavior 
               max-multiview-view-count 
               max-multiview-instance-index 
               protected-no-fault 
               max-per-set-descriptors 
               max-memory-allocation-size)))

(defmethod print-object ((obj physical-device-vulkan-1-2-features) out)
  (with-slots (next
               sampler-mirror-clamp-to-edge
               draw-indirect-count
               storage-buffer-8-bit-access
               uniform-and-storage-buffer-8-bit-access
               storage-push-constant-8
               shader-buffer-int-64-atomics
               shader-shared-int-64-atomics
               shader-float-16
               shader-int-8
               descriptor-indexing
               shader-input-attachment-array-dynamic-indexing
               shader-uniform-texel-buffer-array-dynamic-indexing
               shader-storage-texel-buffer-array-dynamic-indexing
               shader-uniform-buffer-array-non-uniform-indexing
               shader-sampled-image-array-non-uniform-indexing
               shader-storage-buffer-array-non-uniform-indexing
               shader-storage-image-array-non-uniform-indexing
               shader-input-attachment-array-non-uniform-indexing
               shader-uniform-texel-buffer-array-non-uniform-indexing
               shader-storage-texel-buffer-array-non-uniform-indexing
               descriptor-binding-uniform-buffer-update-after-bind
               descriptor-binding-sampled-image-update-after-bind
               descriptor-binding-storage-image-update-after-bind
               descriptor-binding-storage-buffer-update-after-bind
               descriptor-binding-uniform-texel-buffer-update-after-bind
               descriptor-binding-storage-texel-buffer-update-after-bind
               descriptor-binding-update-unused-while-pending
               descriptor-binding-partially-bound
               descriptor-binding-variable-descriptor-count
               runtime-descriptor-array
               sampler-filter-minmax
               scalar-block-layout
               imageless-framebuffer
               uniform-buffer-standard-layout
               shader-subgroup-extended-types
               separate-depth-stencil-layouts
               host-query-reset
               timeline-semaphore
               buffer-device-address
               buffer-device-address-capture-replay
               buffer-device-address-multi-device
               vulkan-memory-model
               vulkan-memory-model-device-scope
               vulkan-memory-model-availability-visibility-chains
               shader-output-viewport-index
               shader-output-layer
               subgroup-broadcast-dynamic-id)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VULKAN-1-2-FEATURES~:@_:next ~s~:@_:sampler-mirror-clamp-to-edge ~s~:@_:draw-indirect-count ~s~:@_:storage-buffer-8-bit-access ~s~:@_:uniform-and-storage-buffer-8-bit-access ~s~:@_:storage-push-constant-8 ~s~:@_:shader-buffer-int-64-atomics ~s~:@_:shader-shared-int-64-atomics ~s~:@_:shader-float-16 ~s~:@_:shader-int-8 ~s~:@_:descriptor-indexing ~s~:@_:shader-input-attachment-array-dynamic-indexing ~s~:@_:shader-uniform-texel-buffer-array-dynamic-indexing ~s~:@_:shader-storage-texel-buffer-array-dynamic-indexing ~s~:@_:shader-uniform-buffer-array-non-uniform-indexing ~s~:@_:shader-sampled-image-array-non-uniform-indexing ~s~:@_:shader-storage-buffer-array-non-uniform-indexing ~s~:@_:shader-storage-image-array-non-uniform-indexing ~s~:@_:shader-input-attachment-array-non-uniform-indexing ~s~:@_:shader-uniform-texel-buffer-array-non-uniform-indexing ~s~:@_:shader-storage-texel-buffer-array-non-uniform-indexing ~s~:@_:descriptor-binding-uniform-buffer-update-after-bind ~s~:@_:descriptor-binding-sampled-image-update-after-bind ~s~:@_:descriptor-binding-storage-image-update-after-bind ~s~:@_:descriptor-binding-storage-buffer-update-after-bind ~s~:@_:descriptor-binding-uniform-texel-buffer-update-after-bind ~s~:@_:descriptor-binding-storage-texel-buffer-update-after-bind ~s~:@_:descriptor-binding-update-unused-while-pending ~s~:@_:descriptor-binding-partially-bound ~s~:@_:descriptor-binding-variable-descriptor-count ~s~:@_:runtime-descriptor-array ~s~:@_:sampler-filter-minmax ~s~:@_:scalar-block-layout ~s~:@_:imageless-framebuffer ~s~:@_:uniform-buffer-standard-layout ~s~:@_:shader-subgroup-extended-types ~s~:@_:separate-depth-stencil-layouts ~s~:@_:host-query-reset ~s~:@_:timeline-semaphore ~s~:@_:buffer-device-address ~s~:@_:buffer-device-address-capture-replay ~s~:@_:buffer-device-address-multi-device ~s~:@_:vulkan-memory-model ~s~:@_:vulkan-memory-model-device-scope ~s~:@_:vulkan-memory-model-availability-visibility-chains ~s~:@_:shader-output-viewport-index ~s~:@_:shader-output-layer ~s~:@_:subgroup-broadcast-dynamic-id ~s~:>)"
               next 
               sampler-mirror-clamp-to-edge 
               draw-indirect-count 
               storage-buffer-8-bit-access 
               uniform-and-storage-buffer-8-bit-access 
               storage-push-constant-8 
               shader-buffer-int-64-atomics 
               shader-shared-int-64-atomics 
               shader-float-16 
               shader-int-8 
               descriptor-indexing 
               shader-input-attachment-array-dynamic-indexing 
               shader-uniform-texel-buffer-array-dynamic-indexing 
               shader-storage-texel-buffer-array-dynamic-indexing 
               shader-uniform-buffer-array-non-uniform-indexing 
               shader-sampled-image-array-non-uniform-indexing 
               shader-storage-buffer-array-non-uniform-indexing 
               shader-storage-image-array-non-uniform-indexing 
               shader-input-attachment-array-non-uniform-indexing 
               shader-uniform-texel-buffer-array-non-uniform-indexing 
               shader-storage-texel-buffer-array-non-uniform-indexing 
               descriptor-binding-uniform-buffer-update-after-bind 
               descriptor-binding-sampled-image-update-after-bind 
               descriptor-binding-storage-image-update-after-bind 
               descriptor-binding-storage-buffer-update-after-bind 
               descriptor-binding-uniform-texel-buffer-update-after-bind 
               descriptor-binding-storage-texel-buffer-update-after-bind 
               descriptor-binding-update-unused-while-pending 
               descriptor-binding-partially-bound 
               descriptor-binding-variable-descriptor-count 
               runtime-descriptor-array 
               sampler-filter-minmax 
               scalar-block-layout 
               imageless-framebuffer 
               uniform-buffer-standard-layout 
               shader-subgroup-extended-types 
               separate-depth-stencil-layouts 
               host-query-reset 
               timeline-semaphore 
               buffer-device-address 
               buffer-device-address-capture-replay 
               buffer-device-address-multi-device 
               vulkan-memory-model 
               vulkan-memory-model-device-scope 
               vulkan-memory-model-availability-visibility-chains 
               shader-output-viewport-index 
               shader-output-layer 
               subgroup-broadcast-dynamic-id)))

(defmethod print-object ((obj physical-device-vulkan-1-2-properties) out)
  (with-slots (next
               driver-id
               driver-name
               driver-info
               conformance-version
               denorm-behavior-independence
               rounding-mode-independence
               shader-signed-zero-inf-nan-preserve-float-16
               shader-signed-zero-inf-nan-preserve-float-32
               shader-signed-zero-inf-nan-preserve-float-64
               shader-denorm-preserve-float-16
               shader-denorm-preserve-float-32
               shader-denorm-preserve-float-64
               shader-denorm-flush-to-zero-float-16
               shader-denorm-flush-to-zero-float-32
               shader-denorm-flush-to-zero-float-64
               shader-rounding-mode-rte-float-16
               shader-rounding-mode-rte-float-32
               shader-rounding-mode-rte-float-64
               shader-rounding-mode-rtz-float-16
               shader-rounding-mode-rtz-float-32
               shader-rounding-mode-rtz-float-64
               max-update-after-bind-descriptors-in-all-pools
               shader-uniform-buffer-array-non-uniform-indexing-native
               shader-sampled-image-array-non-uniform-indexing-native
               shader-storage-buffer-array-non-uniform-indexing-native
               shader-storage-image-array-non-uniform-indexing-native
               shader-input-attachment-array-non-uniform-indexing-native
               robust-buffer-access-update-after-bind
               quad-divergent-implicit-lod
               max-per-stage-descriptor-update-after-bind-samplers
               max-per-stage-descriptor-update-after-bind-uniform-buffers
               max-per-stage-descriptor-update-after-bind-storage-buffers
               max-per-stage-descriptor-update-after-bind-sampled-images
               max-per-stage-descriptor-update-after-bind-storage-images
               max-per-stage-descriptor-update-after-bind-input-attachments
               max-per-stage-update-after-bind-resources
               max-descriptor-set-update-after-bind-samplers
               max-descriptor-set-update-after-bind-uniform-buffers
               max-descriptor-set-update-after-bind-uniform-buffers-dynamic
               max-descriptor-set-update-after-bind-storage-buffers
               max-descriptor-set-update-after-bind-storage-buffers-dynamic
               max-descriptor-set-update-after-bind-sampled-images
               max-descriptor-set-update-after-bind-storage-images
               max-descriptor-set-update-after-bind-input-attachments
               supported-depth-resolve-modes
               supported-stencil-resolve-modes
               independent-resolve-none
               independent-resolve
               filter-minmax-single-component-formats
               filter-minmax-image-component-mapping
               max-timeline-semaphore-value-difference
               framebuffer-integer-color-sample-counts)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VULKAN-1-2-PROPERTIES~:@_:next ~s~:@_:driver-id ~s~:@_:driver-name ~s~:@_:driver-info ~s~:@_:conformance-version ~s~:@_:denorm-behavior-independence ~s~:@_:rounding-mode-independence ~s~:@_:shader-signed-zero-inf-nan-preserve-float-16 ~s~:@_:shader-signed-zero-inf-nan-preserve-float-32 ~s~:@_:shader-signed-zero-inf-nan-preserve-float-64 ~s~:@_:shader-denorm-preserve-float-16 ~s~:@_:shader-denorm-preserve-float-32 ~s~:@_:shader-denorm-preserve-float-64 ~s~:@_:shader-denorm-flush-to-zero-float-16 ~s~:@_:shader-denorm-flush-to-zero-float-32 ~s~:@_:shader-denorm-flush-to-zero-float-64 ~s~:@_:shader-rounding-mode-rte-float-16 ~s~:@_:shader-rounding-mode-rte-float-32 ~s~:@_:shader-rounding-mode-rte-float-64 ~s~:@_:shader-rounding-mode-rtz-float-16 ~s~:@_:shader-rounding-mode-rtz-float-32 ~s~:@_:shader-rounding-mode-rtz-float-64 ~s~:@_:max-update-after-bind-descriptors-in-all-pools ~s~:@_:shader-uniform-buffer-array-non-uniform-indexing-native ~s~:@_:shader-sampled-image-array-non-uniform-indexing-native ~s~:@_:shader-storage-buffer-array-non-uniform-indexing-native ~s~:@_:shader-storage-image-array-non-uniform-indexing-native ~s~:@_:shader-input-attachment-array-non-uniform-indexing-native ~s~:@_:robust-buffer-access-update-after-bind ~s~:@_:quad-divergent-implicit-lod ~s~:@_:max-per-stage-descriptor-update-after-bind-samplers ~s~:@_:max-per-stage-descriptor-update-after-bind-uniform-buffers ~s~:@_:max-per-stage-descriptor-update-after-bind-storage-buffers ~s~:@_:max-per-stage-descriptor-update-after-bind-sampled-images ~s~:@_:max-per-stage-descriptor-update-after-bind-storage-images ~s~:@_:max-per-stage-descriptor-update-after-bind-input-attachments ~s~:@_:max-per-stage-update-after-bind-resources ~s~:@_:max-descriptor-set-update-after-bind-samplers ~s~:@_:max-descriptor-set-update-after-bind-uniform-buffers ~s~:@_:max-descriptor-set-update-after-bind-uniform-buffers-dynamic ~s~:@_:max-descriptor-set-update-after-bind-storage-buffers ~s~:@_:max-descriptor-set-update-after-bind-storage-buffers-dynamic ~s~:@_:max-descriptor-set-update-after-bind-sampled-images ~s~:@_:max-descriptor-set-update-after-bind-storage-images ~s~:@_:max-descriptor-set-update-after-bind-input-attachments ~s~:@_:supported-depth-resolve-modes ~s~:@_:supported-stencil-resolve-modes ~s~:@_:independent-resolve-none ~s~:@_:independent-resolve ~s~:@_:filter-minmax-single-component-formats ~s~:@_:filter-minmax-image-component-mapping ~s~:@_:max-timeline-semaphore-value-difference ~s~:@_:framebuffer-integer-color-sample-counts ~s~:>)"
               next 
               driver-id 
               driver-name 
               driver-info 
               conformance-version 
               denorm-behavior-independence 
               rounding-mode-independence 
               shader-signed-zero-inf-nan-preserve-float-16 
               shader-signed-zero-inf-nan-preserve-float-32 
               shader-signed-zero-inf-nan-preserve-float-64 
               shader-denorm-preserve-float-16 
               shader-denorm-preserve-float-32 
               shader-denorm-preserve-float-64 
               shader-denorm-flush-to-zero-float-16 
               shader-denorm-flush-to-zero-float-32 
               shader-denorm-flush-to-zero-float-64 
               shader-rounding-mode-rte-float-16 
               shader-rounding-mode-rte-float-32 
               shader-rounding-mode-rte-float-64 
               shader-rounding-mode-rtz-float-16 
               shader-rounding-mode-rtz-float-32 
               shader-rounding-mode-rtz-float-64 
               max-update-after-bind-descriptors-in-all-pools 
               shader-uniform-buffer-array-non-uniform-indexing-native 
               shader-sampled-image-array-non-uniform-indexing-native 
               shader-storage-buffer-array-non-uniform-indexing-native 
               shader-storage-image-array-non-uniform-indexing-native 
               shader-input-attachment-array-non-uniform-indexing-native 
               robust-buffer-access-update-after-bind 
               quad-divergent-implicit-lod 
               max-per-stage-descriptor-update-after-bind-samplers 
               max-per-stage-descriptor-update-after-bind-uniform-buffers 
               max-per-stage-descriptor-update-after-bind-storage-buffers 
               max-per-stage-descriptor-update-after-bind-sampled-images 
               max-per-stage-descriptor-update-after-bind-storage-images 
               max-per-stage-descriptor-update-after-bind-input-attachments 
               max-per-stage-update-after-bind-resources 
               max-descriptor-set-update-after-bind-samplers 
               max-descriptor-set-update-after-bind-uniform-buffers 
               max-descriptor-set-update-after-bind-uniform-buffers-dynamic 
               max-descriptor-set-update-after-bind-storage-buffers 
               max-descriptor-set-update-after-bind-storage-buffers-dynamic 
               max-descriptor-set-update-after-bind-sampled-images 
               max-descriptor-set-update-after-bind-storage-images 
               max-descriptor-set-update-after-bind-input-attachments 
               supported-depth-resolve-modes 
               supported-stencil-resolve-modes 
               independent-resolve-none 
               independent-resolve 
               filter-minmax-single-component-formats 
               filter-minmax-image-component-mapping 
               max-timeline-semaphore-value-difference 
               framebuffer-integer-color-sample-counts)))

(defmethod print-object ((obj pipeline-compiler-control-create-info-amd) out)
  (with-slots (next
               compiler-control-flags)
      obj
    (cl:format out "~i(~@<PIPELINE-COMPILER-CONTROL-CREATE-INFO-AMD~:@_:next ~s~:@_:compiler-control-flags ~s~:>)"
               next 
               compiler-control-flags)))

(defmethod print-object ((obj physical-device-coherent-memory-features-amd) out)
  (with-slots (next
               device-coherent-memory)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COHERENT-MEMORY-FEATURES-AMD~:@_:next ~s~:@_:device-coherent-memory ~s~:>)"
               next 
               device-coherent-memory)))

(defmethod print-object ((obj physical-device-tool-properties-ext) out)
  (with-slots (next
               name
               version
               purposes
               description
               layer)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-TOOL-PROPERTIES-EXT~:@_:next ~s~:@_:name ~s~:@_:version ~s~:@_:purposes ~s~:@_:description ~s~:@_:layer ~s~:>)"
               next 
               name 
               version 
               purposes 
               description 
               layer)))

(defmethod print-object ((obj sampler-custom-border-color-create-info-ext) out)
  (with-slots (next
               custom-border-color
               format)
      obj
    (cl:format out "~i(~@<SAMPLER-CUSTOM-BORDER-COLOR-CREATE-INFO-EXT~:@_:next ~s~:@_:custom-border-color ~s~:@_:format ~s~:>)"
               next 
               custom-border-color 
               format)))

(defmethod print-object ((obj physical-device-custom-border-color-properties-ext) out)
  (with-slots (next
               max-custom-border-color-samplers)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-PROPERTIES-EXT~:@_:next ~s~:@_:max-custom-border-color-samplers ~s~:>)"
               next 
               max-custom-border-color-samplers)))

(defmethod print-object ((obj physical-device-custom-border-color-features-ext) out)
  (with-slots (next
               custom-border-colors
               custom-border-color-without-format)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-FEATURES-EXT~:@_:next ~s~:@_:custom-border-colors ~s~:@_:custom-border-color-without-format ~s~:>)"
               next 
               custom-border-colors 
               custom-border-color-without-format)))

(defmethod print-object ((obj sampler-border-color-component-mapping-create-info-ext) out)
  (with-slots (next
               components
               srgb)
      obj
    (cl:format out "~i(~@<SAMPLER-BORDER-COLOR-COMPONENT-MAPPING-CREATE-INFO-EXT~:@_:next ~s~:@_:components ~s~:@_:srgb ~s~:>)"
               next 
               components 
               srgb)))

(defmethod print-object ((obj physical-device-border-color-swizzle-features-ext) out)
  (with-slots (next
               border-color-swizzle
               border-color-swizzle-from-image)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-BORDER-COLOR-SWIZZLE-FEATURES-EXT~:@_:next ~s~:@_:border-color-swizzle ~s~:@_:border-color-swizzle-from-image ~s~:>)"
               next 
               border-color-swizzle 
               border-color-swizzle-from-image)))

(defmethod print-object ((obj device-or-host-address-khr) out)
  (with-slots (device-address
               host-address)
      obj
    (cl:format out "~i(~@<DEVICE-OR-HOST-ADDRESS-KHR~:@_:device-address ~s~:@_:host-address ~s~:>)"
               device-address 
               host-address)))

(defmethod print-object ((obj device-or-host-address-const-khr) out)
  (with-slots (device-address
               host-address)
      obj
    (cl:format out "~i(~@<DEVICE-OR-HOST-ADDRESS-CONST-KHR~:@_:device-address ~s~:@_:host-address ~s~:>)"
               device-address 
               host-address)))

(defmethod print-object ((obj acceleration-structure-geometry-triangles-data-khr) out)
  (with-slots (next
               vertex-format
               vertex-data
               vertex-stride
               max-vertex
               index-type
               index-data
               transform-data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-TRIANGLES-DATA-KHR~:@_:next ~s~:@_:vertex-format ~s~:@_:vertex-data ~s~:@_:vertex-stride ~s~:@_:max-vertex ~s~:@_:index-type ~s~:@_:index-data ~s~:@_:transform-data ~s~:>)"
               next 
               vertex-format 
               vertex-data 
               vertex-stride 
               max-vertex 
               index-type 
               index-data 
               transform-data)))

(defmethod print-object ((obj acceleration-structure-geometry-aabbs-data-khr) out)
  (with-slots (next
               data
               stride)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-AABBS-DATA-KHR~:@_:next ~s~:@_:data ~s~:@_:stride ~s~:>)"
               next 
               data 
               stride)))

(defmethod print-object ((obj acceleration-structure-geometry-instances-data-khr) out)
  (with-slots (next
               array-of-pointers
               data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-INSTANCES-DATA-KHR~:@_:next ~s~:@_:array-of-pointers ~s~:@_:data ~s~:>)"
               next 
               array-of-pointers 
               data)))

(defmethod print-object ((obj acceleration-structure-geometry-data-khr) out)
  (with-slots (triangles
               aabbs
               instances)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-DATA-KHR~:@_:triangles ~s~:@_:aabbs ~s~:@_:instances ~s~:>)"
               triangles 
               aabbs 
               instances)))

(defmethod print-object ((obj acceleration-structure-geometry-khr) out)
  (with-slots (next
               geometry-type
               geometry
               flags)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-KHR~:@_:next ~s~:@_:geometry-type ~s~:@_:geometry ~s~:@_:flags ~s~:>)"
               next 
               geometry-type 
               geometry 
               flags)))

(defmethod print-object ((obj acceleration-structure-build-geometry-info-khr) out)
  (with-slots (next
               type
               flags
               mode
               src-acceleration-structure
               dst-acceleration-structure
               geometries
               p-geometries
               scratch-data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-BUILD-GEOMETRY-INFO-KHR~:@_:next ~s~:@_:type ~s~:@_:flags ~s~:@_:mode ~s~:@_:src-acceleration-structure ~s~:@_:dst-acceleration-structure ~s~:@_:geometries ~s~:@_:p-geometries ~s~:@_:scratch-data ~s~:>)"
               next 
               type 
               flags 
               mode 
               src-acceleration-structure 
               dst-acceleration-structure 
               geometries 
               p-geometries 
               scratch-data)))

(defmethod print-object ((obj acceleration-structure-build-range-info-khr) out)
  (with-slots (primitive-count
               primitive-offset
               first-vertex
               transform-offset)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-BUILD-RANGE-INFO-KHR~:@_:primitive-count ~s~:@_:primitive-offset ~s~:@_:first-vertex ~s~:@_:transform-offset ~s~:>)"
               primitive-count 
               primitive-offset 
               first-vertex 
               transform-offset)))

(defmethod print-object ((obj acceleration-structure-create-info-khr) out)
  (with-slots (next
               create-flags
               buffer
               offset
               size
               type
               device-address)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-CREATE-INFO-KHR~:@_:next ~s~:@_:create-flags ~s~:@_:buffer ~s~:@_:offset ~s~:@_:size ~s~:@_:type ~s~:@_:device-address ~s~:>)"
               next 
               create-flags 
               buffer 
               offset 
               size 
               type 
               device-address)))

(defmethod print-object ((obj aabb-positions-khr) out)
  (with-slots (min-x
               min-y
               min-z
               max-x
               max-y
               max-z)
      obj
    (cl:format out "~i(~@<AABB-POSITIONS-KHR~:@_:min-x ~s~:@_:min-y ~s~:@_:min-z ~s~:@_:max-x ~s~:@_:max-y ~s~:@_:max-z ~s~:>)"
               min-x 
               min-y 
               min-z 
               max-x 
               max-y 
               max-z)))

(defmethod print-object ((obj transform-matrix-khr) out)
  (with-slots (matrix)
      obj
    (cl:format out "~i(~@<TRANSFORM-MATRIX-KHR~:@_:matrix ~s~:>)"
               matrix)))

(defmethod print-object ((obj acceleration-structure-instance-khr) out)
  (with-slots (transform
               instance-custom-index
               mask
               instance-shader-binding-table-record-offset
               flags
               acceleration-structure-reference)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-INSTANCE-KHR~:@_:transform ~s~:@_:instance-custom-index ~s~:@_:mask ~s~:@_:instance-shader-binding-table-record-offset ~s~:@_:flags ~s~:@_:acceleration-structure-reference ~s~:>)"
               transform 
               instance-custom-index 
               mask 
               instance-shader-binding-table-record-offset 
               flags 
               acceleration-structure-reference)))

(defmethod print-object ((obj acceleration-structure-device-address-info-khr) out)
  (with-slots (next
               acceleration-structure)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-DEVICE-ADDRESS-INFO-KHR~:@_:next ~s~:@_:acceleration-structure ~s~:>)"
               next 
               acceleration-structure)))

(defmethod print-object ((obj acceleration-structure-version-info-khr) out)
  (with-slots (next
               version-data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-VERSION-INFO-KHR~:@_:next ~s~:@_:version-data ~s~:>)"
               next 
               version-data)))

(defmethod print-object ((obj copy-acceleration-structure-info-khr) out)
  (with-slots (next
               src
               dst
               mode)
      obj
    (cl:format out "~i(~@<COPY-ACCELERATION-STRUCTURE-INFO-KHR~:@_:next ~s~:@_:src ~s~:@_:dst ~s~:@_:mode ~s~:>)"
               next 
               src 
               dst 
               mode)))

(defmethod print-object ((obj copy-acceleration-structure-to-memory-info-khr) out)
  (with-slots (next
               src
               dst
               mode)
      obj
    (cl:format out "~i(~@<COPY-ACCELERATION-STRUCTURE-TO-MEMORY-INFO-KHR~:@_:next ~s~:@_:src ~s~:@_:dst ~s~:@_:mode ~s~:>)"
               next 
               src 
               dst 
               mode)))

(defmethod print-object ((obj copy-memory-to-acceleration-structure-info-khr) out)
  (with-slots (next
               src
               dst
               mode)
      obj
    (cl:format out "~i(~@<COPY-MEMORY-TO-ACCELERATION-STRUCTURE-INFO-KHR~:@_:next ~s~:@_:src ~s~:@_:dst ~s~:@_:mode ~s~:>)"
               next 
               src 
               dst 
               mode)))

(defmethod print-object ((obj ray-tracing-pipeline-interface-create-info-khr) out)
  (with-slots (next
               max-pipeline-ray-payload-size
               max-pipeline-ray-hit-attribute-size)
      obj
    (cl:format out "~i(~@<RAY-TRACING-PIPELINE-INTERFACE-CREATE-INFO-KHR~:@_:next ~s~:@_:max-pipeline-ray-payload-size ~s~:@_:max-pipeline-ray-hit-attribute-size ~s~:>)"
               next 
               max-pipeline-ray-payload-size 
               max-pipeline-ray-hit-attribute-size)))

(defmethod print-object ((obj pipeline-library-create-info-khr) out)
  (with-slots (next
               libraries)
      obj
    (cl:format out "~i(~@<PIPELINE-LIBRARY-CREATE-INFO-KHR~:@_:next ~s~:@_:libraries ~s~:>)"
               next 
               libraries)))

(defmethod print-object ((obj physical-device-extended-dynamic-state-features-ext) out)
  (with-slots (next
               extended-dynamic-state)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-FEATURES-EXT~:@_:next ~s~:@_:extended-dynamic-state ~s~:>)"
               next 
               extended-dynamic-state)))

(defmethod print-object ((obj physical-device-extended-dynamic-state-2-features-ext) out)
  (with-slots (next
               extended-dynamic-state-2
               extended-dynamic-state-2-logic-op
               extended-dynamic-state-2-patch-control-points)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-2-FEATURES-EXT~:@_:next ~s~:@_:extended-dynamic-state-2 ~s~:@_:extended-dynamic-state-2-logic-op ~s~:@_:extended-dynamic-state-2-patch-control-points ~s~:>)"
               next 
               extended-dynamic-state-2 
               extended-dynamic-state-2-logic-op 
               extended-dynamic-state-2-patch-control-points)))

(defmethod print-object ((obj render-pass-transform-begin-info-qcom) out)
  (with-slots (next
               transform)
      obj
    (cl:format out "~i(~@<RENDER-PASS-TRANSFORM-BEGIN-INFO-QCOM~:@_:next ~s~:@_:transform ~s~:>)"
               next 
               transform)))

(defmethod print-object ((obj copy-command-transform-info-qcom) out)
  (with-slots (next
               transform)
      obj
    (cl:format out "~i(~@<COPY-COMMAND-TRANSFORM-INFO-QCOM~:@_:next ~s~:@_:transform ~s~:>)"
               next 
               transform)))

(defmethod print-object ((obj command-buffer-inheritance-render-pass-transform-info-qcom) out)
  (with-slots (next
               transform
               render-area)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-INHERITANCE-RENDER-PASS-TRANSFORM-INFO-QCOM~:@_:next ~s~:@_:transform ~s~:@_:render-area ~s~:>)"
               next 
               transform 
               render-area)))

(defmethod print-object ((obj physical-device-diagnostics-config-features-nv) out)
  (with-slots (next
               diagnostics-config)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DIAGNOSTICS-CONFIG-FEATURES-NV~:@_:next ~s~:@_:diagnostics-config ~s~:>)"
               next 
               diagnostics-config)))

(defmethod print-object ((obj device-diagnostics-config-create-info-nv) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<DEVICE-DIAGNOSTICS-CONFIG-CREATE-INFO-NV~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj physical-device-zero-initialize-workgroup-memory-features-khr) out)
  (with-slots (next
               shader-zero-initialize-workgroup-memory)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ZERO-INITIALIZE-WORKGROUP-MEMORY-FEATURES-KHR~:@_:next ~s~:@_:shader-zero-initialize-workgroup-memory ~s~:>)"
               next 
               shader-zero-initialize-workgroup-memory)))

(defmethod print-object ((obj physical-device-shader-subgroup-uniform-control-flow-features-khr) out)
  (with-slots (next
               shader-subgroup-uniform-control-flow)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-SUBGROUP-UNIFORM-CONTROL-FLOW-FEATURES-KHR~:@_:next ~s~:@_:shader-subgroup-uniform-control-flow ~s~:>)"
               next 
               shader-subgroup-uniform-control-flow)))

(defmethod print-object ((obj physical-device-robustness-2-features-ext) out)
  (with-slots (next
               robust-buffer-access-2
               robust-image-access-2
               null-descriptor)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ROBUSTNESS-2-FEATURES-EXT~:@_:next ~s~:@_:robust-buffer-access-2 ~s~:@_:robust-image-access-2 ~s~:@_:null-descriptor ~s~:>)"
               next 
               robust-buffer-access-2 
               robust-image-access-2 
               null-descriptor)))

(defmethod print-object ((obj physical-device-robustness-2-properties-ext) out)
  (with-slots (next
               robust-storage-buffer-access-size-alignment
               robust-uniform-buffer-access-size-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-ROBUSTNESS-2-PROPERTIES-EXT~:@_:next ~s~:@_:robust-storage-buffer-access-size-alignment ~s~:@_:robust-uniform-buffer-access-size-alignment ~s~:>)"
               next 
               robust-storage-buffer-access-size-alignment 
               robust-uniform-buffer-access-size-alignment)))

(defmethod print-object ((obj physical-device-image-robustness-features-ext) out)
  (with-slots (next
               robust-image-access)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-IMAGE-ROBUSTNESS-FEATURES-EXT~:@_:next ~s~:@_:robust-image-access ~s~:>)"
               next 
               robust-image-access)))

(defmethod print-object ((obj physical-device-workgroup-memory-explicit-layout-features-khr) out)
  (with-slots (next
               workgroup-memory-explicit-layout
               workgroup-memory-explicit-layout-scalar-block-layout
               workgroup-memory-explicit-layout-8-bit-access
               workgroup-memory-explicit-layout-16-bit-access)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-WORKGROUP-MEMORY-EXPLICIT-LAYOUT-FEATURES-KHR~:@_:next ~s~:@_:workgroup-memory-explicit-layout ~s~:@_:workgroup-memory-explicit-layout-scalar-block-layout ~s~:@_:workgroup-memory-explicit-layout-8-bit-access ~s~:@_:workgroup-memory-explicit-layout-16-bit-access ~s~:>)"
               next 
               workgroup-memory-explicit-layout 
               workgroup-memory-explicit-layout-scalar-block-layout 
               workgroup-memory-explicit-layout-8-bit-access 
               workgroup-memory-explicit-layout-16-bit-access)))

(defmethod print-object ((obj physical-device-portability-subset-features-khr) out)
  (with-slots (next
               constant-alpha-color-blend-factors
               events
               image-view-format-reinterpretation
               image-view-format-swizzle
               image-view-2d-on-3d-image
               multisample-array-image
               mutable-comparison-samplers
               point-polygons
               sampler-mip-lod-bias
               separate-stencil-mask-ref
               shader-sample-rate-interpolation-functions
               tessellation-isolines
               tessellation-point-mode
               triangle-fans
               vertex-attribute-access-beyond-stride)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PORTABILITY-SUBSET-FEATURES-KHR~:@_:next ~s~:@_:constant-alpha-color-blend-factors ~s~:@_:events ~s~:@_:image-view-format-reinterpretation ~s~:@_:image-view-format-swizzle ~s~:@_:image-view-2d-on-3d-image ~s~:@_:multisample-array-image ~s~:@_:mutable-comparison-samplers ~s~:@_:point-polygons ~s~:@_:sampler-mip-lod-bias ~s~:@_:separate-stencil-mask-ref ~s~:@_:shader-sample-rate-interpolation-functions ~s~:@_:tessellation-isolines ~s~:@_:tessellation-point-mode ~s~:@_:triangle-fans ~s~:@_:vertex-attribute-access-beyond-stride ~s~:>)"
               next 
               constant-alpha-color-blend-factors 
               events 
               image-view-format-reinterpretation 
               image-view-format-swizzle 
               image-view-2d-on-3d-image 
               multisample-array-image 
               mutable-comparison-samplers 
               point-polygons 
               sampler-mip-lod-bias 
               separate-stencil-mask-ref 
               shader-sample-rate-interpolation-functions 
               tessellation-isolines 
               tessellation-point-mode 
               triangle-fans 
               vertex-attribute-access-beyond-stride)))

(defmethod print-object ((obj physical-device-portability-subset-properties-khr) out)
  (with-slots (next
               min-vertex-input-binding-stride-alignment)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PORTABILITY-SUBSET-PROPERTIES-KHR~:@_:next ~s~:@_:min-vertex-input-binding-stride-alignment ~s~:>)"
               next 
               min-vertex-input-binding-stride-alignment)))

(defmethod print-object ((obj physical-device-4444-formats-features-ext) out)
  (with-slots (next
               format-a4r4g4b4
               format-a4b4g4r4)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-4444-FORMATS-FEATURES-EXT~:@_:next ~s~:@_:format-a4r4g4b4 ~s~:@_:format-a4b4g4r4 ~s~:>)"
               next 
               format-a4r4g4b4 
               format-a4b4g4r4)))

(defmethod print-object ((obj physical-device-subpass-shading-features-huawei) out)
  (with-slots (next
               subpass-shading)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SUBPASS-SHADING-FEATURES-HUAWEI~:@_:next ~s~:@_:subpass-shading ~s~:>)"
               next 
               subpass-shading)))

(defmethod print-object ((obj buffer-copy-2-khr) out)
  (with-slots (next
               src-offset
               dst-offset
               size)
      obj
    (cl:format out "~i(~@<BUFFER-COPY-2-KHR~:@_:next ~s~:@_:src-offset ~s~:@_:dst-offset ~s~:@_:size ~s~:>)"
               next 
               src-offset 
               dst-offset 
               size)))

(defmethod print-object ((obj image-copy-2-khr) out)
  (with-slots (next
               src-subresource
               src-offset
               dst-subresource
               dst-offset
               extent)
      obj
    (cl:format out "~i(~@<IMAGE-COPY-2-KHR~:@_:next ~s~:@_:src-subresource ~s~:@_:src-offset ~s~:@_:dst-subresource ~s~:@_:dst-offset ~s~:@_:extent ~s~:>)"
               next 
               src-subresource 
               src-offset 
               dst-subresource 
               dst-offset 
               extent)))

(defmethod print-object ((obj image-blit-2-khr) out)
  (with-slots (next
               src-subresource
               src-offsets
               dst-subresource
               dst-offsets)
      obj
    (cl:format out "~i(~@<IMAGE-BLIT-2-KHR~:@_:next ~s~:@_:src-subresource ~s~:@_:src-offsets ~s~:@_:dst-subresource ~s~:@_:dst-offsets ~s~:>)"
               next 
               src-subresource 
               src-offsets 
               dst-subresource 
               dst-offsets)))

(defmethod print-object ((obj buffer-image-copy-2-khr) out)
  (with-slots (next
               buffer-offset
               buffer-row-length
               buffer-image-height
               image-subresource
               image-offset
               image-extent)
      obj
    (cl:format out "~i(~@<BUFFER-IMAGE-COPY-2-KHR~:@_:next ~s~:@_:buffer-offset ~s~:@_:buffer-row-length ~s~:@_:buffer-image-height ~s~:@_:image-subresource ~s~:@_:image-offset ~s~:@_:image-extent ~s~:>)"
               next 
               buffer-offset 
               buffer-row-length 
               buffer-image-height 
               image-subresource 
               image-offset 
               image-extent)))

(defmethod print-object ((obj image-resolve-2-khr) out)
  (with-slots (next
               src-subresource
               src-offset
               dst-subresource
               dst-offset
               extent)
      obj
    (cl:format out "~i(~@<IMAGE-RESOLVE-2-KHR~:@_:next ~s~:@_:src-subresource ~s~:@_:src-offset ~s~:@_:dst-subresource ~s~:@_:dst-offset ~s~:@_:extent ~s~:>)"
               next 
               src-subresource 
               src-offset 
               dst-subresource 
               dst-offset 
               extent)))

(defmethod print-object ((obj copy-buffer-info-2-khr) out)
  (with-slots (next
               src-buffer
               dst-buffer
               regions)
      obj
    (cl:format out "~i(~@<COPY-BUFFER-INFO-2-KHR~:@_:next ~s~:@_:src-buffer ~s~:@_:dst-buffer ~s~:@_:regions ~s~:>)"
               next 
               src-buffer 
               dst-buffer 
               regions)))

(defmethod print-object ((obj copy-image-info-2-khr) out)
  (with-slots (next
               src-image
               src-image-layout
               dst-image
               dst-image-layout
               regions)
      obj
    (cl:format out "~i(~@<COPY-IMAGE-INFO-2-KHR~:@_:next ~s~:@_:src-image ~s~:@_:src-image-layout ~s~:@_:dst-image ~s~:@_:dst-image-layout ~s~:@_:regions ~s~:>)"
               next 
               src-image 
               src-image-layout 
               dst-image 
               dst-image-layout 
               regions)))

(defmethod print-object ((obj blit-image-info-2-khr) out)
  (with-slots (next
               src-image
               src-image-layout
               dst-image
               dst-image-layout
               regions
               filter)
      obj
    (cl:format out "~i(~@<BLIT-IMAGE-INFO-2-KHR~:@_:next ~s~:@_:src-image ~s~:@_:src-image-layout ~s~:@_:dst-image ~s~:@_:dst-image-layout ~s~:@_:regions ~s~:@_:filter ~s~:>)"
               next 
               src-image 
               src-image-layout 
               dst-image 
               dst-image-layout 
               regions 
               filter)))

(defmethod print-object ((obj copy-buffer-to-image-info-2-khr) out)
  (with-slots (next
               src-buffer
               dst-image
               dst-image-layout
               regions)
      obj
    (cl:format out "~i(~@<COPY-BUFFER-TO-IMAGE-INFO-2-KHR~:@_:next ~s~:@_:src-buffer ~s~:@_:dst-image ~s~:@_:dst-image-layout ~s~:@_:regions ~s~:>)"
               next 
               src-buffer 
               dst-image 
               dst-image-layout 
               regions)))

(defmethod print-object ((obj copy-image-to-buffer-info-2-khr) out)
  (with-slots (next
               src-image
               src-image-layout
               dst-buffer
               regions)
      obj
    (cl:format out "~i(~@<COPY-IMAGE-TO-BUFFER-INFO-2-KHR~:@_:next ~s~:@_:src-image ~s~:@_:src-image-layout ~s~:@_:dst-buffer ~s~:@_:regions ~s~:>)"
               next 
               src-image 
               src-image-layout 
               dst-buffer 
               regions)))

(defmethod print-object ((obj resolve-image-info-2-khr) out)
  (with-slots (next
               src-image
               src-image-layout
               dst-image
               dst-image-layout
               regions)
      obj
    (cl:format out "~i(~@<RESOLVE-IMAGE-INFO-2-KHR~:@_:next ~s~:@_:src-image ~s~:@_:src-image-layout ~s~:@_:dst-image ~s~:@_:dst-image-layout ~s~:@_:regions ~s~:>)"
               next 
               src-image 
               src-image-layout 
               dst-image 
               dst-image-layout 
               regions)))

(defmethod print-object ((obj physical-device-shader-image-atomic-int-64-features-ext) out)
  (with-slots (next
               shader-image-int-64-atomics
               sparse-image-int-64-atomics)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-IMAGE-ATOMIC-INT-64-FEATURES-EXT~:@_:next ~s~:@_:shader-image-int-64-atomics ~s~:@_:sparse-image-int-64-atomics ~s~:>)"
               next 
               shader-image-int-64-atomics 
               sparse-image-int-64-atomics)))

(defmethod print-object ((obj fragment-shading-rate-attachment-info-khr) out)
  (with-slots (next
               fragment-shading-rate-attachment
               shading-rate-attachment-texel-size)
      obj
    (cl:format out "~i(~@<FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR~:@_:next ~s~:@_:fragment-shading-rate-attachment ~s~:@_:shading-rate-attachment-texel-size ~s~:>)"
               next 
               fragment-shading-rate-attachment 
               shading-rate-attachment-texel-size)))

(defmethod print-object ((obj pipeline-fragment-shading-rate-state-create-info-khr) out)
  (with-slots (next
               fragment-size
               combiner-ops)
      obj
    (cl:format out "~i(~@<PIPELINE-FRAGMENT-SHADING-RATE-STATE-CREATE-INFO-KHR~:@_:next ~s~:@_:fragment-size ~s~:@_:combiner-ops ~s~:>)"
               next 
               fragment-size 
               combiner-ops)))

(defmethod print-object ((obj physical-device-fragment-shading-rate-features-khr) out)
  (with-slots (next
               pipeline-fragment-shading-rate
               primitive-fragment-shading-rate
               attachment-fragment-shading-rate)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-FEATURES-KHR~:@_:next ~s~:@_:pipeline-fragment-shading-rate ~s~:@_:primitive-fragment-shading-rate ~s~:@_:attachment-fragment-shading-rate ~s~:>)"
               next 
               pipeline-fragment-shading-rate 
               primitive-fragment-shading-rate 
               attachment-fragment-shading-rate)))

(defmethod print-object ((obj physical-device-fragment-shading-rate-properties-khr) out)
  (with-slots (next
               min-fragment-shading-rate-attachment-texel-size
               max-fragment-shading-rate-attachment-texel-size
               max-fragment-shading-rate-attachment-texel-size-aspect-ratio
               primitive-fragment-shading-rate-with-multiple-viewports
               layered-shading-rate-attachments
               fragment-shading-rate-non-trivial-combiner-ops
               max-fragment-size
               max-fragment-size-aspect-ratio
               max-fragment-shading-rate-coverage-samples
               max-fragment-shading-rate-rasterization-samples
               fragment-shading-rate-with-shader-depth-stencil-writes
               fragment-shading-rate-with-sample-mask
               fragment-shading-rate-with-shader-sample-mask
               fragment-shading-rate-with-conservative-rasterization
               fragment-shading-rate-with-fragment-shader-interlock
               fragment-shading-rate-with-custom-sample-locations
               fragment-shading-rate-strict-multiply-combiner)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-PROPERTIES-KHR~:@_:next ~s~:@_:min-fragment-shading-rate-attachment-texel-size ~s~:@_:max-fragment-shading-rate-attachment-texel-size ~s~:@_:max-fragment-shading-rate-attachment-texel-size-aspect-ratio ~s~:@_:primitive-fragment-shading-rate-with-multiple-viewports ~s~:@_:layered-shading-rate-attachments ~s~:@_:fragment-shading-rate-non-trivial-combiner-ops ~s~:@_:max-fragment-size ~s~:@_:max-fragment-size-aspect-ratio ~s~:@_:max-fragment-shading-rate-coverage-samples ~s~:@_:max-fragment-shading-rate-rasterization-samples ~s~:@_:fragment-shading-rate-with-shader-depth-stencil-writes ~s~:@_:fragment-shading-rate-with-sample-mask ~s~:@_:fragment-shading-rate-with-shader-sample-mask ~s~:@_:fragment-shading-rate-with-conservative-rasterization ~s~:@_:fragment-shading-rate-with-fragment-shader-interlock ~s~:@_:fragment-shading-rate-with-custom-sample-locations ~s~:@_:fragment-shading-rate-strict-multiply-combiner ~s~:>)"
               next 
               min-fragment-shading-rate-attachment-texel-size 
               max-fragment-shading-rate-attachment-texel-size 
               max-fragment-shading-rate-attachment-texel-size-aspect-ratio 
               primitive-fragment-shading-rate-with-multiple-viewports 
               layered-shading-rate-attachments 
               fragment-shading-rate-non-trivial-combiner-ops 
               max-fragment-size 
               max-fragment-size-aspect-ratio 
               max-fragment-shading-rate-coverage-samples 
               max-fragment-shading-rate-rasterization-samples 
               fragment-shading-rate-with-shader-depth-stencil-writes 
               fragment-shading-rate-with-sample-mask 
               fragment-shading-rate-with-shader-sample-mask 
               fragment-shading-rate-with-conservative-rasterization 
               fragment-shading-rate-with-fragment-shader-interlock 
               fragment-shading-rate-with-custom-sample-locations 
               fragment-shading-rate-strict-multiply-combiner)))

(defmethod print-object ((obj physical-device-fragment-shading-rate-khr) out)
  (with-slots (next
               sample-counts
               fragment-size)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-KHR~:@_:next ~s~:@_:sample-counts ~s~:@_:fragment-size ~s~:>)"
               next 
               sample-counts 
               fragment-size)))

(defmethod print-object ((obj physical-device-shader-terminate-invocation-features-khr) out)
  (with-slots (next
               shader-terminate-invocation)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-TERMINATE-INVOCATION-FEATURES-KHR~:@_:next ~s~:@_:shader-terminate-invocation ~s~:>)"
               next 
               shader-terminate-invocation)))

(defmethod print-object ((obj physical-device-fragment-shading-rate-enums-features-nv) out)
  (with-slots (next
               fragment-shading-rate-enums
               supersample-fragment-shading-rates
               no-invocation-fragment-shading-rates)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-FEATURES-NV~:@_:next ~s~:@_:fragment-shading-rate-enums ~s~:@_:supersample-fragment-shading-rates ~s~:@_:no-invocation-fragment-shading-rates ~s~:>)"
               next 
               fragment-shading-rate-enums 
               supersample-fragment-shading-rates 
               no-invocation-fragment-shading-rates)))

(defmethod print-object ((obj physical-device-fragment-shading-rate-enums-properties-nv) out)
  (with-slots (next
               max-fragment-shading-rate-invocation-count)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-PROPERTIES-NV~:@_:next ~s~:@_:max-fragment-shading-rate-invocation-count ~s~:>)"
               next 
               max-fragment-shading-rate-invocation-count)))

(defmethod print-object ((obj pipeline-fragment-shading-rate-enum-state-create-info-nv) out)
  (with-slots (next
               shading-rate-type
               shading-rate
               combiner-ops)
      obj
    (cl:format out "~i(~@<PIPELINE-FRAGMENT-SHADING-RATE-ENUM-STATE-CREATE-INFO-NV~:@_:next ~s~:@_:shading-rate-type ~s~:@_:shading-rate ~s~:@_:combiner-ops ~s~:>)"
               next 
               shading-rate-type 
               shading-rate 
               combiner-ops)))

(defmethod print-object ((obj acceleration-structure-build-sizes-info-khr) out)
  (with-slots (next
               acceleration-structure-size
               update-scratch-size
               build-scratch-size)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-BUILD-SIZES-INFO-KHR~:@_:next ~s~:@_:acceleration-structure-size ~s~:@_:update-scratch-size ~s~:@_:build-scratch-size ~s~:>)"
               next 
               acceleration-structure-size 
               update-scratch-size 
               build-scratch-size)))

(defmethod print-object ((obj physical-device-mutable-descriptor-type-features-valve) out)
  (with-slots (next
               mutable-descriptor-type)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-MUTABLE-DESCRIPTOR-TYPE-FEATURES-VALVE~:@_:next ~s~:@_:mutable-descriptor-type ~s~:>)"
               next 
               mutable-descriptor-type)))

(defmethod print-object ((obj mutable-descriptor-type-list-valve) out)
  (with-slots (descriptor-types)
      obj
    (cl:format out "~i(~@<MUTABLE-DESCRIPTOR-TYPE-LIST-VALVE~:@_:descriptor-types ~s~:>)"
               descriptor-types)))

(defmethod print-object ((obj mutable-descriptor-type-create-info-valve) out)
  (with-slots (next
               mutable-descriptor-type-lists)
      obj
    (cl:format out "~i(~@<MUTABLE-DESCRIPTOR-TYPE-CREATE-INFO-VALVE~:@_:next ~s~:@_:mutable-descriptor-type-lists ~s~:>)"
               next 
               mutable-descriptor-type-lists)))

(defmethod print-object ((obj physical-device-vertex-input-dynamic-state-features-ext) out)
  (with-slots (next
               vertex-input-dynamic-state)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VERTEX-INPUT-DYNAMIC-STATE-FEATURES-EXT~:@_:next ~s~:@_:vertex-input-dynamic-state ~s~:>)"
               next 
               vertex-input-dynamic-state)))

(defmethod print-object ((obj physical-device-external-memory-r-d-m-a-features-nv) out)
  (with-slots (next
               external-memory-r-d-m-a)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-EXTERNAL-MEMORY-R-D-M-A-FEATURES-NV~:@_:next ~s~:@_:external-memory-r-d-m-a ~s~:>)"
               next 
               external-memory-r-d-m-a)))

(defmethod print-object ((obj vertex-input-binding-description-2-ext) out)
  (with-slots (next
               binding
               stride
               input-rate
               divisor)
      obj
    (cl:format out "~i(~@<VERTEX-INPUT-BINDING-DESCRIPTION-2-EXT~:@_:next ~s~:@_:binding ~s~:@_:stride ~s~:@_:input-rate ~s~:@_:divisor ~s~:>)"
               next 
               binding 
               stride 
               input-rate 
               divisor)))

(defmethod print-object ((obj vertex-input-attribute-description-2-ext) out)
  (with-slots (next
               location
               binding
               format
               offset)
      obj
    (cl:format out "~i(~@<VERTEX-INPUT-ATTRIBUTE-DESCRIPTION-2-EXT~:@_:next ~s~:@_:location ~s~:@_:binding ~s~:@_:format ~s~:@_:offset ~s~:>)"
               next 
               location 
               binding 
               format 
               offset)))

(defmethod print-object ((obj physical-device-color-write-enable-features-ext) out)
  (with-slots (next
               color-write-enable)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-COLOR-WRITE-ENABLE-FEATURES-EXT~:@_:next ~s~:@_:color-write-enable ~s~:>)"
               next 
               color-write-enable)))

(defmethod print-object ((obj pipeline-color-write-create-info-ext) out)
  (with-slots (next
               color-write-enables)
      obj
    (cl:format out "~i(~@<PIPELINE-COLOR-WRITE-CREATE-INFO-EXT~:@_:next ~s~:@_:color-write-enables ~s~:>)"
               next 
               color-write-enables)))

(defmethod print-object ((obj memory-barrier-2-khr) out)
  (with-slots (next
               src-stage-mask
               src-access-mask
               dst-stage-mask
               dst-access-mask)
      obj
    (cl:format out "~i(~@<MEMORY-BARRIER-2-KHR~:@_:next ~s~:@_:src-stage-mask ~s~:@_:src-access-mask ~s~:@_:dst-stage-mask ~s~:@_:dst-access-mask ~s~:>)"
               next 
               src-stage-mask 
               src-access-mask 
               dst-stage-mask 
               dst-access-mask)))

(defmethod print-object ((obj image-memory-barrier-2-khr) out)
  (with-slots (next
               src-stage-mask
               src-access-mask
               dst-stage-mask
               dst-access-mask
               old-layout
               new-layout
               src-queue-family-index
               dst-queue-family-index
               image
               subresource-range)
      obj
    (cl:format out "~i(~@<IMAGE-MEMORY-BARRIER-2-KHR~:@_:next ~s~:@_:src-stage-mask ~s~:@_:src-access-mask ~s~:@_:dst-stage-mask ~s~:@_:dst-access-mask ~s~:@_:old-layout ~s~:@_:new-layout ~s~:@_:src-queue-family-index ~s~:@_:dst-queue-family-index ~s~:@_:image ~s~:@_:subresource-range ~s~:>)"
               next 
               src-stage-mask 
               src-access-mask 
               dst-stage-mask 
               dst-access-mask 
               old-layout 
               new-layout 
               src-queue-family-index 
               dst-queue-family-index 
               image 
               subresource-range)))

(defmethod print-object ((obj buffer-memory-barrier-2-khr) out)
  (with-slots (next
               src-stage-mask
               src-access-mask
               dst-stage-mask
               dst-access-mask
               src-queue-family-index
               dst-queue-family-index
               buffer
               offset
               size)
      obj
    (cl:format out "~i(~@<BUFFER-MEMORY-BARRIER-2-KHR~:@_:next ~s~:@_:src-stage-mask ~s~:@_:src-access-mask ~s~:@_:dst-stage-mask ~s~:@_:dst-access-mask ~s~:@_:src-queue-family-index ~s~:@_:dst-queue-family-index ~s~:@_:buffer ~s~:@_:offset ~s~:@_:size ~s~:>)"
               next 
               src-stage-mask 
               src-access-mask 
               dst-stage-mask 
               dst-access-mask 
               src-queue-family-index 
               dst-queue-family-index 
               buffer 
               offset 
               size)))

(defmethod print-object ((obj dependency-info-khr) out)
  (with-slots (next
               dependency-flags
               memory-barriers
               buffer-memory-barriers
               image-memory-barriers)
      obj
    (cl:format out "~i(~@<DEPENDENCY-INFO-KHR~:@_:next ~s~:@_:dependency-flags ~s~:@_:memory-barriers ~s~:@_:buffer-memory-barriers ~s~:@_:image-memory-barriers ~s~:>)"
               next 
               dependency-flags 
               memory-barriers 
               buffer-memory-barriers 
               image-memory-barriers)))

(defmethod print-object ((obj semaphore-submit-info-khr) out)
  (with-slots (next
               semaphore
               value
               stage-mask
               device-index)
      obj
    (cl:format out "~i(~@<SEMAPHORE-SUBMIT-INFO-KHR~:@_:next ~s~:@_:semaphore ~s~:@_:value ~s~:@_:stage-mask ~s~:@_:device-index ~s~:>)"
               next 
               semaphore 
               value 
               stage-mask 
               device-index)))

(defmethod print-object ((obj command-buffer-submit-info-khr) out)
  (with-slots (next
               command-buffer
               device-mask)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-SUBMIT-INFO-KHR~:@_:next ~s~:@_:command-buffer ~s~:@_:device-mask ~s~:>)"
               next 
               command-buffer 
               device-mask)))

(defmethod print-object ((obj submit-info-2-khr) out)
  (with-slots (next
               flags
               wait-semaphore-infos
               command-buffer-infos
               signal-semaphore-infos)
      obj
    (cl:format out "~i(~@<SUBMIT-INFO-2-KHR~:@_:next ~s~:@_:flags ~s~:@_:wait-semaphore-infos ~s~:@_:command-buffer-infos ~s~:@_:signal-semaphore-infos ~s~:>)"
               next 
               flags 
               wait-semaphore-infos 
               command-buffer-infos 
               signal-semaphore-infos)))

(defmethod print-object ((obj queue-family-checkpoint-properties-2-nv) out)
  (with-slots (next
               checkpoint-execution-stage-mask)
      obj
    (cl:format out "~i(~@<QUEUE-FAMILY-CHECKPOINT-PROPERTIES-2-NV~:@_:next ~s~:@_:checkpoint-execution-stage-mask ~s~:>)"
               next 
               checkpoint-execution-stage-mask)))

(defmethod print-object ((obj checkpoint-data-2-nv) out)
  (with-slots (next
               stage
               checkpoint-marker)
      obj
    (cl:format out "~i(~@<CHECKPOINT-DATA-2-NV~:@_:next ~s~:@_:stage ~s~:@_:checkpoint-marker ~s~:>)"
               next 
               stage 
               checkpoint-marker)))

(defmethod print-object ((obj physical-device-synchronization-2-features-khr) out)
  (with-slots (next
               synchronization-2)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SYNCHRONIZATION-2-FEATURES-KHR~:@_:next ~s~:@_:synchronization-2 ~s~:>)"
               next 
               synchronization-2)))

(defmethod print-object ((obj video-queue-family-properties-2-khr) out)
  (with-slots (next
               video-codec-operations)
      obj
    (cl:format out "~i(~@<VIDEO-QUEUE-FAMILY-PROPERTIES-2-KHR~:@_:next ~s~:@_:video-codec-operations ~s~:>)"
               next 
               video-codec-operations)))

(defmethod print-object ((obj video-profiles-khr) out)
  (with-slots (next
               profile-count
               profiles)
      obj
    (cl:format out "~i(~@<VIDEO-PROFILES-KHR~:@_:next ~s~:@_:profile-count ~s~:@_:profiles ~s~:>)"
               next 
               profile-count 
               profiles)))

(defmethod print-object ((obj physical-device-video-format-info-khr) out)
  (with-slots (next
               image-usage
               video-profiles)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-VIDEO-FORMAT-INFO-KHR~:@_:next ~s~:@_:image-usage ~s~:@_:video-profiles ~s~:>)"
               next 
               image-usage 
               video-profiles)))

(defmethod print-object ((obj video-format-properties-khr) out)
  (with-slots (next
               format)
      obj
    (cl:format out "~i(~@<VIDEO-FORMAT-PROPERTIES-KHR~:@_:next ~s~:@_:format ~s~:>)"
               next 
               format)))

(defmethod print-object ((obj video-profile-khr) out)
  (with-slots (next
               video-codec-operation
               chroma-subsampling
               luma-bit-depth
               chroma-bit-depth)
      obj
    (cl:format out "~i(~@<VIDEO-PROFILE-KHR~:@_:next ~s~:@_:video-codec-operation ~s~:@_:chroma-subsampling ~s~:@_:luma-bit-depth ~s~:@_:chroma-bit-depth ~s~:>)"
               next 
               video-codec-operation 
               chroma-subsampling 
               luma-bit-depth 
               chroma-bit-depth)))

(defmethod print-object ((obj video-capabilities-khr) out)
  (with-slots (next
               capability-flags
               min-bitstream-buffer-offset-alignment
               min-bitstream-buffer-size-alignment
               video-picture-extent-granularity
               min-extent
               max-extent
               max-reference-pictures-slots-count
               max-reference-pictures-active-count)
      obj
    (cl:format out "~i(~@<VIDEO-CAPABILITIES-KHR~:@_:next ~s~:@_:capability-flags ~s~:@_:min-bitstream-buffer-offset-alignment ~s~:@_:min-bitstream-buffer-size-alignment ~s~:@_:video-picture-extent-granularity ~s~:@_:min-extent ~s~:@_:max-extent ~s~:@_:max-reference-pictures-slots-count ~s~:@_:max-reference-pictures-active-count ~s~:>)"
               next 
               capability-flags 
               min-bitstream-buffer-offset-alignment 
               min-bitstream-buffer-size-alignment 
               video-picture-extent-granularity 
               min-extent 
               max-extent 
               max-reference-pictures-slots-count 
               max-reference-pictures-active-count)))

(defmethod print-object ((obj video-get-memory-properties-khr) out)
  (with-slots (next
               memory-bind-index
               memory-requirements)
      obj
    (cl:format out "~i(~@<VIDEO-GET-MEMORY-PROPERTIES-KHR~:@_:next ~s~:@_:memory-bind-index ~s~:@_:memory-requirements ~s~:>)"
               next 
               memory-bind-index 
               memory-requirements)))

(defmethod print-object ((obj video-bind-memory-khr) out)
  (with-slots (next
               memory-bind-index
               memory
               memory-offset
               memory-size)
      obj
    (cl:format out "~i(~@<VIDEO-BIND-MEMORY-KHR~:@_:next ~s~:@_:memory-bind-index ~s~:@_:memory ~s~:@_:memory-offset ~s~:@_:memory-size ~s~:>)"
               next 
               memory-bind-index 
               memory 
               memory-offset 
               memory-size)))

(defmethod print-object ((obj video-picture-resource-khr) out)
  (with-slots (next
               coded-offset
               coded-extent
               base-array-layer
               image-view-binding)
      obj
    (cl:format out "~i(~@<VIDEO-PICTURE-RESOURCE-KHR~:@_:next ~s~:@_:coded-offset ~s~:@_:coded-extent ~s~:@_:base-array-layer ~s~:@_:image-view-binding ~s~:>)"
               next 
               coded-offset 
               coded-extent 
               base-array-layer 
               image-view-binding)))

(defmethod print-object ((obj video-reference-slot-khr) out)
  (with-slots (next
               slot-index
               picture-resource)
      obj
    (cl:format out "~i(~@<VIDEO-REFERENCE-SLOT-KHR~:@_:next ~s~:@_:slot-index ~s~:@_:picture-resource ~s~:>)"
               next 
               slot-index 
               picture-resource)))

(defmethod print-object ((obj video-decode-info-khr) out)
  (with-slots (next
               flags
               coded-offset
               coded-extent
               src-buffer
               src-buffer-offset
               src-buffer-range
               dst-picture-resource
               setup-reference-slot
               reference-slots)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:coded-offset ~s~:@_:coded-extent ~s~:@_:src-buffer ~s~:@_:src-buffer-offset ~s~:@_:src-buffer-range ~s~:@_:dst-picture-resource ~s~:@_:setup-reference-slot ~s~:@_:reference-slots ~s~:>)"
               next 
               flags 
               coded-offset 
               coded-extent 
               src-buffer 
               src-buffer-offset 
               src-buffer-range 
               dst-picture-resource 
               setup-reference-slot 
               reference-slots)))

(defmethod print-object ((obj video-decode-h264-profile-ext) out)
  (with-slots (next
               std-profile-idc
               picture-layout)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-PROFILE-EXT~:@_:next ~s~:@_:std-profile-idc ~s~:@_:picture-layout ~s~:>)"
               next 
               std-profile-idc 
               picture-layout)))

(defmethod print-object ((obj video-decode-h264-capabilities-ext) out)
  (with-slots (next
               max-level
               field-offset-granularity
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-CAPABILITIES-EXT~:@_:next ~s~:@_:max-level ~s~:@_:field-offset-granularity ~s~:@_:std-extension-version ~s~:>)"
               next 
               max-level 
               field-offset-granularity 
               std-extension-version)))

(defmethod print-object ((obj video-decode-h264-session-create-info-ext) out)
  (with-slots (next
               flags
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-SESSION-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               std-extension-version)))

(defmethod print-object ((obj video-decode-h264-session-parameters-add-info-ext) out)
  (with-slots (next
               sps-std
               pps-std)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT~:@_:next ~s~:@_:sps-std ~s~:@_:pps-std ~s~:>)"
               next 
               sps-std 
               pps-std)))

(defmethod print-object ((obj video-decode-h264-session-parameters-create-info-ext) out)
  (with-slots (next
               max-sps-std-count
               max-pps-std-count
               parameters-add-info)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT~:@_:next ~s~:@_:max-sps-std-count ~s~:@_:max-pps-std-count ~s~:@_:parameters-add-info ~s~:>)"
               next 
               max-sps-std-count 
               max-pps-std-count 
               parameters-add-info)))

(defmethod print-object ((obj video-decode-h264-picture-info-ext) out)
  (with-slots (next
               std-picture-info
               slices-data-offsets)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-PICTURE-INFO-EXT~:@_:next ~s~:@_:std-picture-info ~s~:@_:slices-data-offsets ~s~:>)"
               next 
               std-picture-info 
               slices-data-offsets)))

(defmethod print-object ((obj video-decode-h264-dpb-slot-info-ext) out)
  (with-slots (next
               std-reference-info)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-DPB-SLOT-INFO-EXT~:@_:next ~s~:@_:std-reference-info ~s~:>)"
               next 
               std-reference-info)))

(defmethod print-object ((obj video-decode-h264-mvc-ext) out)
  (with-slots (next
               std-mvc)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H264-MVC-EXT~:@_:next ~s~:@_:std-mvc ~s~:>)"
               next 
               std-mvc)))

(defmethod print-object ((obj video-decode-h265-profile-ext) out)
  (with-slots (next
               std-profile-idc)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-PROFILE-EXT~:@_:next ~s~:@_:std-profile-idc ~s~:>)"
               next 
               std-profile-idc)))

(defmethod print-object ((obj video-decode-h265-capabilities-ext) out)
  (with-slots (next
               max-level
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-CAPABILITIES-EXT~:@_:next ~s~:@_:max-level ~s~:@_:std-extension-version ~s~:>)"
               next 
               max-level 
               std-extension-version)))

(defmethod print-object ((obj video-decode-h265-session-create-info-ext) out)
  (with-slots (next
               flags
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-SESSION-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               std-extension-version)))

(defmethod print-object ((obj video-decode-h265-session-parameters-add-info-ext) out)
  (with-slots (next
               sps-std
               pps-std)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT~:@_:next ~s~:@_:sps-std ~s~:@_:pps-std ~s~:>)"
               next 
               sps-std 
               pps-std)))

(defmethod print-object ((obj video-decode-h265-session-parameters-create-info-ext) out)
  (with-slots (next
               max-sps-std-count
               max-pps-std-count
               parameters-add-info)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT~:@_:next ~s~:@_:max-sps-std-count ~s~:@_:max-pps-std-count ~s~:@_:parameters-add-info ~s~:>)"
               next 
               max-sps-std-count 
               max-pps-std-count 
               parameters-add-info)))

(defmethod print-object ((obj video-decode-h265-picture-info-ext) out)
  (with-slots (next
               std-picture-info
               slices-data-offsets)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-PICTURE-INFO-EXT~:@_:next ~s~:@_:std-picture-info ~s~:@_:slices-data-offsets ~s~:>)"
               next 
               std-picture-info 
               slices-data-offsets)))

(defmethod print-object ((obj video-decode-h265-dpb-slot-info-ext) out)
  (with-slots (next
               std-reference-info)
      obj
    (cl:format out "~i(~@<VIDEO-DECODE-H265-DPB-SLOT-INFO-EXT~:@_:next ~s~:@_:std-reference-info ~s~:>)"
               next 
               std-reference-info)))

(defmethod print-object ((obj video-session-create-info-khr) out)
  (with-slots (next
               queue-family-index
               flags
               video-profile
               picture-format
               max-coded-extent
               reference-pictures-format
               max-reference-pictures-slots-count
               max-reference-pictures-active-count)
      obj
    (cl:format out "~i(~@<VIDEO-SESSION-CREATE-INFO-KHR~:@_:next ~s~:@_:queue-family-index ~s~:@_:flags ~s~:@_:video-profile ~s~:@_:picture-format ~s~:@_:max-coded-extent ~s~:@_:reference-pictures-format ~s~:@_:max-reference-pictures-slots-count ~s~:@_:max-reference-pictures-active-count ~s~:>)"
               next 
               queue-family-index 
               flags 
               video-profile 
               picture-format 
               max-coded-extent 
               reference-pictures-format 
               max-reference-pictures-slots-count 
               max-reference-pictures-active-count)))

(defmethod print-object ((obj video-session-parameters-create-info-khr) out)
  (with-slots (next
               video-session-parameters-template
               video-session)
      obj
    (cl:format out "~i(~@<VIDEO-SESSION-PARAMETERS-CREATE-INFO-KHR~:@_:next ~s~:@_:video-session-parameters-template ~s~:@_:video-session ~s~:>)"
               next 
               video-session-parameters-template 
               video-session)))

(defmethod print-object ((obj video-session-parameters-update-info-khr) out)
  (with-slots (next
               update-sequence-count)
      obj
    (cl:format out "~i(~@<VIDEO-SESSION-PARAMETERS-UPDATE-INFO-KHR~:@_:next ~s~:@_:update-sequence-count ~s~:>)"
               next 
               update-sequence-count)))

(defmethod print-object ((obj video-begin-coding-info-khr) out)
  (with-slots (next
               flags
               codec-quality-preset
               video-session
               video-session-parameters
               reference-slots)
      obj
    (cl:format out "~i(~@<VIDEO-BEGIN-CODING-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:codec-quality-preset ~s~:@_:video-session ~s~:@_:video-session-parameters ~s~:@_:reference-slots ~s~:>)"
               next 
               flags 
               codec-quality-preset 
               video-session 
               video-session-parameters 
               reference-slots)))

(defmethod print-object ((obj video-end-coding-info-khr) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<VIDEO-END-CODING-INFO-KHR~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj video-coding-control-info-khr) out)
  (with-slots (next
               flags)
      obj
    (cl:format out "~i(~@<VIDEO-CODING-CONTROL-INFO-KHR~:@_:next ~s~:@_:flags ~s~:>)"
               next 
               flags)))

(defmethod print-object ((obj video-encode-info-khr) out)
  (with-slots (next
               flags
               quality-level
               coded-extent
               dst-bitstream-buffer
               dst-bitstream-buffer-offset
               dst-bitstream-buffer-max-range
               src-picture-resource
               setup-reference-slot
               reference-slots)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:quality-level ~s~:@_:coded-extent ~s~:@_:dst-bitstream-buffer ~s~:@_:dst-bitstream-buffer-offset ~s~:@_:dst-bitstream-buffer-max-range ~s~:@_:src-picture-resource ~s~:@_:setup-reference-slot ~s~:@_:reference-slots ~s~:>)"
               next 
               flags 
               quality-level 
               coded-extent 
               dst-bitstream-buffer 
               dst-bitstream-buffer-offset 
               dst-bitstream-buffer-max-range 
               src-picture-resource 
               setup-reference-slot 
               reference-slots)))

(defmethod print-object ((obj video-encode-rate-control-info-khr) out)
  (with-slots (next
               flags
               rate-control-mode
               average-bitrate
               peak-to-average-bitrate-ratio
               frame-rate-numerator
               frame-rate-denominator
               virtual-buffer-size-in-ms)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-RATE-CONTROL-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:rate-control-mode ~s~:@_:average-bitrate ~s~:@_:peak-to-average-bitrate-ratio ~s~:@_:frame-rate-numerator ~s~:@_:frame-rate-denominator ~s~:@_:virtual-buffer-size-in-ms ~s~:>)"
               next 
               flags 
               rate-control-mode 
               average-bitrate 
               peak-to-average-bitrate-ratio 
               frame-rate-numerator 
               frame-rate-denominator 
               virtual-buffer-size-in-ms)))

(defmethod print-object ((obj video-encode-h264-capabilities-ext) out)
  (with-slots (next
               flags
               input-mode-flags
               output-mode-flags
               min-picture-size-in-mbs
               max-picture-size-in-mbs
               input-image-data-alignment
               max-num-l-0-reference-for-p
               max-num-l-0-reference-for-b
               max-num-l-1-reference
               quality-level-count
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-CAPABILITIES-EXT~:@_:next ~s~:@_:flags ~s~:@_:input-mode-flags ~s~:@_:output-mode-flags ~s~:@_:min-picture-size-in-mbs ~s~:@_:max-picture-size-in-mbs ~s~:@_:input-image-data-alignment ~s~:@_:max-num-l-0-reference-for-p ~s~:@_:max-num-l-0-reference-for-b ~s~:@_:max-num-l-1-reference ~s~:@_:quality-level-count ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               input-mode-flags 
               output-mode-flags 
               min-picture-size-in-mbs 
               max-picture-size-in-mbs 
               input-image-data-alignment 
               max-num-l-0-reference-for-p 
               max-num-l-0-reference-for-b 
               max-num-l-1-reference 
               quality-level-count 
               std-extension-version)))

(defmethod print-object ((obj video-encode-h264-session-create-info-ext) out)
  (with-slots (next
               flags
               max-picture-size-in-mbs
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-SESSION-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:max-picture-size-in-mbs ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               max-picture-size-in-mbs 
               std-extension-version)))

(defmethod print-object ((obj video-encode-h264-session-parameters-add-info-ext) out)
  (with-slots (next
               sps-std
               pps-std)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT~:@_:next ~s~:@_:sps-std ~s~:@_:pps-std ~s~:>)"
               next 
               sps-std 
               pps-std)))

(defmethod print-object ((obj video-encode-h264-session-parameters-create-info-ext) out)
  (with-slots (next
               max-sps-std-count
               max-pps-std-count
               parameters-add-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT~:@_:next ~s~:@_:max-sps-std-count ~s~:@_:max-pps-std-count ~s~:@_:parameters-add-info ~s~:>)"
               next 
               max-sps-std-count 
               max-pps-std-count 
               parameters-add-info)))

(defmethod print-object ((obj video-encode-h264-dpb-slot-info-ext) out)
  (with-slots (next
               slot-index
               std-picture-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-DPB-SLOT-INFO-EXT~:@_:next ~s~:@_:slot-index ~s~:@_:std-picture-info ~s~:>)"
               next 
               slot-index 
               std-picture-info)))

(defmethod print-object ((obj video-encode-h264-vcl-frame-info-ext) out)
  (with-slots (next
               ref-default-final-list-0-entries
               ref-default-final-list-1-entries
               nalu-slice-entries
               current-picture-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-VCL-FRAME-INFO-EXT~:@_:next ~s~:@_:ref-default-final-list-0-entries ~s~:@_:ref-default-final-list-1-entries ~s~:@_:nalu-slice-entries ~s~:@_:current-picture-info ~s~:>)"
               next 
               ref-default-final-list-0-entries 
               ref-default-final-list-1-entries 
               nalu-slice-entries 
               current-picture-info)))

(defmethod print-object ((obj video-encode-h264-emit-picture-parameters-ext) out)
  (with-slots (next
               sps-id
               emit-sps-enable
               pps-id-entries)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-EMIT-PICTURE-PARAMETERS-EXT~:@_:next ~s~:@_:sps-id ~s~:@_:emit-sps-enable ~s~:@_:pps-id-entries ~s~:>)"
               next 
               sps-id 
               emit-sps-enable 
               pps-id-entries)))

(defmethod print-object ((obj video-encode-h264-profile-ext) out)
  (with-slots (next
               std-profile-idc)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-PROFILE-EXT~:@_:next ~s~:@_:std-profile-idc ~s~:>)"
               next 
               std-profile-idc)))

(defmethod print-object ((obj video-encode-h264-nalu-slice-ext) out)
  (with-slots (next
               slice-header-std
               mb-count
               ref-final-list-0-entries
               ref-final-list-1-entries
               preceding-nalu-bytes
               min-qp
               max-qp)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H264-NALU-SLICE-EXT~:@_:next ~s~:@_:slice-header-std ~s~:@_:mb-count ~s~:@_:ref-final-list-0-entries ~s~:@_:ref-final-list-1-entries ~s~:@_:preceding-nalu-bytes ~s~:@_:min-qp ~s~:@_:max-qp ~s~:>)"
               next 
               slice-header-std 
               mb-count 
               ref-final-list-0-entries 
               ref-final-list-1-entries 
               preceding-nalu-bytes 
               min-qp 
               max-qp)))

(defmethod print-object ((obj video-encode-h265-capabilities-ext) out)
  (with-slots (next
               flags
               input-mode-flags
               output-mode-flags
               ctb-sizes
               input-image-data-alignment
               max-num-l-0-reference-for-p
               max-num-l-0-reference-for-b
               max-num-l-1-reference
               max-num-sub-layers
               quality-level-count
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-CAPABILITIES-EXT~:@_:next ~s~:@_:flags ~s~:@_:input-mode-flags ~s~:@_:output-mode-flags ~s~:@_:ctb-sizes ~s~:@_:input-image-data-alignment ~s~:@_:max-num-l-0-reference-for-p ~s~:@_:max-num-l-0-reference-for-b ~s~:@_:max-num-l-1-reference ~s~:@_:max-num-sub-layers ~s~:@_:quality-level-count ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               input-mode-flags 
               output-mode-flags 
               ctb-sizes 
               input-image-data-alignment 
               max-num-l-0-reference-for-p 
               max-num-l-0-reference-for-b 
               max-num-l-1-reference 
               max-num-sub-layers 
               quality-level-count 
               std-extension-version)))

(defmethod print-object ((obj video-encode-h265-session-create-info-ext) out)
  (with-slots (next
               flags
               std-extension-version)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-SESSION-CREATE-INFO-EXT~:@_:next ~s~:@_:flags ~s~:@_:std-extension-version ~s~:>)"
               next 
               flags 
               std-extension-version)))

(defmethod print-object ((obj video-encode-h265-session-parameters-add-info-ext) out)
  (with-slots (next
               vps-std
               sps-std
               pps-std)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT~:@_:next ~s~:@_:vps-std ~s~:@_:sps-std ~s~:@_:pps-std ~s~:>)"
               next 
               vps-std 
               sps-std 
               pps-std)))

(defmethod print-object ((obj video-encode-h265-session-parameters-create-info-ext) out)
  (with-slots (next
               max-vps-std-count
               max-sps-std-count
               max-pps-std-count
               parameters-add-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT~:@_:next ~s~:@_:max-vps-std-count ~s~:@_:max-sps-std-count ~s~:@_:max-pps-std-count ~s~:@_:parameters-add-info ~s~:>)"
               next 
               max-vps-std-count 
               max-sps-std-count 
               max-pps-std-count 
               parameters-add-info)))

(defmethod print-object ((obj video-encode-h265-vcl-frame-info-ext) out)
  (with-slots (next
               reference-final-lists
               nalu-slice-entries
               current-picture-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-VCL-FRAME-INFO-EXT~:@_:next ~s~:@_:reference-final-lists ~s~:@_:nalu-slice-entries ~s~:@_:current-picture-info ~s~:>)"
               next 
               reference-final-lists 
               nalu-slice-entries 
               current-picture-info)))

(defmethod print-object ((obj video-encode-h265-emit-picture-parameters-ext) out)
  (with-slots (next
               vps-id
               sps-id
               emit-vps-enable
               emit-sps-enable
               pps-id-entries)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-EMIT-PICTURE-PARAMETERS-EXT~:@_:next ~s~:@_:vps-id ~s~:@_:sps-id ~s~:@_:emit-vps-enable ~s~:@_:emit-sps-enable ~s~:@_:pps-id-entries ~s~:>)"
               next 
               vps-id 
               sps-id 
               emit-vps-enable 
               emit-sps-enable 
               pps-id-entries)))

(defmethod print-object ((obj video-encode-h265-nalu-slice-ext) out)
  (with-slots (next
               ctb-count
               reference-final-lists
               slice-header-std)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-NALU-SLICE-EXT~:@_:next ~s~:@_:ctb-count ~s~:@_:reference-final-lists ~s~:@_:slice-header-std ~s~:>)"
               next 
               ctb-count 
               reference-final-lists 
               slice-header-std)))

(defmethod print-object ((obj video-encode-h265-profile-ext) out)
  (with-slots (next
               std-profile-idc)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-PROFILE-EXT~:@_:next ~s~:@_:std-profile-idc ~s~:>)"
               next 
               std-profile-idc)))

(defmethod print-object ((obj video-encode-h265-dpb-slot-info-ext) out)
  (with-slots (next
               slot-index
               std-reference-info)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-DPB-SLOT-INFO-EXT~:@_:next ~s~:@_:slot-index ~s~:@_:std-reference-info ~s~:>)"
               next 
               slot-index 
               std-reference-info)))

(defmethod print-object ((obj video-encode-h265-reference-lists-ext) out)
  (with-slots (next
               reference-list-0-entries
               reference-list-1-entries
               reference-modifications)
      obj
    (cl:format out "~i(~@<VIDEO-ENCODE-H265-REFERENCE-LISTS-EXT~:@_:next ~s~:@_:reference-list-0-entries ~s~:@_:reference-list-1-entries ~s~:@_:reference-modifications ~s~:>)"
               next 
               reference-list-0-entries 
               reference-list-1-entries 
               reference-modifications)))

(defmethod print-object ((obj physical-device-inherited-viewport-scissor-features-nv) out)
  (with-slots (next
               inherited-viewport-scissor-2d)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-INHERITED-VIEWPORT-SCISSOR-FEATURES-NV~:@_:next ~s~:@_:inherited-viewport-scissor-2d ~s~:>)"
               next 
               inherited-viewport-scissor-2d)))

(defmethod print-object ((obj command-buffer-inheritance-viewport-scissor-info-nv) out)
  (with-slots (next
               viewport-scissor-2d
               viewport-depth-count
               viewport-depths)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-INHERITANCE-VIEWPORT-SCISSOR-INFO-NV~:@_:next ~s~:@_:viewport-scissor-2d ~s~:@_:viewport-depth-count ~s~:@_:viewport-depths ~s~:>)"
               next 
               viewport-scissor-2d 
               viewport-depth-count 
               viewport-depths)))

(defmethod print-object ((obj physical-device-ycbcr-2-plane-4-4-4-formats-features-ext) out)
  (with-slots (next
               ycbcr-2plane-4-4-4-formats)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-YCBCR-2-PLANE-4-4-4-FORMATS-FEATURES-EXT~:@_:next ~s~:@_:ycbcr-2plane-4-4-4-formats ~s~:>)"
               next 
               ycbcr-2plane-4-4-4-formats)))

(defmethod print-object ((obj physical-device-provoking-vertex-features-ext) out)
  (with-slots (next
               provoking-vertex-last
               transform-feedback-preserves-provoking-vertex)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROVOKING-VERTEX-FEATURES-EXT~:@_:next ~s~:@_:provoking-vertex-last ~s~:@_:transform-feedback-preserves-provoking-vertex ~s~:>)"
               next 
               provoking-vertex-last 
               transform-feedback-preserves-provoking-vertex)))

(defmethod print-object ((obj physical-device-provoking-vertex-properties-ext) out)
  (with-slots (next
               provoking-vertex-mode-per-pipeline
               transform-feedback-preserves-triangle-fan-provoking-vertex)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-PROVOKING-VERTEX-PROPERTIES-EXT~:@_:next ~s~:@_:provoking-vertex-mode-per-pipeline ~s~:@_:transform-feedback-preserves-triangle-fan-provoking-vertex ~s~:>)"
               next 
               provoking-vertex-mode-per-pipeline 
               transform-feedback-preserves-triangle-fan-provoking-vertex)))

(defmethod print-object ((obj pipeline-rasterization-provoking-vertex-state-create-info-ext) out)
  (with-slots (next
               provoking-vertex-mode)
      obj
    (cl:format out "~i(~@<PIPELINE-RASTERIZATION-PROVOKING-VERTEX-STATE-CREATE-INFO-EXT~:@_:next ~s~:@_:provoking-vertex-mode ~s~:>)"
               next 
               provoking-vertex-mode)))

(defmethod print-object ((obj cu-module-create-info-nvx) out)
  (with-slots (next
               data-size
               data)
      obj
    (cl:format out "~i(~@<CU-MODULE-CREATE-INFO-NVX~:@_:next ~s~:@_:data-size ~s~:@_:data ~s~:>)"
               next 
               data-size 
               data)))

(defmethod print-object ((obj cu-function-create-info-nvx) out)
  (with-slots (next
               module
               name)
      obj
    (cl:format out "~i(~@<CU-FUNCTION-CREATE-INFO-NVX~:@_:next ~s~:@_:module ~s~:@_:name ~s~:>)"
               next 
               module 
               name)))

(defmethod print-object ((obj cu-launch-info-nvx) out)
  (with-slots (next
               function-handle
               grid-dim-x
               grid-dim-y
               grid-dim-z
               block-dim-x
               block-dim-y
               block-dim-z
               shared-mem-bytes
               param-count
               params
               extra-count
               extras)
      obj
    (cl:format out "~i(~@<CU-LAUNCH-INFO-NVX~:@_:next ~s~:@_:function-handle ~s~:@_:grid-dim-x ~s~:@_:grid-dim-y ~s~:@_:grid-dim-z ~s~:@_:block-dim-x ~s~:@_:block-dim-y ~s~:@_:block-dim-z ~s~:@_:shared-mem-bytes ~s~:@_:param-count ~s~:@_:params ~s~:@_:extra-count ~s~:@_:extras ~s~:>)"
               next 
               function-handle 
               grid-dim-x 
               grid-dim-y 
               grid-dim-z 
               block-dim-x 
               block-dim-y 
               block-dim-z 
               shared-mem-bytes 
               param-count 
               params 
               extra-count 
               extras)))

(defmethod print-object ((obj physical-device-shader-integer-dot-product-features-khr) out)
  (with-slots (next
               shader-integer-dot-product)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-FEATURES-KHR~:@_:next ~s~:@_:shader-integer-dot-product ~s~:>)"
               next 
               shader-integer-dot-product)))

(defmethod print-object ((obj physical-device-shader-integer-dot-product-properties-khr) out)
  (with-slots (next
               integer-dot-product-8-bit-unsigned-accelerated
               integer-dot-product-8-bit-signed-accelerated
               integer-dot-product-8-bit-mixed-signedness-accelerated
               integer-dot-product-4x-8-bit-packed-unsigned-accelerated
               integer-dot-product-4x-8-bit-packed-signed-accelerated
               integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated
               integer-dot-product-16-bit-unsigned-accelerated
               integer-dot-product-16-bit-signed-accelerated
               integer-dot-product-16-bit-mixed-signedness-accelerated
               integer-dot-product-32-bit-unsigned-accelerated
               integer-dot-product-32-bit-signed-accelerated
               integer-dot-product-32-bit-mixed-signedness-accelerated
               integer-dot-product-64-bit-unsigned-accelerated
               integer-dot-product-64-bit-signed-accelerated
               integer-dot-product-64-bit-mixed-signedness-accelerated
               integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated
               integer-dot-product-accumulating-saturating-8-bit-signed-accelerated
               integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated
               integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated
               integer-dot-product-accumulating-saturating-16-bit-signed-accelerated
               integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated
               integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated
               integer-dot-product-accumulating-saturating-32-bit-signed-accelerated
               integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated
               integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated
               integer-dot-product-accumulating-saturating-64-bit-signed-accelerated
               integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-PROPERTIES-KHR~:@_:next ~s~:@_:integer-dot-product-8-bit-unsigned-accelerated ~s~:@_:integer-dot-product-8-bit-signed-accelerated ~s~:@_:integer-dot-product-8-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-4x-8-bit-packed-unsigned-accelerated ~s~:@_:integer-dot-product-4x-8-bit-packed-signed-accelerated ~s~:@_:integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated ~s~:@_:integer-dot-product-16-bit-unsigned-accelerated ~s~:@_:integer-dot-product-16-bit-signed-accelerated ~s~:@_:integer-dot-product-16-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-32-bit-unsigned-accelerated ~s~:@_:integer-dot-product-32-bit-signed-accelerated ~s~:@_:integer-dot-product-32-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-64-bit-unsigned-accelerated ~s~:@_:integer-dot-product-64-bit-signed-accelerated ~s~:@_:integer-dot-product-64-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-8-bit-signed-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-16-bit-signed-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-32-bit-signed-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-64-bit-signed-accelerated ~s~:@_:integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated ~s~:>)"
               next 
               integer-dot-product-8-bit-unsigned-accelerated 
               integer-dot-product-8-bit-signed-accelerated 
               integer-dot-product-8-bit-mixed-signedness-accelerated 
               integer-dot-product-4x-8-bit-packed-unsigned-accelerated 
               integer-dot-product-4x-8-bit-packed-signed-accelerated 
               integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated 
               integer-dot-product-16-bit-unsigned-accelerated 
               integer-dot-product-16-bit-signed-accelerated 
               integer-dot-product-16-bit-mixed-signedness-accelerated 
               integer-dot-product-32-bit-unsigned-accelerated 
               integer-dot-product-32-bit-signed-accelerated 
               integer-dot-product-32-bit-mixed-signedness-accelerated 
               integer-dot-product-64-bit-unsigned-accelerated 
               integer-dot-product-64-bit-signed-accelerated 
               integer-dot-product-64-bit-mixed-signedness-accelerated 
               integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated 
               integer-dot-product-accumulating-saturating-8-bit-signed-accelerated 
               integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated 
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated 
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated 
               integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated 
               integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated 
               integer-dot-product-accumulating-saturating-16-bit-signed-accelerated 
               integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated 
               integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated 
               integer-dot-product-accumulating-saturating-32-bit-signed-accelerated 
               integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated 
               integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated 
               integer-dot-product-accumulating-saturating-64-bit-signed-accelerated 
               integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated)))

(defmethod print-object ((obj physical-device-drm-properties-ext) out)
  (with-slots (next
               has-primary
               has-render
               primary-major
               primary-minor
               render-major
               render-minor)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DRM-PROPERTIES-EXT~:@_:next ~s~:@_:has-primary ~s~:@_:has-render ~s~:@_:primary-major ~s~:@_:primary-minor ~s~:@_:render-major ~s~:@_:render-minor ~s~:>)"
               next 
               has-primary 
               has-render 
               primary-major 
               primary-minor 
               render-major 
               render-minor)))

(defmethod print-object ((obj physical-device-ray-tracing-motion-blur-features-nv) out)
  (with-slots (next
               ray-tracing-motion-blur
               ray-tracing-motion-blur-pipeline-trace-rays-indirect)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-RAY-TRACING-MOTION-BLUR-FEATURES-NV~:@_:next ~s~:@_:ray-tracing-motion-blur ~s~:@_:ray-tracing-motion-blur-pipeline-trace-rays-indirect ~s~:>)"
               next 
               ray-tracing-motion-blur 
               ray-tracing-motion-blur-pipeline-trace-rays-indirect)))

(defmethod print-object ((obj acceleration-structure-geometry-motion-triangles-data-nv) out)
  (with-slots (next
               vertex-data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-GEOMETRY-MOTION-TRIANGLES-DATA-NV~:@_:next ~s~:@_:vertex-data ~s~:>)"
               next 
               vertex-data)))

(defmethod print-object ((obj acceleration-structure-motion-info-nv) out)
  (with-slots (next
               max-instances
               flags)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-MOTION-INFO-NV~:@_:next ~s~:@_:max-instances ~s~:@_:flags ~s~:>)"
               next 
               max-instances 
               flags)))

(defmethod print-object ((obj srt-data-nv) out)
  (with-slots (sx
               a
               b
               pvx
               sy
               c
               pvy
               sz
               pvz
               qx
               qy
               qz
               qw
               tx
               ty
               tz)
      obj
    (cl:format out "~i(~@<SRT-DATA-NV~:@_:sx ~s~:@_:a ~s~:@_:b ~s~:@_:pvx ~s~:@_:sy ~s~:@_:c ~s~:@_:pvy ~s~:@_:sz ~s~:@_:pvz ~s~:@_:qx ~s~:@_:qy ~s~:@_:qz ~s~:@_:qw ~s~:@_:tx ~s~:@_:ty ~s~:@_:tz ~s~:>)"
               sx 
               a 
               b 
               pvx 
               sy 
               c 
               pvy 
               sz 
               pvz 
               qx 
               qy 
               qz 
               qw 
               tx 
               ty 
               tz)))

(defmethod print-object ((obj acceleration-structure-srt-motion-instance-nv) out)
  (with-slots (transform-t-0
               transform-t-1
               instance-custom-index
               mask
               instance-shader-binding-table-record-offset
               flags
               acceleration-structure-reference)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-SRT-MOTION-INSTANCE-NV~:@_:transform-t-0 ~s~:@_:transform-t-1 ~s~:@_:instance-custom-index ~s~:@_:mask ~s~:@_:instance-shader-binding-table-record-offset ~s~:@_:flags ~s~:@_:acceleration-structure-reference ~s~:>)"
               transform-t-0 
               transform-t-1 
               instance-custom-index 
               mask 
               instance-shader-binding-table-record-offset 
               flags 
               acceleration-structure-reference)))

(defmethod print-object ((obj acceleration-structure-matrix-motion-instance-nv) out)
  (with-slots (transform-t-0
               transform-t-1
               instance-custom-index
               mask
               instance-shader-binding-table-record-offset
               flags
               acceleration-structure-reference)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-MATRIX-MOTION-INSTANCE-NV~:@_:transform-t-0 ~s~:@_:transform-t-1 ~s~:@_:instance-custom-index ~s~:@_:mask ~s~:@_:instance-shader-binding-table-record-offset ~s~:@_:flags ~s~:@_:acceleration-structure-reference ~s~:>)"
               transform-t-0 
               transform-t-1 
               instance-custom-index 
               mask 
               instance-shader-binding-table-record-offset 
               flags 
               acceleration-structure-reference)))

(defmethod print-object ((obj acceleration-structure-motion-instance-data-nv) out)
  (with-slots (static-instance
               matrix-motion-instance
               srt-motion-instance)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-MOTION-INSTANCE-DATA-NV~:@_:static-instance ~s~:@_:matrix-motion-instance ~s~:@_:srt-motion-instance ~s~:>)"
               static-instance 
               matrix-motion-instance 
               srt-motion-instance)))

(defmethod print-object ((obj acceleration-structure-motion-instance-nv) out)
  (with-slots (type
               flags
               data)
      obj
    (cl:format out "~i(~@<ACCELERATION-STRUCTURE-MOTION-INSTANCE-NV~:@_:type ~s~:@_:flags ~s~:@_:data ~s~:>)"
               type 
               flags 
               data)))

(defmethod print-object ((obj memory-get-remote-address-info-nv) out)
  (with-slots (next
               memory
               handle-type)
      obj
    (cl:format out "~i(~@<MEMORY-GET-REMOTE-ADDRESS-INFO-NV~:@_:next ~s~:@_:memory ~s~:@_:handle-type ~s~:>)"
               next 
               memory 
               handle-type)))

(defmethod print-object ((obj import-memory-buffer-collection-fuchsia) out)
  (with-slots (next
               collection
               index)
      obj
    (cl:format out "~i(~@<IMPORT-MEMORY-BUFFER-COLLECTION-FUCHSIA~:@_:next ~s~:@_:collection ~s~:@_:index ~s~:>)"
               next 
               collection 
               index)))

(defmethod print-object ((obj buffer-collection-image-create-info-fuchsia) out)
  (with-slots (next
               collection
               index)
      obj
    (cl:format out "~i(~@<BUFFER-COLLECTION-IMAGE-CREATE-INFO-FUCHSIA~:@_:next ~s~:@_:collection ~s~:@_:index ~s~:>)"
               next 
               collection 
               index)))

(defmethod print-object ((obj buffer-collection-buffer-create-info-fuchsia) out)
  (with-slots (next
               collection
               index)
      obj
    (cl:format out "~i(~@<BUFFER-COLLECTION-BUFFER-CREATE-INFO-FUCHSIA~:@_:next ~s~:@_:collection ~s~:@_:index ~s~:>)"
               next 
               collection 
               index)))

(defmethod print-object ((obj buffer-collection-create-info-fuchsia) out)
  (with-slots (next
               collection-token)
      obj
    (cl:format out "~i(~@<BUFFER-COLLECTION-CREATE-INFO-FUCHSIA~:@_:next ~s~:@_:collection-token ~s~:>)"
               next 
               collection-token)))

(defmethod print-object ((obj buffer-collection-properties-fuchsia) out)
  (with-slots (next
               memory-type-bits
               buffer-count
               create-info-index
               sysmem-pixel-format
               format-features
               sysmem-color-space-index
               sampler-ycbcr-conversion-components
               suggested-ycbcr-model
               suggested-ycbcr-range
               suggested-x-chroma-offset
               suggested-y-chroma-offset)
      obj
    (cl:format out "~i(~@<BUFFER-COLLECTION-PROPERTIES-FUCHSIA~:@_:next ~s~:@_:memory-type-bits ~s~:@_:buffer-count ~s~:@_:create-info-index ~s~:@_:sysmem-pixel-format ~s~:@_:format-features ~s~:@_:sysmem-color-space-index ~s~:@_:sampler-ycbcr-conversion-components ~s~:@_:suggested-ycbcr-model ~s~:@_:suggested-ycbcr-range ~s~:@_:suggested-x-chroma-offset ~s~:@_:suggested-y-chroma-offset ~s~:>)"
               next 
               memory-type-bits 
               buffer-count 
               create-info-index 
               sysmem-pixel-format 
               format-features 
               sysmem-color-space-index 
               sampler-ycbcr-conversion-components 
               suggested-ycbcr-model 
               suggested-ycbcr-range 
               suggested-x-chroma-offset 
               suggested-y-chroma-offset)))

(defmethod print-object ((obj buffer-constraints-info-fuchsia) out)
  (with-slots (next
               create-info
               required-format-features
               buffer-collection-constraints)
      obj
    (cl:format out "~i(~@<BUFFER-CONSTRAINTS-INFO-FUCHSIA~:@_:next ~s~:@_:create-info ~s~:@_:required-format-features ~s~:@_:buffer-collection-constraints ~s~:>)"
               next 
               create-info 
               required-format-features 
               buffer-collection-constraints)))

(defmethod print-object ((obj sysmem-color-space-fuchsia) out)
  (with-slots (next
               color-space)
      obj
    (cl:format out "~i(~@<SYSMEM-COLOR-SPACE-FUCHSIA~:@_:next ~s~:@_:color-space ~s~:>)"
               next 
               color-space)))

(defmethod print-object ((obj image-format-constraints-info-fuchsia) out)
  (with-slots (next
               image-create-info
               required-format-features
               flags
               sysmem-pixel-format
               color-space-count
               color-spaces)
      obj
    (cl:format out "~i(~@<IMAGE-FORMAT-CONSTRAINTS-INFO-FUCHSIA~:@_:next ~s~:@_:image-create-info ~s~:@_:required-format-features ~s~:@_:flags ~s~:@_:sysmem-pixel-format ~s~:@_:color-space-count ~s~:@_:color-spaces ~s~:>)"
               next 
               image-create-info 
               required-format-features 
               flags 
               sysmem-pixel-format 
               color-space-count 
               color-spaces)))

(defmethod print-object ((obj image-constraints-info-fuchsia) out)
  (with-slots (next
               format-constraints
               buffer-collection-constraints
               flags)
      obj
    (cl:format out "~i(~@<IMAGE-CONSTRAINTS-INFO-FUCHSIA~:@_:next ~s~:@_:format-constraints ~s~:@_:buffer-collection-constraints ~s~:@_:flags ~s~:>)"
               next 
               format-constraints 
               buffer-collection-constraints 
               flags)))

(defmethod print-object ((obj buffer-collection-constraints-info-fuchsia) out)
  (with-slots (next
               min-buffer-count
               max-buffer-count
               min-buffer-count-for-camping
               min-buffer-count-for-dedicated-slack
               min-buffer-count-for-shared-slack)
      obj
    (cl:format out "~i(~@<BUFFER-COLLECTION-CONSTRAINTS-INFO-FUCHSIA~:@_:next ~s~:@_:min-buffer-count ~s~:@_:max-buffer-count ~s~:@_:min-buffer-count-for-camping ~s~:@_:min-buffer-count-for-dedicated-slack ~s~:@_:min-buffer-count-for-shared-slack ~s~:>)"
               next 
               min-buffer-count 
               max-buffer-count 
               min-buffer-count-for-camping 
               min-buffer-count-for-dedicated-slack 
               min-buffer-count-for-shared-slack)))

(defmethod print-object ((obj physical-device-r-g-b-a-1-0-x-6-formats-features-ext) out)
  (with-slots (next
               format-rgba-1-0x-6-without-y-cb-cr-sampler)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-R-G-B-A-1-0-X-6-FORMATS-FEATURES-EXT~:@_:next ~s~:@_:format-rgba-1-0x-6-without-y-cb-cr-sampler ~s~:>)"
               next 
               format-rgba-1-0x-6-without-y-cb-cr-sampler)))

(defmethod print-object ((obj format-properties-3-khr) out)
  (with-slots (next
               linear-tiling-features
               optimal-tiling-features
               buffer-features)
      obj
    (cl:format out "~i(~@<FORMAT-PROPERTIES-3-KHR~:@_:next ~s~:@_:linear-tiling-features ~s~:@_:optimal-tiling-features ~s~:@_:buffer-features ~s~:>)"
               next 
               linear-tiling-features 
               optimal-tiling-features 
               buffer-features)))

(defmethod print-object ((obj drm-format-modifier-properties-list-2-ext) out)
  (with-slots (next
               drm-format-modifier-properties)
      obj
    (cl:format out "~i(~@<DRM-FORMAT-MODIFIER-PROPERTIES-LIST-2-EXT~:@_:next ~s~:@_:drm-format-modifier-properties ~s~:>)"
               next 
               drm-format-modifier-properties)))

(defmethod print-object ((obj drm-format-modifier-properties-2-ext) out)
  (with-slots (drm-format-modifier
               drm-format-modifier-plane-count
               drm-format-modifier-tiling-features)
      obj
    (cl:format out "~i(~@<DRM-FORMAT-MODIFIER-PROPERTIES-2-EXT~:@_:drm-format-modifier ~s~:@_:drm-format-modifier-plane-count ~s~:@_:drm-format-modifier-tiling-features ~s~:>)"
               drm-format-modifier 
               drm-format-modifier-plane-count 
               drm-format-modifier-tiling-features)))

(defmethod print-object ((obj android-hardware-buffer-format-properties-2-android) out)
  (with-slots (next
               format
               external-format
               format-features
               sampler-ycbcr-conversion-components
               suggested-ycbcr-model
               suggested-ycbcr-range
               suggested-x-chroma-offset
               suggested-y-chroma-offset)
      obj
    (cl:format out "~i(~@<ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-2-ANDROID~:@_:next ~s~:@_:format ~s~:@_:external-format ~s~:@_:format-features ~s~:@_:sampler-ycbcr-conversion-components ~s~:@_:suggested-ycbcr-model ~s~:@_:suggested-ycbcr-range ~s~:@_:suggested-x-chroma-offset ~s~:@_:suggested-y-chroma-offset ~s~:>)"
               next 
               format 
               external-format 
               format-features 
               sampler-ycbcr-conversion-components 
               suggested-ycbcr-model 
               suggested-ycbcr-range 
               suggested-x-chroma-offset 
               suggested-y-chroma-offset)))

(defmethod print-object ((obj pipeline-rendering-create-info-khr) out)
  (with-slots (next
               view-mask
               color-attachment-formats
               depth-attachment-format
               stencil-attachment-format)
      obj
    (cl:format out "~i(~@<PIPELINE-RENDERING-CREATE-INFO-KHR~:@_:next ~s~:@_:view-mask ~s~:@_:color-attachment-formats ~s~:@_:depth-attachment-format ~s~:@_:stencil-attachment-format ~s~:>)"
               next 
               view-mask 
               color-attachment-formats 
               depth-attachment-format 
               stencil-attachment-format)))

(defmethod print-object ((obj rendering-info-khr) out)
  (with-slots (next
               flags
               render-area
               layer-count
               view-mask
               color-attachments
               depth-attachment
               stencil-attachment)
      obj
    (cl:format out "~i(~@<RENDERING-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:render-area ~s~:@_:layer-count ~s~:@_:view-mask ~s~:@_:color-attachments ~s~:@_:depth-attachment ~s~:@_:stencil-attachment ~s~:>)"
               next 
               flags 
               render-area 
               layer-count 
               view-mask 
               color-attachments 
               depth-attachment 
               stencil-attachment)))

(defmethod print-object ((obj rendering-attachment-info-khr) out)
  (with-slots (next
               image-view
               image-layout
               resolve-mode
               resolve-image-view
               resolve-image-layout
               load-op
               store-op
               clear-value)
      obj
    (cl:format out "~i(~@<RENDERING-ATTACHMENT-INFO-KHR~:@_:next ~s~:@_:image-view ~s~:@_:image-layout ~s~:@_:resolve-mode ~s~:@_:resolve-image-view ~s~:@_:resolve-image-layout ~s~:@_:load-op ~s~:@_:store-op ~s~:@_:clear-value ~s~:>)"
               next 
               image-view 
               image-layout 
               resolve-mode 
               resolve-image-view 
               resolve-image-layout 
               load-op 
               store-op 
               clear-value)))

(defmethod print-object ((obj rendering-fragment-shading-rate-attachment-info-khr) out)
  (with-slots (next
               image-view
               image-layout
               shading-rate-attachment-texel-size)
      obj
    (cl:format out "~i(~@<RENDERING-FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR~:@_:next ~s~:@_:image-view ~s~:@_:image-layout ~s~:@_:shading-rate-attachment-texel-size ~s~:>)"
               next 
               image-view 
               image-layout 
               shading-rate-attachment-texel-size)))

(defmethod print-object ((obj rendering-fragment-density-map-attachment-info-ext) out)
  (with-slots (next
               image-view
               image-layout)
      obj
    (cl:format out "~i(~@<RENDERING-FRAGMENT-DENSITY-MAP-ATTACHMENT-INFO-EXT~:@_:next ~s~:@_:image-view ~s~:@_:image-layout ~s~:>)"
               next 
               image-view 
               image-layout)))

(defmethod print-object ((obj physical-device-dynamic-rendering-features-khr) out)
  (with-slots (next
               dynamic-rendering)
      obj
    (cl:format out "~i(~@<PHYSICAL-DEVICE-DYNAMIC-RENDERING-FEATURES-KHR~:@_:next ~s~:@_:dynamic-rendering ~s~:>)"
               next 
               dynamic-rendering)))

(defmethod print-object ((obj command-buffer-inheritance-rendering-info-khr) out)
  (with-slots (next
               flags
               view-mask
               color-attachment-formats
               depth-attachment-format
               stencil-attachment-format
               rasterization-samples)
      obj
    (cl:format out "~i(~@<COMMAND-BUFFER-INHERITANCE-RENDERING-INFO-KHR~:@_:next ~s~:@_:flags ~s~:@_:view-mask ~s~:@_:color-attachment-formats ~s~:@_:depth-attachment-format ~s~:@_:stencil-attachment-format ~s~:@_:rasterization-samples ~s~:>)"
               next 
               flags 
               view-mask 
               color-attachment-formats 
               depth-attachment-format 
               stencil-attachment-format 
               rasterization-samples)))

(defmethod print-object ((obj attachment-sample-count-info-amd) out)
  (with-slots (next
               color-attachment-samples
               depth-stencil-attachment-samples)
      obj
    (cl:format out "~i(~@<ATTACHMENT-SAMPLE-COUNT-INFO-AMD~:@_:next ~s~:@_:color-attachment-samples ~s~:@_:depth-stencil-attachment-samples ~s~:>)"
               next 
               color-attachment-samples 
               depth-stencil-attachment-samples)))

(defmethod print-object ((obj multiview-per-view-attributes-info-nvx) out)
  (with-slots (next
               per-view-attributes
               per-view-attributes-position-x-only)
      obj
    (cl:format out "~i(~@<MULTIVIEW-PER-VIEW-ATTRIBUTES-INFO-NVX~:@_:next ~s~:@_:per-view-attributes ~s~:@_:per-view-attributes-position-x-only ~s~:>)"
               next 
               per-view-attributes 
               per-view-attributes-position-x-only)))

