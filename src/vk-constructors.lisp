;;; this file is automatically generated, do not edit

(in-package :vk)


(defun make-base-out-structure (&key (s-type nil) (next nil))
"Creates an instance of BASE-OUT-STRUCTURE.
The arguments of this function correspond to the slots of BASE-OUT-STRUCTURE.


See BASE-OUT-STRUCTURE"
  (make-instance 'vk:base-out-structure 
                 :s-type s-type
                 :next next))

(defun make-base-in-structure (&key (s-type nil) (next nil))
"Creates an instance of BASE-IN-STRUCTURE.
The arguments of this function correspond to the slots of BASE-IN-STRUCTURE.


See BASE-IN-STRUCTURE"
  (make-instance 'vk:base-in-structure 
                 :s-type s-type
                 :next next))

(defun make-offset-2d (&key (x 0) (y 0))
"Creates an instance of OFFSET-2D.
The arguments of this function correspond to the slots of OFFSET-2D.


See OFFSET-2D"
  (make-instance 'vk:offset-2d 
                 :x x
                 :y y))

(defun make-offset-3d (&key (x 0) (y 0) (z 0))
"Creates an instance of OFFSET-3D.
The arguments of this function correspond to the slots of OFFSET-3D.


See OFFSET-3D"
  (make-instance 'vk:offset-3d 
                 :x x
                 :y y
                 :z z))

(defun make-extent-2d (&key (width 0) (height 0))
"Creates an instance of EXTENT-2D.
The arguments of this function correspond to the slots of EXTENT-2D.


See EXTENT-2D"
  (make-instance 'vk:extent-2d 
                 :width width
                 :height height))

(defun make-extent-3d (&key (width 0) (height 0) (depth 0))
"Creates an instance of EXTENT-3D.
The arguments of this function correspond to the slots of EXTENT-3D.


See EXTENT-3D"
  (make-instance 'vk:extent-3d 
                 :width width
                 :height height
                 :depth depth))

(defun make-viewport (&key (x 0.0) (y 0.0) (width 0.0) (height 0.0)
                      (min-depth 0.0) (max-depth 0.0))
"Creates an instance of VIEWPORT.
The arguments of this function correspond to the slots of VIEWPORT.


See VIEWPORT"
  (make-instance 'vk:viewport 
                 :x x
                 :y y
                 :width width
                 :height height
                 :min-depth min-depth
                 :max-depth max-depth))

(defun make-rect-2d (&key (offset (vk:make-offset-2d))
                     (extent (vk:make-extent-2d)))
"Creates an instance of RECT-2D.
The arguments of this function correspond to the slots of RECT-2D.


See RECT-2D"
  (make-instance 'vk:rect-2d 
                 :offset offset
                 :extent extent))

(defun make-clear-rect (&key (rect (vk:make-rect-2d)) (base-array-layer 0)
                        (layer-count 0))
"Creates an instance of CLEAR-RECT.
The arguments of this function correspond to the slots of CLEAR-RECT.


See CLEAR-RECT"
  (make-instance 'vk:clear-rect 
                 :rect rect
                 :base-array-layer base-array-layer
                 :layer-count layer-count))

(defun make-component-mapping (&key (r nil) (g nil) (b nil) (a nil))
"Creates an instance of COMPONENT-MAPPING.
The arguments of this function correspond to the slots of COMPONENT-MAPPING.


See COMPONENT-MAPPING"
  (make-instance 'vk:component-mapping 
                 :r r
                 :g g
                 :b b
                 :a a))

(defun make-physical-device-properties (&key (api-version 0) (driver-version 0)
                                        (vendor-id 0) (device-id 0)
                                        (device-type nil) (device-name "")
                                        (pipeline-cache-uuid 0) (limits nil)
                                        (sparse-properties nil))
"Creates an instance of PHYSICAL-DEVICE-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROPERTIES.


See PHYSICAL-DEVICE-PROPERTIES"
  (make-instance 'vk:physical-device-properties 
                 :api-version api-version
                 :driver-version driver-version
                 :vendor-id vendor-id
                 :device-id device-id
                 :device-type device-type
                 :device-name device-name
                 :pipeline-cache-uuid pipeline-cache-uuid
                 :limits limits
                 :sparse-properties sparse-properties))

(defun make-extension-properties (&key (extension-name "") (spec-version 0))
"Creates an instance of EXTENSION-PROPERTIES.
The arguments of this function correspond to the slots of EXTENSION-PROPERTIES.


See EXTENSION-PROPERTIES"
  (make-instance 'vk:extension-properties 
                 :extension-name extension-name
                 :spec-version spec-version))

(defun make-layer-properties (&key (layer-name "") (spec-version 0)
                              (implementation-version 0) (description ""))
"Creates an instance of LAYER-PROPERTIES.
The arguments of this function correspond to the slots of LAYER-PROPERTIES.


See LAYER-PROPERTIES"
  (make-instance 'vk:layer-properties 
                 :layer-name layer-name
                 :spec-version spec-version
                 :implementation-version implementation-version
                 :description description))

(defun make-application-info (&key (next nil) (application-name "")
                              (application-version 0) (engine-name "")
                              (engine-version 0) (api-version 0))
"Creates an instance of APPLICATION-INFO.
The arguments of this function correspond to the slots of APPLICATION-INFO.


See APPLICATION-INFO"
  (make-instance 'vk:application-info 
                 :next next
                 :application-name application-name
                 :application-version application-version
                 :engine-name engine-name
                 :engine-version engine-version
                 :api-version api-version))

(defun make-allocation-callbacks (&key (user-data nil) (pfn-allocation nil)
                                  (pfn-reallocation nil) (pfn-free nil)
                                  (pfn-internal-allocation nil)
                                  (pfn-internal-free nil))
"Creates an instance of ALLOCATION-CALLBACKS.
The arguments of this function correspond to the slots of ALLOCATION-CALLBACKS.


See ALLOCATION-CALLBACKS"
  (make-instance 'vk:allocation-callbacks 
                 :user-data user-data
                 :pfn-allocation pfn-allocation
                 :pfn-reallocation pfn-reallocation
                 :pfn-free pfn-free
                 :pfn-internal-allocation pfn-internal-allocation
                 :pfn-internal-free pfn-internal-free))

(defun make-device-queue-create-info (&key (next nil) (flags nil)
                                      (queue-family-index 0)
                                      (queue-priorities nil))
"Creates an instance of DEVICE-QUEUE-CREATE-INFO.
The arguments of this function correspond to the slots of DEVICE-QUEUE-CREATE-INFO.


See DEVICE-QUEUE-CREATE-INFO"
  (make-instance 'vk:device-queue-create-info 
                 :next next
                 :flags flags
                 :queue-family-index queue-family-index
                 :queue-priorities queue-priorities))

(defun make-device-create-info (&key (next nil) (flags nil)
                                (queue-create-infos nil)
                                (enabled-layer-names nil)
                                (enabled-extension-names nil)
                                (enabled-features nil))
"Creates an instance of DEVICE-CREATE-INFO.
The arguments of this function correspond to the slots of DEVICE-CREATE-INFO.


See DEVICE-CREATE-INFO"
  (make-instance 'vk:device-create-info 
                 :next next
                 :flags flags
                 :queue-create-infos queue-create-infos
                 :enabled-layer-names enabled-layer-names
                 :enabled-extension-names enabled-extension-names
                 :enabled-features enabled-features))

(defun make-instance-create-info (&key (next nil) (flags nil)
                                  (application-info nil)
                                  (enabled-layer-names nil)
                                  (enabled-extension-names nil))
"Creates an instance of INSTANCE-CREATE-INFO.
The arguments of this function correspond to the slots of INSTANCE-CREATE-INFO.


See INSTANCE-CREATE-INFO"
  (make-instance 'vk:instance-create-info 
                 :next next
                 :flags flags
                 :application-info application-info
                 :enabled-layer-names enabled-layer-names
                 :enabled-extension-names enabled-extension-names))

(defun make-queue-family-properties (&key (queue-flags nil) (queue-count 0)
                                     (timestamp-valid-bits 0)
                                     (min-image-transfer-granularity (vk:make-extent-3d)))
"Creates an instance of QUEUE-FAMILY-PROPERTIES.
The arguments of this function correspond to the slots of QUEUE-FAMILY-PROPERTIES.


See QUEUE-FAMILY-PROPERTIES"
  (make-instance 'vk:queue-family-properties 
                 :queue-flags queue-flags
                 :queue-count queue-count
                 :timestamp-valid-bits timestamp-valid-bits
                 :min-image-transfer-granularity min-image-transfer-granularity))

(defun make-physical-device-memory-properties (&key (memory-type-count 0)
                                               (memory-types nil)
                                               (memory-heap-count 0)
                                               (memory-heaps nil))
"Creates an instance of PHYSICAL-DEVICE-MEMORY-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MEMORY-PROPERTIES.


See PHYSICAL-DEVICE-MEMORY-PROPERTIES"
  (make-instance 'vk:physical-device-memory-properties 
                 :memory-type-count memory-type-count
                 :memory-types memory-types
                 :memory-heap-count memory-heap-count
                 :memory-heaps memory-heaps))

(defun make-memory-allocate-info (&key (next nil) (allocation-size 0)
                                  (memory-type-index 0))
"Creates an instance of MEMORY-ALLOCATE-INFO.
The arguments of this function correspond to the slots of MEMORY-ALLOCATE-INFO.


See MEMORY-ALLOCATE-INFO"
  (make-instance 'vk:memory-allocate-info 
                 :next next
                 :allocation-size allocation-size
                 :memory-type-index memory-type-index))

(defun make-memory-requirements (&key (size 0) (alignment 0)
                                 (memory-type-bits 0))
"Creates an instance of MEMORY-REQUIREMENTS.
The arguments of this function correspond to the slots of MEMORY-REQUIREMENTS.


See MEMORY-REQUIREMENTS"
  (make-instance 'vk:memory-requirements 
                 :size size
                 :alignment alignment
                 :memory-type-bits memory-type-bits))

(defun make-sparse-image-format-properties (&key (aspect-mask nil)
                                            (image-granularity (vk:make-extent-3d))
                                            (flags nil))
"Creates an instance of SPARSE-IMAGE-FORMAT-PROPERTIES.
The arguments of this function correspond to the slots of SPARSE-IMAGE-FORMAT-PROPERTIES.


See SPARSE-IMAGE-FORMAT-PROPERTIES"
  (make-instance 'vk:sparse-image-format-properties 
                 :aspect-mask aspect-mask
                 :image-granularity image-granularity
                 :flags flags))

(defun make-sparse-image-memory-requirements (&key (format-properties nil)
                                              (image-mip-tail-first-lod 0)
                                              (image-mip-tail-size 0)
                                              (image-mip-tail-offset 0)
                                              (image-mip-tail-stride 0))
"Creates an instance of SPARSE-IMAGE-MEMORY-REQUIREMENTS.
The arguments of this function correspond to the slots of SPARSE-IMAGE-MEMORY-REQUIREMENTS.


See SPARSE-IMAGE-MEMORY-REQUIREMENTS"
  (make-instance 'vk:sparse-image-memory-requirements 
                 :format-properties format-properties
                 :image-mip-tail-first-lod image-mip-tail-first-lod
                 :image-mip-tail-size image-mip-tail-size
                 :image-mip-tail-offset image-mip-tail-offset
                 :image-mip-tail-stride image-mip-tail-stride))

(defun make-memory-type (&key (property-flags nil) (heap-index 0))
"Creates an instance of MEMORY-TYPE.
The arguments of this function correspond to the slots of MEMORY-TYPE.


See MEMORY-TYPE"
  (make-instance 'vk:memory-type 
                 :property-flags property-flags
                 :heap-index heap-index))

(defun make-memory-heap (&key (size 0) (flags nil))
"Creates an instance of MEMORY-HEAP.
The arguments of this function correspond to the slots of MEMORY-HEAP.


See MEMORY-HEAP"
  (make-instance 'vk:memory-heap 
                 :size size
                 :flags flags))

(defun make-mapped-memory-range (&key (next nil) (memory nil) (offset 0)
                                 (size 0))
"Creates an instance of MAPPED-MEMORY-RANGE.
The arguments of this function correspond to the slots of MAPPED-MEMORY-RANGE.


See MAPPED-MEMORY-RANGE"
  (make-instance 'vk:mapped-memory-range 
                 :next next
                 :memory memory
                 :offset offset
                 :size size))

(defun make-format-properties (&key (linear-tiling-features nil)
                               (optimal-tiling-features nil)
                               (buffer-features nil))
"Creates an instance of FORMAT-PROPERTIES.
The arguments of this function correspond to the slots of FORMAT-PROPERTIES.


See FORMAT-PROPERTIES"
  (make-instance 'vk:format-properties 
                 :linear-tiling-features linear-tiling-features
                 :optimal-tiling-features optimal-tiling-features
                 :buffer-features buffer-features))

(defun make-image-format-properties (&key (max-extent (vk:make-extent-3d))
                                     (max-mip-levels 0) (max-array-layers 0)
                                     (sample-counts nil) (max-resource-size 0))
"Creates an instance of IMAGE-FORMAT-PROPERTIES.
The arguments of this function correspond to the slots of IMAGE-FORMAT-PROPERTIES.


See IMAGE-FORMAT-PROPERTIES"
  (make-instance 'vk:image-format-properties 
                 :max-extent max-extent
                 :max-mip-levels max-mip-levels
                 :max-array-layers max-array-layers
                 :sample-counts sample-counts
                 :max-resource-size max-resource-size))

(defun make-descriptor-buffer-info (&key (buffer nil) (offset 0) (range 0))
"Creates an instance of DESCRIPTOR-BUFFER-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-BUFFER-INFO.


See DESCRIPTOR-BUFFER-INFO"
  (make-instance 'vk:descriptor-buffer-info 
                 :buffer buffer
                 :offset offset
                 :range range))

(defun make-descriptor-image-info (&key (sampler nil) (image-view nil)
                                   (image-layout nil))
"Creates an instance of DESCRIPTOR-IMAGE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-IMAGE-INFO.


See DESCRIPTOR-IMAGE-INFO"
  (make-instance 'vk:descriptor-image-info 
                 :sampler sampler
                 :image-view image-view
                 :image-layout image-layout))

(defun make-write-descriptor-set (&key (next nil) (dst-set nil) (dst-binding 0)
                                  (dst-array-element 0) (descriptor-type nil)
                                  (image-info nil) (buffer-info nil)
                                  (texel-buffer-view nil))
"Creates an instance of WRITE-DESCRIPTOR-SET.
The arguments of this function correspond to the slots of WRITE-DESCRIPTOR-SET.


See WRITE-DESCRIPTOR-SET"
  (make-instance 'vk:write-descriptor-set 
                 :next next
                 :dst-set dst-set
                 :dst-binding dst-binding
                 :dst-array-element dst-array-element
                 :descriptor-type descriptor-type
                 :image-info image-info
                 :buffer-info buffer-info
                 :texel-buffer-view texel-buffer-view))

(defun make-copy-descriptor-set (&key (next nil) (src-set nil) (src-binding 0)
                                 (src-array-element 0) (dst-set nil)
                                 (dst-binding 0) (dst-array-element 0)
                                 (descriptor-count 0))
"Creates an instance of COPY-DESCRIPTOR-SET.
The arguments of this function correspond to the slots of COPY-DESCRIPTOR-SET.


See COPY-DESCRIPTOR-SET"
  (make-instance 'vk:copy-descriptor-set 
                 :next next
                 :src-set src-set
                 :src-binding src-binding
                 :src-array-element src-array-element
                 :dst-set dst-set
                 :dst-binding dst-binding
                 :dst-array-element dst-array-element
                 :descriptor-count descriptor-count))

(defun make-buffer-create-info (&key (next nil) (flags nil) (size 0)
                                (usage nil) (sharing-mode nil)
                                (queue-family-indices nil))
"Creates an instance of BUFFER-CREATE-INFO.
The arguments of this function correspond to the slots of BUFFER-CREATE-INFO.


See BUFFER-CREATE-INFO"
  (make-instance 'vk:buffer-create-info 
                 :next next
                 :flags flags
                 :size size
                 :usage usage
                 :sharing-mode sharing-mode
                 :queue-family-indices queue-family-indices))

(defun make-buffer-view-create-info (&key (next nil) (flags nil) (buffer nil)
                                     (format nil) (offset 0) (range 0))
"Creates an instance of BUFFER-VIEW-CREATE-INFO.
The arguments of this function correspond to the slots of BUFFER-VIEW-CREATE-INFO.


See BUFFER-VIEW-CREATE-INFO"
  (make-instance 'vk:buffer-view-create-info 
                 :next next
                 :flags flags
                 :buffer buffer
                 :format format
                 :offset offset
                 :range range))

(defun make-image-subresource (&key (aspect-mask nil) (mip-level 0)
                               (array-layer 0))
"Creates an instance of IMAGE-SUBRESOURCE.
The arguments of this function correspond to the slots of IMAGE-SUBRESOURCE.


See IMAGE-SUBRESOURCE"
  (make-instance 'vk:image-subresource 
                 :aspect-mask aspect-mask
                 :mip-level mip-level
                 :array-layer array-layer))

(defun make-image-subresource-layers (&key (aspect-mask nil) (mip-level 0)
                                      (base-array-layer 0) (layer-count 0))
"Creates an instance of IMAGE-SUBRESOURCE-LAYERS.
The arguments of this function correspond to the slots of IMAGE-SUBRESOURCE-LAYERS.


See IMAGE-SUBRESOURCE-LAYERS"
  (make-instance 'vk:image-subresource-layers 
                 :aspect-mask aspect-mask
                 :mip-level mip-level
                 :base-array-layer base-array-layer
                 :layer-count layer-count))

(defun make-image-subresource-range (&key (aspect-mask nil) (base-mip-level 0)
                                     (level-count 0) (base-array-layer 0)
                                     (layer-count 0))
"Creates an instance of IMAGE-SUBRESOURCE-RANGE.
The arguments of this function correspond to the slots of IMAGE-SUBRESOURCE-RANGE.


See IMAGE-SUBRESOURCE-RANGE"
  (make-instance 'vk:image-subresource-range 
                 :aspect-mask aspect-mask
                 :base-mip-level base-mip-level
                 :level-count level-count
                 :base-array-layer base-array-layer
                 :layer-count layer-count))

(defun make-memory-barrier (&key (next nil) (src-access-mask nil)
                            (dst-access-mask nil))
"Creates an instance of MEMORY-BARRIER.
The arguments of this function correspond to the slots of MEMORY-BARRIER.


See MEMORY-BARRIER"
  (make-instance 'vk:memory-barrier 
                 :next next
                 :src-access-mask src-access-mask
                 :dst-access-mask dst-access-mask))

(defun make-buffer-memory-barrier (&key (next nil) (src-access-mask nil)
                                   (dst-access-mask nil)
                                   (src-queue-family-index 0)
                                   (dst-queue-family-index 0) (buffer nil)
                                   (offset 0) (size 0))
"Creates an instance of BUFFER-MEMORY-BARRIER.
The arguments of this function correspond to the slots of BUFFER-MEMORY-BARRIER.


See BUFFER-MEMORY-BARRIER"
  (make-instance 'vk:buffer-memory-barrier 
                 :next next
                 :src-access-mask src-access-mask
                 :dst-access-mask dst-access-mask
                 :src-queue-family-index src-queue-family-index
                 :dst-queue-family-index dst-queue-family-index
                 :buffer buffer
                 :offset offset
                 :size size))

(defun make-image-memory-barrier (&key (next nil) (src-access-mask nil)
                                  (dst-access-mask nil) (old-layout nil)
                                  (new-layout nil) (src-queue-family-index 0)
                                  (dst-queue-family-index 0) (image nil)
                                  (subresource-range (vk:make-image-subresource-range)))
"Creates an instance of IMAGE-MEMORY-BARRIER.
The arguments of this function correspond to the slots of IMAGE-MEMORY-BARRIER.


See IMAGE-MEMORY-BARRIER"
  (make-instance 'vk:image-memory-barrier 
                 :next next
                 :src-access-mask src-access-mask
                 :dst-access-mask dst-access-mask
                 :old-layout old-layout
                 :new-layout new-layout
                 :src-queue-family-index src-queue-family-index
                 :dst-queue-family-index dst-queue-family-index
                 :image image
                 :subresource-range subresource-range))

(defun make-image-create-info (&key (next nil) (flags nil) (image-type nil)
                               (format nil) (extent (vk:make-extent-3d))
                               (mip-levels 0) (array-layers 0) (samples nil)
                               (tiling nil) (usage nil) (sharing-mode nil)
                               (queue-family-indices nil) (initial-layout nil))
"Creates an instance of IMAGE-CREATE-INFO.
The arguments of this function correspond to the slots of IMAGE-CREATE-INFO.


See IMAGE-CREATE-INFO"
  (make-instance 'vk:image-create-info 
                 :next next
                 :flags flags
                 :image-type image-type
                 :format format
                 :extent extent
                 :mip-levels mip-levels
                 :array-layers array-layers
                 :samples samples
                 :tiling tiling
                 :usage usage
                 :sharing-mode sharing-mode
                 :queue-family-indices queue-family-indices
                 :initial-layout initial-layout))

(defun make-subresource-layout (&key (offset 0) (size 0) (row-pitch 0)
                                (array-pitch 0) (depth-pitch 0))
"Creates an instance of SUBRESOURCE-LAYOUT.
The arguments of this function correspond to the slots of SUBRESOURCE-LAYOUT.


See SUBRESOURCE-LAYOUT"
  (make-instance 'vk:subresource-layout 
                 :offset offset
                 :size size
                 :row-pitch row-pitch
                 :array-pitch array-pitch
                 :depth-pitch depth-pitch))

(defun make-image-view-create-info (&key (next nil) (flags nil) (image nil)
                                    (view-type nil) (format nil)
                                    (components (vk:make-component-mapping))
                                    (subresource-range (vk:make-image-subresource-range)))
"Creates an instance of IMAGE-VIEW-CREATE-INFO.
The arguments of this function correspond to the slots of IMAGE-VIEW-CREATE-INFO.


See IMAGE-VIEW-CREATE-INFO"
  (make-instance 'vk:image-view-create-info 
                 :next next
                 :flags flags
                 :image image
                 :view-type view-type
                 :format format
                 :components components
                 :subresource-range subresource-range))

(defun make-buffer-copy (&key (src-offset 0) (dst-offset 0) (size 0))
"Creates an instance of BUFFER-COPY.
The arguments of this function correspond to the slots of BUFFER-COPY.


See BUFFER-COPY"
  (make-instance 'vk:buffer-copy 
                 :src-offset src-offset
                 :dst-offset dst-offset
                 :size size))

(defun make-sparse-memory-bind (&key (resource-offset 0) (size 0) (memory nil)
                                (memory-offset 0) (flags nil))
"Creates an instance of SPARSE-MEMORY-BIND.
The arguments of this function correspond to the slots of SPARSE-MEMORY-BIND.


See SPARSE-MEMORY-BIND"
  (make-instance 'vk:sparse-memory-bind 
                 :resource-offset resource-offset
                 :size size
                 :memory memory
                 :memory-offset memory-offset
                 :flags flags))

(defun make-sparse-image-memory-bind (&key
                                      (subresource (vk:make-image-subresource))
                                      (offset (vk:make-offset-3d))
                                      (extent (vk:make-extent-3d)) (memory nil)
                                      (memory-offset 0) (flags nil))
"Creates an instance of SPARSE-IMAGE-MEMORY-BIND.
The arguments of this function correspond to the slots of SPARSE-IMAGE-MEMORY-BIND.


See SPARSE-IMAGE-MEMORY-BIND"
  (make-instance 'vk:sparse-image-memory-bind 
                 :subresource subresource
                 :offset offset
                 :extent extent
                 :memory memory
                 :memory-offset memory-offset
                 :flags flags))

(defun make-sparse-buffer-memory-bind-info (&key (buffer nil) (binds nil))
"Creates an instance of SPARSE-BUFFER-MEMORY-BIND-INFO.
The arguments of this function correspond to the slots of SPARSE-BUFFER-MEMORY-BIND-INFO.


See SPARSE-BUFFER-MEMORY-BIND-INFO"
  (make-instance 'vk:sparse-buffer-memory-bind-info 
                 :buffer buffer
                 :binds binds))

(defun make-sparse-image-opaque-memory-bind-info (&key (image nil) (binds nil))
"Creates an instance of SPARSE-IMAGE-OPAQUE-MEMORY-BIND-INFO.
The arguments of this function correspond to the slots of SPARSE-IMAGE-OPAQUE-MEMORY-BIND-INFO.


See SPARSE-IMAGE-OPAQUE-MEMORY-BIND-INFO"
  (make-instance 'vk:sparse-image-opaque-memory-bind-info 
                 :image image
                 :binds binds))

(defun make-sparse-image-memory-bind-info (&key (image nil) (binds nil))
"Creates an instance of SPARSE-IMAGE-MEMORY-BIND-INFO.
The arguments of this function correspond to the slots of SPARSE-IMAGE-MEMORY-BIND-INFO.


See SPARSE-IMAGE-MEMORY-BIND-INFO"
  (make-instance 'vk:sparse-image-memory-bind-info 
                 :image image
                 :binds binds))

(defun make-bind-sparse-info (&key (next nil) (wait-semaphores nil)
                              (buffer-binds nil) (image-opaque-binds nil)
                              (image-binds nil) (signal-semaphores nil))
"Creates an instance of BIND-SPARSE-INFO.
The arguments of this function correspond to the slots of BIND-SPARSE-INFO.


See BIND-SPARSE-INFO"
  (make-instance 'vk:bind-sparse-info 
                 :next next
                 :wait-semaphores wait-semaphores
                 :buffer-binds buffer-binds
                 :image-opaque-binds image-opaque-binds
                 :image-binds image-binds
                 :signal-semaphores signal-semaphores))

(defun make-image-copy (&key
                        (src-subresource (vk:make-image-subresource-layers))
                        (src-offset (vk:make-offset-3d))
                        (dst-subresource (vk:make-image-subresource-layers))
                        (dst-offset (vk:make-offset-3d))
                        (extent (vk:make-extent-3d)))
"Creates an instance of IMAGE-COPY.
The arguments of this function correspond to the slots of IMAGE-COPY.


See IMAGE-COPY"
  (make-instance 'vk:image-copy 
                 :src-subresource src-subresource
                 :src-offset src-offset
                 :dst-subresource dst-subresource
                 :dst-offset dst-offset
                 :extent extent))

(defun make-image-blit (&key
                        (src-subresource (vk:make-image-subresource-layers))
                        (src-offsets (vk:make-offset-3d))
                        (dst-subresource (vk:make-image-subresource-layers))
                        (dst-offsets (vk:make-offset-3d)))
"Creates an instance of IMAGE-BLIT.
The arguments of this function correspond to the slots of IMAGE-BLIT.


See IMAGE-BLIT"
  (make-instance 'vk:image-blit 
                 :src-subresource src-subresource
                 :src-offsets src-offsets
                 :dst-subresource dst-subresource
                 :dst-offsets dst-offsets))

(defun make-buffer-image-copy (&key (buffer-offset 0) (buffer-row-length 0)
                               (buffer-image-height 0)
                               (image-subresource (vk:make-image-subresource-layers))
                               (image-offset (vk:make-offset-3d))
                               (image-extent (vk:make-extent-3d)))
"Creates an instance of BUFFER-IMAGE-COPY.
The arguments of this function correspond to the slots of BUFFER-IMAGE-COPY.


See BUFFER-IMAGE-COPY"
  (make-instance 'vk:buffer-image-copy 
                 :buffer-offset buffer-offset
                 :buffer-row-length buffer-row-length
                 :buffer-image-height buffer-image-height
                 :image-subresource image-subresource
                 :image-offset image-offset
                 :image-extent image-extent))

(defun make-image-resolve (&key
                           (src-subresource (vk:make-image-subresource-layers))
                           (src-offset (vk:make-offset-3d))
                           (dst-subresource (vk:make-image-subresource-layers))
                           (dst-offset (vk:make-offset-3d))
                           (extent (vk:make-extent-3d)))
"Creates an instance of IMAGE-RESOLVE.
The arguments of this function correspond to the slots of IMAGE-RESOLVE.


See IMAGE-RESOLVE"
  (make-instance 'vk:image-resolve 
                 :src-subresource src-subresource
                 :src-offset src-offset
                 :dst-subresource dst-subresource
                 :dst-offset dst-offset
                 :extent extent))

(defun make-shader-module-create-info (&key (next nil) (flags nil) (code 0))
"Creates an instance of SHADER-MODULE-CREATE-INFO.
The arguments of this function correspond to the slots of SHADER-MODULE-CREATE-INFO.


See SHADER-MODULE-CREATE-INFO"
  (make-instance 'vk:shader-module-create-info 
                 :next next
                 :flags flags
                 :code code))

(defun make-descriptor-set-layout-binding (&key (binding 0)
                                           (descriptor-type nil)
                                           (descriptor-count 0)
                                           (stage-flags nil)
                                           (immutable-samplers nil))
"Creates an instance of DESCRIPTOR-SET-LAYOUT-BINDING.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-LAYOUT-BINDING.


See DESCRIPTOR-SET-LAYOUT-BINDING"
  (make-instance 'vk:descriptor-set-layout-binding 
                 :binding binding
                 :descriptor-type descriptor-type
                 :descriptor-count descriptor-count
                 :stage-flags stage-flags
                 :immutable-samplers immutable-samplers))

(defun make-descriptor-set-layout-create-info (&key (next nil) (flags nil)
                                               (bindings nil))
"Creates an instance of DESCRIPTOR-SET-LAYOUT-CREATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-LAYOUT-CREATE-INFO.


See DESCRIPTOR-SET-LAYOUT-CREATE-INFO"
  (make-instance 'vk:descriptor-set-layout-create-info 
                 :next next
                 :flags flags
                 :bindings bindings))

(defun make-descriptor-pool-size (&key (type nil) (descriptor-count 0))
"Creates an instance of DESCRIPTOR-POOL-SIZE.
The arguments of this function correspond to the slots of DESCRIPTOR-POOL-SIZE.


See DESCRIPTOR-POOL-SIZE"
  (make-instance 'vk:descriptor-pool-size 
                 :type type
                 :descriptor-count descriptor-count))

(defun make-descriptor-pool-create-info (&key (next nil) (flags nil)
                                         (max-sets 0) (pool-sizes nil))
"Creates an instance of DESCRIPTOR-POOL-CREATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-POOL-CREATE-INFO.


See DESCRIPTOR-POOL-CREATE-INFO"
  (make-instance 'vk:descriptor-pool-create-info 
                 :next next
                 :flags flags
                 :max-sets max-sets
                 :pool-sizes pool-sizes))

(defun make-descriptor-set-allocate-info (&key (next nil) (descriptor-pool nil)
                                          (set-layouts nil))
"Creates an instance of DESCRIPTOR-SET-ALLOCATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-ALLOCATE-INFO.


See DESCRIPTOR-SET-ALLOCATE-INFO"
  (make-instance 'vk:descriptor-set-allocate-info 
                 :next next
                 :descriptor-pool descriptor-pool
                 :set-layouts set-layouts))

(defun make-specialization-map-entry (&key (constant-id 0) (offset 0) (size 0))
"Creates an instance of SPECIALIZATION-MAP-ENTRY.
The arguments of this function correspond to the slots of SPECIALIZATION-MAP-ENTRY.


See SPECIALIZATION-MAP-ENTRY"
  (make-instance 'vk:specialization-map-entry 
                 :constant-id constant-id
                 :offset offset
                 :size size))

(defun make-specialization-info (&key (map-entries nil) (data-size 0)
                                 (data nil))
"Creates an instance of SPECIALIZATION-INFO.
The arguments of this function correspond to the slots of SPECIALIZATION-INFO.


See SPECIALIZATION-INFO"
  (make-instance 'vk:specialization-info 
                 :map-entries map-entries
                 :data-size data-size
                 :data data))

(defun make-pipeline-shader-stage-create-info (&key (next nil) (flags nil)
                                               (stage nil) (module nil)
                                               (name "")
                                               (specialization-info nil))
"Creates an instance of PIPELINE-SHADER-STAGE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-SHADER-STAGE-CREATE-INFO.


See PIPELINE-SHADER-STAGE-CREATE-INFO"
  (make-instance 'vk:pipeline-shader-stage-create-info 
                 :next next
                 :flags flags
                 :stage stage
                 :module module
                 :name name
                 :specialization-info specialization-info))

(defun make-compute-pipeline-create-info (&key (next nil) (flags nil)
                                          (stage (vk:make-pipeline-shader-stage-create-info))
                                          (layout nil)
                                          (base-pipeline-handle nil)
                                          (base-pipeline-index 0))
"Creates an instance of COMPUTE-PIPELINE-CREATE-INFO.
The arguments of this function correspond to the slots of COMPUTE-PIPELINE-CREATE-INFO.


See COMPUTE-PIPELINE-CREATE-INFO"
  (make-instance 'vk:compute-pipeline-create-info 
                 :next next
                 :flags flags
                 :stage stage
                 :layout layout
                 :base-pipeline-handle base-pipeline-handle
                 :base-pipeline-index base-pipeline-index))

(defun make-vertex-input-binding-description (&key (binding 0) (stride 0)
                                              (input-rate nil))
"Creates an instance of VERTEX-INPUT-BINDING-DESCRIPTION.
The arguments of this function correspond to the slots of VERTEX-INPUT-BINDING-DESCRIPTION.


See VERTEX-INPUT-BINDING-DESCRIPTION"
  (make-instance 'vk:vertex-input-binding-description 
                 :binding binding
                 :stride stride
                 :input-rate input-rate))

(defun make-vertex-input-attribute-description (&key (location 0) (binding 0)
                                                (format nil) (offset 0))
"Creates an instance of VERTEX-INPUT-ATTRIBUTE-DESCRIPTION.
The arguments of this function correspond to the slots of VERTEX-INPUT-ATTRIBUTE-DESCRIPTION.


See VERTEX-INPUT-ATTRIBUTE-DESCRIPTION"
  (make-instance 'vk:vertex-input-attribute-description 
                 :location location
                 :binding binding
                 :format format
                 :offset offset))

(defun make-pipeline-vertex-input-state-create-info (&key (next nil)
                                                     (flags nil)
                                                     (vertex-binding-descriptions nil)
                                                     (vertex-attribute-descriptions nil))
"Creates an instance of PIPELINE-VERTEX-INPUT-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-VERTEX-INPUT-STATE-CREATE-INFO.


See PIPELINE-VERTEX-INPUT-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-vertex-input-state-create-info 
                 :next next
                 :flags flags
                 :vertex-binding-descriptions vertex-binding-descriptions
                 :vertex-attribute-descriptions vertex-attribute-descriptions))

(defun make-pipeline-input-assembly-state-create-info (&key (next nil)
                                                       (flags nil)
                                                       (topology nil)
                                                       (primitive-restart-enable nil))
"Creates an instance of PIPELINE-INPUT-ASSEMBLY-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-INPUT-ASSEMBLY-STATE-CREATE-INFO.


See PIPELINE-INPUT-ASSEMBLY-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-input-assembly-state-create-info 
                 :next next
                 :flags flags
                 :topology topology
                 :primitive-restart-enable primitive-restart-enable))

(defun make-pipeline-tessellation-state-create-info (&key (next nil)
                                                     (flags nil)
                                                     (patch-control-points 0))
"Creates an instance of PIPELINE-TESSELLATION-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-TESSELLATION-STATE-CREATE-INFO.


See PIPELINE-TESSELLATION-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-tessellation-state-create-info 
                 :next next
                 :flags flags
                 :patch-control-points patch-control-points))

(defun make-pipeline-viewport-state-create-info (&key (next nil) (flags nil)
                                                 (viewports nil) (scissors nil))
"Creates an instance of PIPELINE-VIEWPORT-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-STATE-CREATE-INFO.


See PIPELINE-VIEWPORT-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-viewport-state-create-info 
                 :next next
                 :flags flags
                 :viewports viewports
                 :scissors scissors))

(defun make-pipeline-rasterization-state-create-info (&key (next nil)
                                                      (flags nil)
                                                      (depth-clamp-enable nil)
                                                      (rasterizer-discard-enable nil)
                                                      (polygon-mode nil)
                                                      (cull-mode nil)
                                                      (front-face nil)
                                                      (depth-bias-enable nil)
                                                      (depth-bias-constant-factor 0.0)
                                                      (depth-bias-clamp 0.0)
                                                      (depth-bias-slope-factor 0.0)
                                                      (line-width 0.0))
"Creates an instance of PIPELINE-RASTERIZATION-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-STATE-CREATE-INFO.


See PIPELINE-RASTERIZATION-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-rasterization-state-create-info 
                 :next next
                 :flags flags
                 :depth-clamp-enable depth-clamp-enable
                 :rasterizer-discard-enable rasterizer-discard-enable
                 :polygon-mode polygon-mode
                 :cull-mode cull-mode
                 :front-face front-face
                 :depth-bias-enable depth-bias-enable
                 :depth-bias-constant-factor depth-bias-constant-factor
                 :depth-bias-clamp depth-bias-clamp
                 :depth-bias-slope-factor depth-bias-slope-factor
                 :line-width line-width))

(defun make-pipeline-multisample-state-create-info (&key (next nil) (flags nil)
                                                    (rasterization-samples nil)
                                                    (sample-shading-enable nil)
                                                    (min-sample-shading 0.0)
                                                    (sample-mask nil)
                                                    (alpha-to-coverage-enable nil)
                                                    (alpha-to-one-enable nil))
"Creates an instance of PIPELINE-MULTISAMPLE-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-MULTISAMPLE-STATE-CREATE-INFO.


See PIPELINE-MULTISAMPLE-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-multisample-state-create-info 
                 :next next
                 :flags flags
                 :rasterization-samples rasterization-samples
                 :sample-shading-enable sample-shading-enable
                 :min-sample-shading min-sample-shading
                 :sample-mask sample-mask
                 :alpha-to-coverage-enable alpha-to-coverage-enable
                 :alpha-to-one-enable alpha-to-one-enable))

(defun make-pipeline-color-blend-attachment-state (&key (blend-enable nil)
                                                   (src-color-blend-factor nil)
                                                   (dst-color-blend-factor nil)
                                                   (color-blend-op nil)
                                                   (src-alpha-blend-factor nil)
                                                   (dst-alpha-blend-factor nil)
                                                   (alpha-blend-op nil)
                                                   (color-write-mask nil))
"Creates an instance of PIPELINE-COLOR-BLEND-ATTACHMENT-STATE.
The arguments of this function correspond to the slots of PIPELINE-COLOR-BLEND-ATTACHMENT-STATE.


See PIPELINE-COLOR-BLEND-ATTACHMENT-STATE"
  (make-instance 'vk:pipeline-color-blend-attachment-state 
                 :blend-enable blend-enable
                 :src-color-blend-factor src-color-blend-factor
                 :dst-color-blend-factor dst-color-blend-factor
                 :color-blend-op color-blend-op
                 :src-alpha-blend-factor src-alpha-blend-factor
                 :dst-alpha-blend-factor dst-alpha-blend-factor
                 :alpha-blend-op alpha-blend-op
                 :color-write-mask color-write-mask))

(defun make-pipeline-color-blend-state-create-info (&key (next nil) (flags nil)
                                                    (logic-op-enable nil)
                                                    (logic-op nil)
                                                    (attachments nil)
                                                    (blend-constants 0.0))
"Creates an instance of PIPELINE-COLOR-BLEND-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-COLOR-BLEND-STATE-CREATE-INFO.


See PIPELINE-COLOR-BLEND-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-color-blend-state-create-info 
                 :next next
                 :flags flags
                 :logic-op-enable logic-op-enable
                 :logic-op logic-op
                 :attachments attachments
                 :blend-constants blend-constants))

(defun make-pipeline-dynamic-state-create-info (&key (next nil) (flags nil)
                                                (dynamic-states nil))
"Creates an instance of PIPELINE-DYNAMIC-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-DYNAMIC-STATE-CREATE-INFO.


See PIPELINE-DYNAMIC-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-dynamic-state-create-info 
                 :next next
                 :flags flags
                 :dynamic-states dynamic-states))

(defun make-stencil-op-state (&key (fail-op nil) (pass-op nil)
                              (depth-fail-op nil) (compare-op nil)
                              (compare-mask 0) (write-mask 0) (reference 0))
"Creates an instance of STENCIL-OP-STATE.
The arguments of this function correspond to the slots of STENCIL-OP-STATE.


See STENCIL-OP-STATE"
  (make-instance 'vk:stencil-op-state 
                 :fail-op fail-op
                 :pass-op pass-op
                 :depth-fail-op depth-fail-op
                 :compare-op compare-op
                 :compare-mask compare-mask
                 :write-mask write-mask
                 :reference reference))

(defun make-pipeline-depth-stencil-state-create-info (&key (next nil)
                                                      (flags nil)
                                                      (depth-test-enable nil)
                                                      (depth-write-enable nil)
                                                      (depth-compare-op nil)
                                                      (depth-bounds-test-enable nil)
                                                      (stencil-test-enable nil)
                                                      (front (vk:make-stencil-op-state))
                                                      (back (vk:make-stencil-op-state))
                                                      (min-depth-bounds 0.0)
                                                      (max-depth-bounds 0.0))
"Creates an instance of PIPELINE-DEPTH-STENCIL-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-DEPTH-STENCIL-STATE-CREATE-INFO.


See PIPELINE-DEPTH-STENCIL-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-depth-stencil-state-create-info 
                 :next next
                 :flags flags
                 :depth-test-enable depth-test-enable
                 :depth-write-enable depth-write-enable
                 :depth-compare-op depth-compare-op
                 :depth-bounds-test-enable depth-bounds-test-enable
                 :stencil-test-enable stencil-test-enable
                 :front front
                 :back back
                 :min-depth-bounds min-depth-bounds
                 :max-depth-bounds max-depth-bounds))

(defun make-graphics-pipeline-create-info (&key (next nil) (flags nil)
                                           (stages nil)
                                           (vertex-input-state nil)
                                           (input-assembly-state nil)
                                           (tessellation-state nil)
                                           (viewport-state nil)
                                           (rasterization-state nil)
                                           (multisample-state nil)
                                           (depth-stencil-state nil)
                                           (color-blend-state nil)
                                           (dynamic-state nil) (layout nil)
                                           (render-pass nil) (subpass 0)
                                           (base-pipeline-handle nil)
                                           (base-pipeline-index 0))
"Creates an instance of GRAPHICS-PIPELINE-CREATE-INFO.
The arguments of this function correspond to the slots of GRAPHICS-PIPELINE-CREATE-INFO.


See GRAPHICS-PIPELINE-CREATE-INFO"
  (make-instance 'vk:graphics-pipeline-create-info 
                 :next next
                 :flags flags
                 :stages stages
                 :vertex-input-state vertex-input-state
                 :input-assembly-state input-assembly-state
                 :tessellation-state tessellation-state
                 :viewport-state viewport-state
                 :rasterization-state rasterization-state
                 :multisample-state multisample-state
                 :depth-stencil-state depth-stencil-state
                 :color-blend-state color-blend-state
                 :dynamic-state dynamic-state
                 :layout layout
                 :render-pass render-pass
                 :subpass subpass
                 :base-pipeline-handle base-pipeline-handle
                 :base-pipeline-index base-pipeline-index))

(defun make-pipeline-cache-create-info (&key (next nil) (flags nil)
                                        (initial-data-size 0)
                                        (initial-data nil))
"Creates an instance of PIPELINE-CACHE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-CACHE-CREATE-INFO.


See PIPELINE-CACHE-CREATE-INFO"
  (make-instance 'vk:pipeline-cache-create-info 
                 :next next
                 :flags flags
                 :initial-data-size initial-data-size
                 :initial-data initial-data))

(defun make-pipeline-cache-header-version-one (&key (header-size 0)
                                               (header-version nil)
                                               (vendor-id 0) (device-id 0)
                                               (pipeline-cache-uuid 0))
"Creates an instance of PIPELINE-CACHE-HEADER-VERSION-ONE.
The arguments of this function correspond to the slots of PIPELINE-CACHE-HEADER-VERSION-ONE.


See PIPELINE-CACHE-HEADER-VERSION-ONE"
  (make-instance 'vk:pipeline-cache-header-version-one 
                 :header-size header-size
                 :header-version header-version
                 :vendor-id vendor-id
                 :device-id device-id
                 :pipeline-cache-uuid pipeline-cache-uuid))

(defun make-push-constant-range (&key (stage-flags nil) (offset 0) (size 0))
"Creates an instance of PUSH-CONSTANT-RANGE.
The arguments of this function correspond to the slots of PUSH-CONSTANT-RANGE.


See PUSH-CONSTANT-RANGE"
  (make-instance 'vk:push-constant-range 
                 :stage-flags stage-flags
                 :offset offset
                 :size size))

(defun make-pipeline-layout-create-info (&key (next nil) (flags nil)
                                         (set-layouts nil)
                                         (push-constant-ranges nil))
"Creates an instance of PIPELINE-LAYOUT-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-LAYOUT-CREATE-INFO.


See PIPELINE-LAYOUT-CREATE-INFO"
  (make-instance 'vk:pipeline-layout-create-info 
                 :next next
                 :flags flags
                 :set-layouts set-layouts
                 :push-constant-ranges push-constant-ranges))

(defun make-sampler-create-info (&key (next nil) (flags nil) (mag-filter nil)
                                 (min-filter nil) (mipmap-mode nil)
                                 (address-mode-u nil) (address-mode-v nil)
                                 (address-mode-w nil) (mip-lod-bias 0.0)
                                 (anisotropy-enable nil) (max-anisotropy 0.0)
                                 (compare-enable nil) (compare-op nil)
                                 (min-lod 0.0) (max-lod 0.0) (border-color nil)
                                 (unnormalized-coordinates nil))
"Creates an instance of SAMPLER-CREATE-INFO.
The arguments of this function correspond to the slots of SAMPLER-CREATE-INFO.


See SAMPLER-CREATE-INFO"
  (make-instance 'vk:sampler-create-info 
                 :next next
                 :flags flags
                 :mag-filter mag-filter
                 :min-filter min-filter
                 :mipmap-mode mipmap-mode
                 :address-mode-u address-mode-u
                 :address-mode-v address-mode-v
                 :address-mode-w address-mode-w
                 :mip-lod-bias mip-lod-bias
                 :anisotropy-enable anisotropy-enable
                 :max-anisotropy max-anisotropy
                 :compare-enable compare-enable
                 :compare-op compare-op
                 :min-lod min-lod
                 :max-lod max-lod
                 :border-color border-color
                 :unnormalized-coordinates unnormalized-coordinates))

(defun make-command-pool-create-info (&key (next nil) (flags nil)
                                      (queue-family-index 0))
"Creates an instance of COMMAND-POOL-CREATE-INFO.
The arguments of this function correspond to the slots of COMMAND-POOL-CREATE-INFO.


See COMMAND-POOL-CREATE-INFO"
  (make-instance 'vk:command-pool-create-info 
                 :next next
                 :flags flags
                 :queue-family-index queue-family-index))

(defun make-command-buffer-allocate-info (&key (next nil) (command-pool nil)
                                          (level nil) (command-buffer-count 0))
"Creates an instance of COMMAND-BUFFER-ALLOCATE-INFO.
The arguments of this function correspond to the slots of COMMAND-BUFFER-ALLOCATE-INFO.


See COMMAND-BUFFER-ALLOCATE-INFO"
  (make-instance 'vk:command-buffer-allocate-info 
                 :next next
                 :command-pool command-pool
                 :level level
                 :command-buffer-count command-buffer-count))

(defun make-command-buffer-inheritance-info (&key (next nil) (render-pass nil)
                                             (subpass 0) (framebuffer nil)
                                             (occlusion-query-enable nil)
                                             (query-flags nil)
                                             (pipeline-statistics nil))
"Creates an instance of COMMAND-BUFFER-INHERITANCE-INFO.
The arguments of this function correspond to the slots of COMMAND-BUFFER-INHERITANCE-INFO.


See COMMAND-BUFFER-INHERITANCE-INFO"
  (make-instance 'vk:command-buffer-inheritance-info 
                 :next next
                 :render-pass render-pass
                 :subpass subpass
                 :framebuffer framebuffer
                 :occlusion-query-enable occlusion-query-enable
                 :query-flags query-flags
                 :pipeline-statistics pipeline-statistics))

(defun make-command-buffer-begin-info (&key (next nil) (flags nil)
                                       (inheritance-info nil))
"Creates an instance of COMMAND-BUFFER-BEGIN-INFO.
The arguments of this function correspond to the slots of COMMAND-BUFFER-BEGIN-INFO.


See COMMAND-BUFFER-BEGIN-INFO"
  (make-instance 'vk:command-buffer-begin-info 
                 :next next
                 :flags flags
                 :inheritance-info inheritance-info))

(defun make-render-pass-begin-info (&key (next nil) (render-pass nil)
                                    (framebuffer nil)
                                    (render-area (vk:make-rect-2d))
                                    (clear-values nil))
"Creates an instance of RENDER-PASS-BEGIN-INFO.
The arguments of this function correspond to the slots of RENDER-PASS-BEGIN-INFO.


See RENDER-PASS-BEGIN-INFO"
  (make-instance 'vk:render-pass-begin-info 
                 :next next
                 :render-pass render-pass
                 :framebuffer framebuffer
                 :render-area render-area
                 :clear-values clear-values))

(defun make-clear-color-value (&key (float-32 nil) (int-32 nil) (uint-32 nil))
"Creates an instance of CLEAR-COLOR-VALUE.
The arguments of this function correspond to the slots of CLEAR-COLOR-VALUE.

Since CLEAR-COLOR-VALUE represents a union, exactly one argument must be supplied.

See CLEAR-COLOR-VALUE"
  (assert (= 1 (count-if #'identity (list float-32 int-32 uint-32)))
          (float-32 int-32 uint-32)
          "Exactly one argument must be non-nil.")
  (cond 
    (float-32
     (make-instance 'vk:clear-color-value :float-32 float-32))
    (int-32
     (make-instance 'vk:clear-color-value :int-32 int-32))
    (uint-32
     (make-instance 'vk:clear-color-value :uint-32 uint-32))))

(defun make-clear-depth-stencil-value (&key (depth 0.0) (stencil 0))
"Creates an instance of CLEAR-DEPTH-STENCIL-VALUE.
The arguments of this function correspond to the slots of CLEAR-DEPTH-STENCIL-VALUE.


See CLEAR-DEPTH-STENCIL-VALUE"
  (make-instance 'vk:clear-depth-stencil-value 
                 :depth depth
                 :stencil stencil))

(defun make-clear-value (&key (color nil) (depth-stencil nil))
"Creates an instance of CLEAR-VALUE.
The arguments of this function correspond to the slots of CLEAR-VALUE.

Since CLEAR-VALUE represents a union, exactly one argument must be supplied.

See CLEAR-VALUE"
  (assert (= 1 (count-if #'identity (list color depth-stencil)))
          (color depth-stencil)
          "Exactly one argument must be non-nil.")
  (cond 
    (color
     (make-instance 'vk:clear-value :color color))
    (depth-stencil
     (make-instance 'vk:clear-value :depth-stencil depth-stencil))))

(defun make-clear-attachment (&key (aspect-mask nil) (color-attachment 0)
                              (clear-value nil))
"Creates an instance of CLEAR-ATTACHMENT.
The arguments of this function correspond to the slots of CLEAR-ATTACHMENT.


See CLEAR-ATTACHMENT"
  (make-instance 'vk:clear-attachment 
                 :aspect-mask aspect-mask
                 :color-attachment color-attachment
                 :clear-value clear-value))

(defun make-attachment-description (&key (flags nil) (format nil) (samples nil)
                                    (load-op nil) (store-op nil)
                                    (stencil-load-op nil)
                                    (stencil-store-op nil) (initial-layout nil)
                                    (final-layout nil))
"Creates an instance of ATTACHMENT-DESCRIPTION.
The arguments of this function correspond to the slots of ATTACHMENT-DESCRIPTION.


See ATTACHMENT-DESCRIPTION"
  (make-instance 'vk:attachment-description 
                 :flags flags
                 :format format
                 :samples samples
                 :load-op load-op
                 :store-op store-op
                 :stencil-load-op stencil-load-op
                 :stencil-store-op stencil-store-op
                 :initial-layout initial-layout
                 :final-layout final-layout))

(defun make-attachment-reference (&key (attachment 0) (layout nil))
"Creates an instance of ATTACHMENT-REFERENCE.
The arguments of this function correspond to the slots of ATTACHMENT-REFERENCE.


See ATTACHMENT-REFERENCE"
  (make-instance 'vk:attachment-reference 
                 :attachment attachment
                 :layout layout))

(defun make-subpass-description (&key (flags nil) (pipeline-bind-point nil)
                                 (input-attachments nil)
                                 (color-attachments nil)
                                 (resolve-attachments nil)
                                 (depth-stencil-attachment nil)
                                 (preserve-attachments nil))
"Creates an instance of SUBPASS-DESCRIPTION.
The arguments of this function correspond to the slots of SUBPASS-DESCRIPTION.


See SUBPASS-DESCRIPTION"
  (make-instance 'vk:subpass-description 
                 :flags flags
                 :pipeline-bind-point pipeline-bind-point
                 :input-attachments input-attachments
                 :color-attachments color-attachments
                 :resolve-attachments resolve-attachments
                 :depth-stencil-attachment depth-stencil-attachment
                 :preserve-attachments preserve-attachments))

(defun make-subpass-dependency (&key (src-subpass 0) (dst-subpass 0)
                                (src-stage-mask nil) (dst-stage-mask nil)
                                (src-access-mask nil) (dst-access-mask nil)
                                (dependency-flags nil))
"Creates an instance of SUBPASS-DEPENDENCY.
The arguments of this function correspond to the slots of SUBPASS-DEPENDENCY.


See SUBPASS-DEPENDENCY"
  (make-instance 'vk:subpass-dependency 
                 :src-subpass src-subpass
                 :dst-subpass dst-subpass
                 :src-stage-mask src-stage-mask
                 :dst-stage-mask dst-stage-mask
                 :src-access-mask src-access-mask
                 :dst-access-mask dst-access-mask
                 :dependency-flags dependency-flags))

(defun make-render-pass-create-info (&key (next nil) (flags nil)
                                     (attachments nil) (subpasses nil)
                                     (dependencies nil))
"Creates an instance of RENDER-PASS-CREATE-INFO.
The arguments of this function correspond to the slots of RENDER-PASS-CREATE-INFO.


See RENDER-PASS-CREATE-INFO"
  (make-instance 'vk:render-pass-create-info 
                 :next next
                 :flags flags
                 :attachments attachments
                 :subpasses subpasses
                 :dependencies dependencies))

(defun make-event-create-info (&key (next nil) (flags nil))
"Creates an instance of EVENT-CREATE-INFO.
The arguments of this function correspond to the slots of EVENT-CREATE-INFO.


See EVENT-CREATE-INFO"
  (make-instance 'vk:event-create-info 
                 :next next
                 :flags flags))

(defun make-fence-create-info (&key (next nil) (flags nil))
"Creates an instance of FENCE-CREATE-INFO.
The arguments of this function correspond to the slots of FENCE-CREATE-INFO.


See FENCE-CREATE-INFO"
  (make-instance 'vk:fence-create-info 
                 :next next
                 :flags flags))

(defun make-physical-device-features (&key (robust-buffer-access nil)
                                      (full-draw-index-uint-32 nil)
                                      (image-cube-array nil)
                                      (independent-blend nil)
                                      (geometry-shader nil)
                                      (tessellation-shader nil)
                                      (sample-rate-shading nil)
                                      (dual-src-blend nil) (logic-op nil)
                                      (multi-draw-indirect nil)
                                      (draw-indirect-first-instance nil)
                                      (depth-clamp nil) (depth-bias-clamp nil)
                                      (fill-mode-non-solid nil)
                                      (depth-bounds nil) (wide-lines nil)
                                      (large-points nil) (alpha-to-one nil)
                                      (multi-viewport nil)
                                      (sampler-anisotropy nil)
                                      (texture-compression-etc2 nil)
                                      (texture-compression-astc_-ldr nil)
                                      (texture-compression-bc nil)
                                      (occlusion-query-precise nil)
                                      (pipeline-statistics-query nil)
                                      (vertex-pipeline-stores-and-atomics nil)
                                      (fragment-stores-and-atomics nil)
                                      (shader-tessellation-and-geometry-point-size nil)
                                      (shader-image-gather-extended nil)
                                      (shader-storage-image-extended-formats nil)
                                      (shader-storage-image-multisample nil)
                                      (shader-storage-image-read-without-format nil)
                                      (shader-storage-image-write-without-format nil)
                                      (shader-uniform-buffer-array-dynamic-indexing nil)
                                      (shader-sampled-image-array-dynamic-indexing nil)
                                      (shader-storage-buffer-array-dynamic-indexing nil)
                                      (shader-storage-image-array-dynamic-indexing nil)
                                      (shader-clip-distance nil)
                                      (shader-cull-distance nil)
                                      (shader-float-64 nil) (shader-int-64 nil)
                                      (shader-int-16 nil)
                                      (shader-resource-residency nil)
                                      (shader-resource-min-lod nil)
                                      (sparse-binding nil)
                                      (sparse-residency-buffer nil)
                                      (sparse-residency-image-2d nil)
                                      (sparse-residency-image-3d nil)
                                      (sparse-residency-2-samples nil)
                                      (sparse-residency-4-samples nil)
                                      (sparse-residency-8-samples nil)
                                      (sparse-residency-16-samples nil)
                                      (sparse-residency-aliased nil)
                                      (variable-multisample-rate nil)
                                      (inherited-queries nil))
"Creates an instance of PHYSICAL-DEVICE-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FEATURES.


See PHYSICAL-DEVICE-FEATURES"
  (make-instance 'vk:physical-device-features 
                 :robust-buffer-access robust-buffer-access
                 :full-draw-index-uint-32 full-draw-index-uint-32
                 :image-cube-array image-cube-array
                 :independent-blend independent-blend
                 :geometry-shader geometry-shader
                 :tessellation-shader tessellation-shader
                 :sample-rate-shading sample-rate-shading
                 :dual-src-blend dual-src-blend
                 :logic-op logic-op
                 :multi-draw-indirect multi-draw-indirect
                 :draw-indirect-first-instance draw-indirect-first-instance
                 :depth-clamp depth-clamp
                 :depth-bias-clamp depth-bias-clamp
                 :fill-mode-non-solid fill-mode-non-solid
                 :depth-bounds depth-bounds
                 :wide-lines wide-lines
                 :large-points large-points
                 :alpha-to-one alpha-to-one
                 :multi-viewport multi-viewport
                 :sampler-anisotropy sampler-anisotropy
                 :texture-compression-etc2 texture-compression-etc2
                 :texture-compression-astc_-ldr texture-compression-astc_-ldr
                 :texture-compression-bc texture-compression-bc
                 :occlusion-query-precise occlusion-query-precise
                 :pipeline-statistics-query pipeline-statistics-query
                 :vertex-pipeline-stores-and-atomics vertex-pipeline-stores-and-atomics
                 :fragment-stores-and-atomics fragment-stores-and-atomics
                 :shader-tessellation-and-geometry-point-size shader-tessellation-and-geometry-point-size
                 :shader-image-gather-extended shader-image-gather-extended
                 :shader-storage-image-extended-formats shader-storage-image-extended-formats
                 :shader-storage-image-multisample shader-storage-image-multisample
                 :shader-storage-image-read-without-format shader-storage-image-read-without-format
                 :shader-storage-image-write-without-format shader-storage-image-write-without-format
                 :shader-uniform-buffer-array-dynamic-indexing shader-uniform-buffer-array-dynamic-indexing
                 :shader-sampled-image-array-dynamic-indexing shader-sampled-image-array-dynamic-indexing
                 :shader-storage-buffer-array-dynamic-indexing shader-storage-buffer-array-dynamic-indexing
                 :shader-storage-image-array-dynamic-indexing shader-storage-image-array-dynamic-indexing
                 :shader-clip-distance shader-clip-distance
                 :shader-cull-distance shader-cull-distance
                 :shader-float-64 shader-float-64
                 :shader-int-64 shader-int-64
                 :shader-int-16 shader-int-16
                 :shader-resource-residency shader-resource-residency
                 :shader-resource-min-lod shader-resource-min-lod
                 :sparse-binding sparse-binding
                 :sparse-residency-buffer sparse-residency-buffer
                 :sparse-residency-image-2d sparse-residency-image-2d
                 :sparse-residency-image-3d sparse-residency-image-3d
                 :sparse-residency-2-samples sparse-residency-2-samples
                 :sparse-residency-4-samples sparse-residency-4-samples
                 :sparse-residency-8-samples sparse-residency-8-samples
                 :sparse-residency-16-samples sparse-residency-16-samples
                 :sparse-residency-aliased sparse-residency-aliased
                 :variable-multisample-rate variable-multisample-rate
                 :inherited-queries inherited-queries))

(defun make-physical-device-sparse-properties (&key
                                               (residency-standard-2d-block-shape nil)
                                               (residency-standard-2d-multisample-block-shape nil)
                                               (residency-standard-3d-block-shape nil)
                                               (residency-aligned-mip-size nil)
                                               (residency-non-resident-strict nil))
"Creates an instance of PHYSICAL-DEVICE-SPARSE-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SPARSE-PROPERTIES.


See PHYSICAL-DEVICE-SPARSE-PROPERTIES"
  (make-instance 'vk:physical-device-sparse-properties 
                 :residency-standard-2d-block-shape residency-standard-2d-block-shape
                 :residency-standard-2d-multisample-block-shape residency-standard-2d-multisample-block-shape
                 :residency-standard-3d-block-shape residency-standard-3d-block-shape
                 :residency-aligned-mip-size residency-aligned-mip-size
                 :residency-non-resident-strict residency-non-resident-strict))

(defun make-physical-device-limits (&key (max-image-dimension-1d 0)
                                    (max-image-dimension-2d 0)
                                    (max-image-dimension-3d 0)
                                    (max-image-dimension-cube 0)
                                    (max-image-array-layers 0)
                                    (max-texel-buffer-elements 0)
                                    (max-uniform-buffer-range 0)
                                    (max-storage-buffer-range 0)
                                    (max-push-constants-size 0)
                                    (max-memory-allocation-count 0)
                                    (max-sampler-allocation-count 0)
                                    (buffer-image-granularity 0)
                                    (sparse-address-space-size 0)
                                    (max-bound-descriptor-sets 0)
                                    (max-per-stage-descriptor-samplers 0)
                                    (max-per-stage-descriptor-uniform-buffers 0)
                                    (max-per-stage-descriptor-storage-buffers 0)
                                    (max-per-stage-descriptor-sampled-images 0)
                                    (max-per-stage-descriptor-storage-images 0)
                                    (max-per-stage-descriptor-input-attachments 0)
                                    (max-per-stage-resources 0)
                                    (max-descriptor-set-samplers 0)
                                    (max-descriptor-set-uniform-buffers 0)
                                    (max-descriptor-set-uniform-buffers-dynamic 0)
                                    (max-descriptor-set-storage-buffers 0)
                                    (max-descriptor-set-storage-buffers-dynamic 0)
                                    (max-descriptor-set-sampled-images 0)
                                    (max-descriptor-set-storage-images 0)
                                    (max-descriptor-set-input-attachments 0)
                                    (max-vertex-input-attributes 0)
                                    (max-vertex-input-bindings 0)
                                    (max-vertex-input-attribute-offset 0)
                                    (max-vertex-input-binding-stride 0)
                                    (max-vertex-output-components 0)
                                    (max-tessellation-generation-level 0)
                                    (max-tessellation-patch-size 0)
                                    (max-tessellation-control-per-vertex-input-components 0)
                                    (max-tessellation-control-per-vertex-output-components 0)
                                    (max-tessellation-control-per-patch-output-components 0)
                                    (max-tessellation-control-total-output-components 0)
                                    (max-tessellation-evaluation-input-components 0)
                                    (max-tessellation-evaluation-output-components 0)
                                    (max-geometry-shader-invocations 0)
                                    (max-geometry-input-components 0)
                                    (max-geometry-output-components 0)
                                    (max-geometry-output-vertices 0)
                                    (max-geometry-total-output-components 0)
                                    (max-fragment-input-components 0)
                                    (max-fragment-output-attachments 0)
                                    (max-fragment-dual-src-attachments 0)
                                    (max-fragment-combined-output-resources 0)
                                    (max-compute-shared-memory-size 0)
                                    (max-compute-work-group-count 0)
                                    (max-compute-work-group-invocations 0)
                                    (max-compute-work-group-size 0)
                                    (sub-pixel-precision-bits 0)
                                    (sub-texel-precision-bits 0)
                                    (mipmap-precision-bits 0)
                                    (max-draw-indexed-index-value 0)
                                    (max-draw-indirect-count 0)
                                    (max-sampler-lod-bias 0.0)
                                    (max-sampler-anisotropy 0.0)
                                    (max-viewports 0)
                                    (max-viewport-dimensions 0)
                                    (viewport-bounds-range 0.0)
                                    (viewport-sub-pixel-bits 0)
                                    (min-memory-map-alignment 0)
                                    (min-texel-buffer-offset-alignment 0)
                                    (min-uniform-buffer-offset-alignment 0)
                                    (min-storage-buffer-offset-alignment 0)
                                    (min-texel-offset 0) (max-texel-offset 0)
                                    (min-texel-gather-offset 0)
                                    (max-texel-gather-offset 0)
                                    (min-interpolation-offset 0.0)
                                    (max-interpolation-offset 0.0)
                                    (sub-pixel-interpolation-offset-bits 0)
                                    (max-framebuffer-width 0)
                                    (max-framebuffer-height 0)
                                    (max-framebuffer-layers 0)
                                    (framebuffer-color-sample-counts nil)
                                    (framebuffer-depth-sample-counts nil)
                                    (framebuffer-stencil-sample-counts nil)
                                    (framebuffer-no-attachments-sample-counts nil)
                                    (max-color-attachments 0)
                                    (sampled-image-color-sample-counts nil)
                                    (sampled-image-integer-sample-counts nil)
                                    (sampled-image-depth-sample-counts nil)
                                    (sampled-image-stencil-sample-counts nil)
                                    (storage-image-sample-counts nil)
                                    (max-sample-mask-words 0)
                                    (timestamp-compute-and-graphics nil)
                                    (timestamp-period 0.0)
                                    (max-clip-distances 0)
                                    (max-cull-distances 0)
                                    (max-combined-clip-and-cull-distances 0)
                                    (discrete-queue-priorities 0)
                                    (point-size-range 0.0)
                                    (line-width-range 0.0)
                                    (point-size-granularity 0.0)
                                    (line-width-granularity 0.0)
                                    (strict-lines nil)
                                    (standard-sample-locations nil)
                                    (optimal-buffer-copy-offset-alignment 0)
                                    (optimal-buffer-copy-row-pitch-alignment 0)
                                    (non-coherent-atom-size 0))
"Creates an instance of PHYSICAL-DEVICE-LIMITS.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-LIMITS.


See PHYSICAL-DEVICE-LIMITS"
  (make-instance 'vk:physical-device-limits 
                 :max-image-dimension-1d max-image-dimension-1d
                 :max-image-dimension-2d max-image-dimension-2d
                 :max-image-dimension-3d max-image-dimension-3d
                 :max-image-dimension-cube max-image-dimension-cube
                 :max-image-array-layers max-image-array-layers
                 :max-texel-buffer-elements max-texel-buffer-elements
                 :max-uniform-buffer-range max-uniform-buffer-range
                 :max-storage-buffer-range max-storage-buffer-range
                 :max-push-constants-size max-push-constants-size
                 :max-memory-allocation-count max-memory-allocation-count
                 :max-sampler-allocation-count max-sampler-allocation-count
                 :buffer-image-granularity buffer-image-granularity
                 :sparse-address-space-size sparse-address-space-size
                 :max-bound-descriptor-sets max-bound-descriptor-sets
                 :max-per-stage-descriptor-samplers max-per-stage-descriptor-samplers
                 :max-per-stage-descriptor-uniform-buffers max-per-stage-descriptor-uniform-buffers
                 :max-per-stage-descriptor-storage-buffers max-per-stage-descriptor-storage-buffers
                 :max-per-stage-descriptor-sampled-images max-per-stage-descriptor-sampled-images
                 :max-per-stage-descriptor-storage-images max-per-stage-descriptor-storage-images
                 :max-per-stage-descriptor-input-attachments max-per-stage-descriptor-input-attachments
                 :max-per-stage-resources max-per-stage-resources
                 :max-descriptor-set-samplers max-descriptor-set-samplers
                 :max-descriptor-set-uniform-buffers max-descriptor-set-uniform-buffers
                 :max-descriptor-set-uniform-buffers-dynamic max-descriptor-set-uniform-buffers-dynamic
                 :max-descriptor-set-storage-buffers max-descriptor-set-storage-buffers
                 :max-descriptor-set-storage-buffers-dynamic max-descriptor-set-storage-buffers-dynamic
                 :max-descriptor-set-sampled-images max-descriptor-set-sampled-images
                 :max-descriptor-set-storage-images max-descriptor-set-storage-images
                 :max-descriptor-set-input-attachments max-descriptor-set-input-attachments
                 :max-vertex-input-attributes max-vertex-input-attributes
                 :max-vertex-input-bindings max-vertex-input-bindings
                 :max-vertex-input-attribute-offset max-vertex-input-attribute-offset
                 :max-vertex-input-binding-stride max-vertex-input-binding-stride
                 :max-vertex-output-components max-vertex-output-components
                 :max-tessellation-generation-level max-tessellation-generation-level
                 :max-tessellation-patch-size max-tessellation-patch-size
                 :max-tessellation-control-per-vertex-input-components max-tessellation-control-per-vertex-input-components
                 :max-tessellation-control-per-vertex-output-components max-tessellation-control-per-vertex-output-components
                 :max-tessellation-control-per-patch-output-components max-tessellation-control-per-patch-output-components
                 :max-tessellation-control-total-output-components max-tessellation-control-total-output-components
                 :max-tessellation-evaluation-input-components max-tessellation-evaluation-input-components
                 :max-tessellation-evaluation-output-components max-tessellation-evaluation-output-components
                 :max-geometry-shader-invocations max-geometry-shader-invocations
                 :max-geometry-input-components max-geometry-input-components
                 :max-geometry-output-components max-geometry-output-components
                 :max-geometry-output-vertices max-geometry-output-vertices
                 :max-geometry-total-output-components max-geometry-total-output-components
                 :max-fragment-input-components max-fragment-input-components
                 :max-fragment-output-attachments max-fragment-output-attachments
                 :max-fragment-dual-src-attachments max-fragment-dual-src-attachments
                 :max-fragment-combined-output-resources max-fragment-combined-output-resources
                 :max-compute-shared-memory-size max-compute-shared-memory-size
                 :max-compute-work-group-count max-compute-work-group-count
                 :max-compute-work-group-invocations max-compute-work-group-invocations
                 :max-compute-work-group-size max-compute-work-group-size
                 :sub-pixel-precision-bits sub-pixel-precision-bits
                 :sub-texel-precision-bits sub-texel-precision-bits
                 :mipmap-precision-bits mipmap-precision-bits
                 :max-draw-indexed-index-value max-draw-indexed-index-value
                 :max-draw-indirect-count max-draw-indirect-count
                 :max-sampler-lod-bias max-sampler-lod-bias
                 :max-sampler-anisotropy max-sampler-anisotropy
                 :max-viewports max-viewports
                 :max-viewport-dimensions max-viewport-dimensions
                 :viewport-bounds-range viewport-bounds-range
                 :viewport-sub-pixel-bits viewport-sub-pixel-bits
                 :min-memory-map-alignment min-memory-map-alignment
                 :min-texel-buffer-offset-alignment min-texel-buffer-offset-alignment
                 :min-uniform-buffer-offset-alignment min-uniform-buffer-offset-alignment
                 :min-storage-buffer-offset-alignment min-storage-buffer-offset-alignment
                 :min-texel-offset min-texel-offset
                 :max-texel-offset max-texel-offset
                 :min-texel-gather-offset min-texel-gather-offset
                 :max-texel-gather-offset max-texel-gather-offset
                 :min-interpolation-offset min-interpolation-offset
                 :max-interpolation-offset max-interpolation-offset
                 :sub-pixel-interpolation-offset-bits sub-pixel-interpolation-offset-bits
                 :max-framebuffer-width max-framebuffer-width
                 :max-framebuffer-height max-framebuffer-height
                 :max-framebuffer-layers max-framebuffer-layers
                 :framebuffer-color-sample-counts framebuffer-color-sample-counts
                 :framebuffer-depth-sample-counts framebuffer-depth-sample-counts
                 :framebuffer-stencil-sample-counts framebuffer-stencil-sample-counts
                 :framebuffer-no-attachments-sample-counts framebuffer-no-attachments-sample-counts
                 :max-color-attachments max-color-attachments
                 :sampled-image-color-sample-counts sampled-image-color-sample-counts
                 :sampled-image-integer-sample-counts sampled-image-integer-sample-counts
                 :sampled-image-depth-sample-counts sampled-image-depth-sample-counts
                 :sampled-image-stencil-sample-counts sampled-image-stencil-sample-counts
                 :storage-image-sample-counts storage-image-sample-counts
                 :max-sample-mask-words max-sample-mask-words
                 :timestamp-compute-and-graphics timestamp-compute-and-graphics
                 :timestamp-period timestamp-period
                 :max-clip-distances max-clip-distances
                 :max-cull-distances max-cull-distances
                 :max-combined-clip-and-cull-distances max-combined-clip-and-cull-distances
                 :discrete-queue-priorities discrete-queue-priorities
                 :point-size-range point-size-range
                 :line-width-range line-width-range
                 :point-size-granularity point-size-granularity
                 :line-width-granularity line-width-granularity
                 :strict-lines strict-lines
                 :standard-sample-locations standard-sample-locations
                 :optimal-buffer-copy-offset-alignment optimal-buffer-copy-offset-alignment
                 :optimal-buffer-copy-row-pitch-alignment optimal-buffer-copy-row-pitch-alignment
                 :non-coherent-atom-size non-coherent-atom-size))

(defun make-semaphore-create-info (&key (next nil) (flags nil))
"Creates an instance of SEMAPHORE-CREATE-INFO.
The arguments of this function correspond to the slots of SEMAPHORE-CREATE-INFO.


See SEMAPHORE-CREATE-INFO"
  (make-instance 'vk:semaphore-create-info 
                 :next next
                 :flags flags))

(defun make-query-pool-create-info (&key (next nil) (flags nil)
                                    (query-type nil) (query-count 0)
                                    (pipeline-statistics nil))
"Creates an instance of QUERY-POOL-CREATE-INFO.
The arguments of this function correspond to the slots of QUERY-POOL-CREATE-INFO.


See QUERY-POOL-CREATE-INFO"
  (make-instance 'vk:query-pool-create-info 
                 :next next
                 :flags flags
                 :query-type query-type
                 :query-count query-count
                 :pipeline-statistics pipeline-statistics))

(defun make-framebuffer-create-info (&key (next nil) (flags nil)
                                     (render-pass nil) (attachments nil)
                                     (width 0) (height 0) (layers 0))
"Creates an instance of FRAMEBUFFER-CREATE-INFO.
The arguments of this function correspond to the slots of FRAMEBUFFER-CREATE-INFO.


See FRAMEBUFFER-CREATE-INFO"
  (make-instance 'vk:framebuffer-create-info 
                 :next next
                 :flags flags
                 :render-pass render-pass
                 :attachments attachments
                 :width width
                 :height height
                 :layers layers))

(defun make-draw-indirect-command (&key (vertex-count 0) (instance-count 0)
                                   (first-vertex 0) (first-instance 0))
"Creates an instance of DRAW-INDIRECT-COMMAND.
The arguments of this function correspond to the slots of DRAW-INDIRECT-COMMAND.


See DRAW-INDIRECT-COMMAND"
  (make-instance 'vk:draw-indirect-command 
                 :vertex-count vertex-count
                 :instance-count instance-count
                 :first-vertex first-vertex
                 :first-instance first-instance))

(defun make-draw-indexed-indirect-command (&key (index-count 0)
                                           (instance-count 0) (first-index 0)
                                           (vertex-offset 0) (first-instance 0))
"Creates an instance of DRAW-INDEXED-INDIRECT-COMMAND.
The arguments of this function correspond to the slots of DRAW-INDEXED-INDIRECT-COMMAND.


See DRAW-INDEXED-INDIRECT-COMMAND"
  (make-instance 'vk:draw-indexed-indirect-command 
                 :index-count index-count
                 :instance-count instance-count
                 :first-index first-index
                 :vertex-offset vertex-offset
                 :first-instance first-instance))

(defun make-dispatch-indirect-command (&key (x 0) (y 0) (z 0))
"Creates an instance of DISPATCH-INDIRECT-COMMAND.
The arguments of this function correspond to the slots of DISPATCH-INDIRECT-COMMAND.


See DISPATCH-INDIRECT-COMMAND"
  (make-instance 'vk:dispatch-indirect-command 
                 :x x
                 :y y
                 :z z))

(defun make-multi-draw-info-ext (&key (first-vertex 0) (vertex-count 0))
"Creates an instance of MULTI-DRAW-INFO-EXT.
The arguments of this function correspond to the slots of MULTI-DRAW-INFO-EXT.


See MULTI-DRAW-INFO-EXT"
  (make-instance 'vk:multi-draw-info-ext 
                 :first-vertex first-vertex
                 :vertex-count vertex-count))

(defun make-multi-draw-indexed-info-ext (&key (first-index 0) (index-count 0)
                                         (vertex-offset 0))
"Creates an instance of MULTI-DRAW-INDEXED-INFO-EXT.
The arguments of this function correspond to the slots of MULTI-DRAW-INDEXED-INFO-EXT.


See MULTI-DRAW-INDEXED-INFO-EXT"
  (make-instance 'vk:multi-draw-indexed-info-ext 
                 :first-index first-index
                 :index-count index-count
                 :vertex-offset vertex-offset))

(defun make-submit-info (&key (next nil) (wait-semaphores nil)
                         (wait-dst-stage-mask nil) (command-buffers nil)
                         (signal-semaphores nil))
"Creates an instance of SUBMIT-INFO.
The arguments of this function correspond to the slots of SUBMIT-INFO.


See SUBMIT-INFO"
  (make-instance 'vk:submit-info 
                 :next next
                 :wait-semaphores wait-semaphores
                 :wait-dst-stage-mask wait-dst-stage-mask
                 :command-buffers command-buffers
                 :signal-semaphores signal-semaphores))

(defun make-display-properties-khr (&key (display nil) (display-name "")
                                    (physical-dimensions (vk:make-extent-2d))
                                    (physical-resolution (vk:make-extent-2d))
                                    (supported-transforms nil)
                                    (plane-reorder-possible nil)
                                    (persistent-content nil))
"Creates an instance of DISPLAY-PROPERTIES-KHR.
The arguments of this function correspond to the slots of DISPLAY-PROPERTIES-KHR.


See DISPLAY-PROPERTIES-KHR"
  (make-instance 'vk:display-properties-khr 
                 :display display
                 :display-name display-name
                 :physical-dimensions physical-dimensions
                 :physical-resolution physical-resolution
                 :supported-transforms supported-transforms
                 :plane-reorder-possible plane-reorder-possible
                 :persistent-content persistent-content))

(defun make-display-plane-properties-khr (&key (current-display nil)
                                          (current-stack-index 0))
"Creates an instance of DISPLAY-PLANE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of DISPLAY-PLANE-PROPERTIES-KHR.


See DISPLAY-PLANE-PROPERTIES-KHR"
  (make-instance 'vk:display-plane-properties-khr 
                 :current-display current-display
                 :current-stack-index current-stack-index))

(defun make-display-mode-parameters-khr (&key
                                         (visible-region (vk:make-extent-2d))
                                         (refresh-rate 0))
"Creates an instance of DISPLAY-MODE-PARAMETERS-KHR.
The arguments of this function correspond to the slots of DISPLAY-MODE-PARAMETERS-KHR.


See DISPLAY-MODE-PARAMETERS-KHR"
  (make-instance 'vk:display-mode-parameters-khr 
                 :visible-region visible-region
                 :refresh-rate refresh-rate))

(defun make-display-mode-properties-khr (&key (display-mode nil)
                                         (parameters (vk:make-display-mode-parameters-khr)))
"Creates an instance of DISPLAY-MODE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of DISPLAY-MODE-PROPERTIES-KHR.


See DISPLAY-MODE-PROPERTIES-KHR"
  (make-instance 'vk:display-mode-properties-khr 
                 :display-mode display-mode
                 :parameters parameters))

(defun make-display-mode-create-info-khr (&key (next nil) (flags nil)
                                          (parameters (vk:make-display-mode-parameters-khr)))
"Creates an instance of DISPLAY-MODE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of DISPLAY-MODE-CREATE-INFO-KHR.


See DISPLAY-MODE-CREATE-INFO-KHR"
  (make-instance 'vk:display-mode-create-info-khr 
                 :next next
                 :flags flags
                 :parameters parameters))

(defun make-display-plane-capabilities-khr (&key (supported-alpha nil)
                                            (min-src-position (vk:make-offset-2d))
                                            (max-src-position (vk:make-offset-2d))
                                            (min-src-extent (vk:make-extent-2d))
                                            (max-src-extent (vk:make-extent-2d))
                                            (min-dst-position (vk:make-offset-2d))
                                            (max-dst-position (vk:make-offset-2d))
                                            (min-dst-extent (vk:make-extent-2d))
                                            (max-dst-extent (vk:make-extent-2d)))
"Creates an instance of DISPLAY-PLANE-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of DISPLAY-PLANE-CAPABILITIES-KHR.


See DISPLAY-PLANE-CAPABILITIES-KHR"
  (make-instance 'vk:display-plane-capabilities-khr 
                 :supported-alpha supported-alpha
                 :min-src-position min-src-position
                 :max-src-position max-src-position
                 :min-src-extent min-src-extent
                 :max-src-extent max-src-extent
                 :min-dst-position min-dst-position
                 :max-dst-position max-dst-position
                 :min-dst-extent min-dst-extent
                 :max-dst-extent max-dst-extent))

(defun make-display-surface-create-info-khr (&key (next nil) (flags nil)
                                             (display-mode nil) (plane-index 0)
                                             (plane-stack-index 0)
                                             (transform nil) (global-alpha 0.0)
                                             (alpha-mode nil)
                                             (image-extent (vk:make-extent-2d)))
"Creates an instance of DISPLAY-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of DISPLAY-SURFACE-CREATE-INFO-KHR.


See DISPLAY-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:display-surface-create-info-khr 
                 :next next
                 :flags flags
                 :display-mode display-mode
                 :plane-index plane-index
                 :plane-stack-index plane-stack-index
                 :transform transform
                 :global-alpha global-alpha
                 :alpha-mode alpha-mode
                 :image-extent image-extent))

(defun make-display-present-info-khr (&key (next nil)
                                      (src-rect (vk:make-rect-2d))
                                      (dst-rect (vk:make-rect-2d))
                                      (persistent nil))
"Creates an instance of DISPLAY-PRESENT-INFO-KHR.
The arguments of this function correspond to the slots of DISPLAY-PRESENT-INFO-KHR.


See DISPLAY-PRESENT-INFO-KHR"
  (make-instance 'vk:display-present-info-khr 
                 :next next
                 :src-rect src-rect
                 :dst-rect dst-rect
                 :persistent persistent))

(defun make-surface-capabilities-khr (&key (min-image-count 0)
                                      (max-image-count 0)
                                      (current-extent (vk:make-extent-2d))
                                      (min-image-extent (vk:make-extent-2d))
                                      (max-image-extent (vk:make-extent-2d))
                                      (max-image-array-layers 0)
                                      (supported-transforms nil)
                                      (current-transform nil)
                                      (supported-composite-alpha nil)
                                      (supported-usage-flags nil))
"Creates an instance of SURFACE-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of SURFACE-CAPABILITIES-KHR.


See SURFACE-CAPABILITIES-KHR"
  (make-instance 'vk:surface-capabilities-khr 
                 :min-image-count min-image-count
                 :max-image-count max-image-count
                 :current-extent current-extent
                 :min-image-extent min-image-extent
                 :max-image-extent max-image-extent
                 :max-image-array-layers max-image-array-layers
                 :supported-transforms supported-transforms
                 :current-transform current-transform
                 :supported-composite-alpha supported-composite-alpha
                 :supported-usage-flags supported-usage-flags))

(defun make-android-surface-create-info-khr (&key (next nil) (flags nil)
                                             (window nil))
"Creates an instance of ANDROID-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of ANDROID-SURFACE-CREATE-INFO-KHR.


See ANDROID-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:android-surface-create-info-khr 
                 :next next
                 :flags flags
                 :window window))

(defun make-vi-surface-create-info-nn (&key (next nil) (flags nil) (window nil))
"Creates an instance of VI-SURFACE-CREATE-INFO-NN.
The arguments of this function correspond to the slots of VI-SURFACE-CREATE-INFO-NN.


See VI-SURFACE-CREATE-INFO-NN"
  (make-instance 'vk:vi-surface-create-info-nn 
                 :next next
                 :flags flags
                 :window window))

(defun make-wayland-surface-create-info-khr (&key (next nil) (flags nil)
                                             (display nil) (surface nil))
"Creates an instance of WAYLAND-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of WAYLAND-SURFACE-CREATE-INFO-KHR.


See WAYLAND-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:wayland-surface-create-info-khr 
                 :next next
                 :flags flags
                 :display display
                 :surface surface))

(defun make-win32-surface-create-info-khr (&key (next nil) (flags nil)
                                           (hinstance nil) (hwnd nil))
"Creates an instance of WIN32-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of WIN32-SURFACE-CREATE-INFO-KHR.


See WIN32-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:win32-surface-create-info-khr 
                 :next next
                 :flags flags
                 :hinstance hinstance
                 :hwnd hwnd))

(defun make-xlib-surface-create-info-khr (&key (next nil) (flags nil) (dpy nil)
                                          (window nil))
"Creates an instance of XLIB-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of XLIB-SURFACE-CREATE-INFO-KHR.


See XLIB-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:xlib-surface-create-info-khr 
                 :next next
                 :flags flags
                 :dpy dpy
                 :window window))

(defun make-xcb-surface-create-info-khr (&key (next nil) (flags nil)
                                         (connection nil) (window nil))
"Creates an instance of XCB-SURFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of XCB-SURFACE-CREATE-INFO-KHR.


See XCB-SURFACE-CREATE-INFO-KHR"
  (make-instance 'vk:xcb-surface-create-info-khr 
                 :next next
                 :flags flags
                 :connection connection
                 :window window))

(defun make-direct-fb-surface-create-info-ext (&key (next nil) (flags nil)
                                               (dfb nil) (surface nil))
"Creates an instance of DIRECT-FB-SURFACE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DIRECT-FB-SURFACE-CREATE-INFO-EXT.


See DIRECT-FB-SURFACE-CREATE-INFO-EXT"
  (make-instance 'vk:direct-fb-surface-create-info-ext 
                 :next next
                 :flags flags
                 :dfb dfb
                 :surface surface))

(defun make-image-pipe-surface-create-info-fuchsia (&key (next nil) (flags nil)
                                                    (image-pipe-handle nil))
"Creates an instance of IMAGE-PIPE-SURFACE-CREATE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of IMAGE-PIPE-SURFACE-CREATE-INFO-FUCHSIA.


See IMAGE-PIPE-SURFACE-CREATE-INFO-FUCHSIA"
  (make-instance 'vk:image-pipe-surface-create-info-fuchsia 
                 :next next
                 :flags flags
                 :image-pipe-handle image-pipe-handle))

(defun make-stream-descriptor-surface-create-info-ggp (&key (next nil)
                                                       (flags nil)
                                                       (stream-descriptor nil))
"Creates an instance of STREAM-DESCRIPTOR-SURFACE-CREATE-INFO-GGP.
The arguments of this function correspond to the slots of STREAM-DESCRIPTOR-SURFACE-CREATE-INFO-GGP.


See STREAM-DESCRIPTOR-SURFACE-CREATE-INFO-GGP"
  (make-instance 'vk:stream-descriptor-surface-create-info-ggp 
                 :next next
                 :flags flags
                 :stream-descriptor stream-descriptor))

(defun make-screen-surface-create-info-qnx (&key (next nil) (flags nil)
                                            (context nil) (window nil))
"Creates an instance of SCREEN-SURFACE-CREATE-INFO-QNX.
The arguments of this function correspond to the slots of SCREEN-SURFACE-CREATE-INFO-QNX.


See SCREEN-SURFACE-CREATE-INFO-QNX"
  (make-instance 'vk:screen-surface-create-info-qnx 
                 :next next
                 :flags flags
                 :context context
                 :window window))

(defun make-surface-format-khr (&key (format nil) (color-space nil))
"Creates an instance of SURFACE-FORMAT-KHR.
The arguments of this function correspond to the slots of SURFACE-FORMAT-KHR.


See SURFACE-FORMAT-KHR"
  (make-instance 'vk:surface-format-khr 
                 :format format
                 :color-space color-space))

(defun make-swapchain-create-info-khr (&key (next nil) (flags nil)
                                       (surface nil) (min-image-count 0)
                                       (image-format nil)
                                       (image-color-space nil)
                                       (image-extent (vk:make-extent-2d))
                                       (image-array-layers 0) (image-usage nil)
                                       (image-sharing-mode nil)
                                       (queue-family-indices nil)
                                       (pre-transform nil)
                                       (composite-alpha nil) (present-mode nil)
                                       (clipped nil) (old-swapchain nil))
"Creates an instance of SWAPCHAIN-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of SWAPCHAIN-CREATE-INFO-KHR.


See SWAPCHAIN-CREATE-INFO-KHR"
  (make-instance 'vk:swapchain-create-info-khr 
                 :next next
                 :flags flags
                 :surface surface
                 :min-image-count min-image-count
                 :image-format image-format
                 :image-color-space image-color-space
                 :image-extent image-extent
                 :image-array-layers image-array-layers
                 :image-usage image-usage
                 :image-sharing-mode image-sharing-mode
                 :queue-family-indices queue-family-indices
                 :pre-transform pre-transform
                 :composite-alpha composite-alpha
                 :present-mode present-mode
                 :clipped clipped
                 :old-swapchain old-swapchain))

(defun make-present-info-khr (&key (next nil) (wait-semaphores nil)
                              (swapchains nil) (image-indices nil)
                              (results nil))
"Creates an instance of PRESENT-INFO-KHR.
The arguments of this function correspond to the slots of PRESENT-INFO-KHR.


See PRESENT-INFO-KHR"
  (make-instance 'vk:present-info-khr 
                 :next next
                 :wait-semaphores wait-semaphores
                 :swapchains swapchains
                 :image-indices image-indices
                 :results results))

(defun make-debug-report-callback-create-info-ext (&key (next nil) (flags nil)
                                                   (pfn-callback nil)
                                                   (user-data nil))
"Creates an instance of DEBUG-REPORT-CALLBACK-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-REPORT-CALLBACK-CREATE-INFO-EXT.


See DEBUG-REPORT-CALLBACK-CREATE-INFO-EXT"
  (make-instance 'vk:debug-report-callback-create-info-ext 
                 :next next
                 :flags flags
                 :pfn-callback pfn-callback
                 :user-data user-data))

(defun make-validation-flags-ext (&key (next nil)
                                  (disabled-validation-checks nil))
"Creates an instance of VALIDATION-FLAGS-EXT.
The arguments of this function correspond to the slots of VALIDATION-FLAGS-EXT.


See VALIDATION-FLAGS-EXT"
  (make-instance 'vk:validation-flags-ext 
                 :next next
                 :disabled-validation-checks disabled-validation-checks))

(defun make-validation-features-ext (&key (next nil)
                                     (enabled-validation-features nil)
                                     (disabled-validation-features nil))
"Creates an instance of VALIDATION-FEATURES-EXT.
The arguments of this function correspond to the slots of VALIDATION-FEATURES-EXT.


See VALIDATION-FEATURES-EXT"
  (make-instance 'vk:validation-features-ext 
                 :next next
                 :enabled-validation-features enabled-validation-features
                 :disabled-validation-features disabled-validation-features))

(defun make-pipeline-rasterization-state-rasterization-order-amd (&key
                                                                  (next nil)
                                                                  (rasterization-order nil))
"Creates an instance of PIPELINE-RASTERIZATION-STATE-RASTERIZATION-ORDER-AMD.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-STATE-RASTERIZATION-ORDER-AMD.


See PIPELINE-RASTERIZATION-STATE-RASTERIZATION-ORDER-AMD"
  (make-instance 'vk:pipeline-rasterization-state-rasterization-order-amd 
                 :next next
                 :rasterization-order rasterization-order))

(defun make-debug-marker-object-name-info-ext (&key (next nil)
                                               (object-type nil) (object 0)
                                               (object-name ""))
"Creates an instance of DEBUG-MARKER-OBJECT-NAME-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-MARKER-OBJECT-NAME-INFO-EXT.


See DEBUG-MARKER-OBJECT-NAME-INFO-EXT"
  (make-instance 'vk:debug-marker-object-name-info-ext 
                 :next next
                 :object-type object-type
                 :object object
                 :object-name object-name))

(defun make-debug-marker-object-tag-info-ext (&key (next nil) (object-type nil)
                                              (object 0) (tag-name 0)
                                              (tag-size 0) (tag nil))
"Creates an instance of DEBUG-MARKER-OBJECT-TAG-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-MARKER-OBJECT-TAG-INFO-EXT.


See DEBUG-MARKER-OBJECT-TAG-INFO-EXT"
  (make-instance 'vk:debug-marker-object-tag-info-ext 
                 :next next
                 :object-type object-type
                 :object object
                 :tag-name tag-name
                 :tag-size tag-size
                 :tag tag))

(defun make-debug-marker-marker-info-ext (&key (next nil) (marker-name "")
                                          (color 0.0))
"Creates an instance of DEBUG-MARKER-MARKER-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-MARKER-MARKER-INFO-EXT.


See DEBUG-MARKER-MARKER-INFO-EXT"
  (make-instance 'vk:debug-marker-marker-info-ext 
                 :next next
                 :marker-name marker-name
                 :color color))

(defun make-dedicated-allocation-image-create-info-nv (&key (next nil)
                                                       (dedicated-allocation nil))
"Creates an instance of DEDICATED-ALLOCATION-IMAGE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of DEDICATED-ALLOCATION-IMAGE-CREATE-INFO-NV.


See DEDICATED-ALLOCATION-IMAGE-CREATE-INFO-NV"
  (make-instance 'vk:dedicated-allocation-image-create-info-nv 
                 :next next
                 :dedicated-allocation dedicated-allocation))

(defun make-dedicated-allocation-buffer-create-info-nv (&key (next nil)
                                                        (dedicated-allocation nil))
"Creates an instance of DEDICATED-ALLOCATION-BUFFER-CREATE-INFO-NV.
The arguments of this function correspond to the slots of DEDICATED-ALLOCATION-BUFFER-CREATE-INFO-NV.


See DEDICATED-ALLOCATION-BUFFER-CREATE-INFO-NV"
  (make-instance 'vk:dedicated-allocation-buffer-create-info-nv 
                 :next next
                 :dedicated-allocation dedicated-allocation))

(defun make-dedicated-allocation-memory-allocate-info-nv (&key (next nil)
                                                          (image nil)
                                                          (buffer nil))
"Creates an instance of DEDICATED-ALLOCATION-MEMORY-ALLOCATE-INFO-NV.
The arguments of this function correspond to the slots of DEDICATED-ALLOCATION-MEMORY-ALLOCATE-INFO-NV.


See DEDICATED-ALLOCATION-MEMORY-ALLOCATE-INFO-NV"
  (make-instance 'vk:dedicated-allocation-memory-allocate-info-nv 
                 :next next
                 :image image
                 :buffer buffer))

(defun make-external-image-format-properties-nv (&key
                                                 (image-format-properties nil)
                                                 (external-memory-features nil)
                                                 (export-from-imported-handle-types nil)
                                                 (compatible-handle-types nil))
"Creates an instance of EXTERNAL-IMAGE-FORMAT-PROPERTIES-NV.
The arguments of this function correspond to the slots of EXTERNAL-IMAGE-FORMAT-PROPERTIES-NV.


See EXTERNAL-IMAGE-FORMAT-PROPERTIES-NV"
  (make-instance 'vk:external-image-format-properties-nv 
                 :image-format-properties image-format-properties
                 :external-memory-features external-memory-features
                 :export-from-imported-handle-types export-from-imported-handle-types
                 :compatible-handle-types compatible-handle-types))

(defun make-external-memory-image-create-info-nv (&key (next nil)
                                                  (handle-types nil))
"Creates an instance of EXTERNAL-MEMORY-IMAGE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of EXTERNAL-MEMORY-IMAGE-CREATE-INFO-NV.


See EXTERNAL-MEMORY-IMAGE-CREATE-INFO-NV"
  (make-instance 'vk:external-memory-image-create-info-nv 
                 :next next
                 :handle-types handle-types))

(defun make-export-memory-allocate-info-nv (&key (next nil) (handle-types nil))
"Creates an instance of EXPORT-MEMORY-ALLOCATE-INFO-NV.
The arguments of this function correspond to the slots of EXPORT-MEMORY-ALLOCATE-INFO-NV.


See EXPORT-MEMORY-ALLOCATE-INFO-NV"
  (make-instance 'vk:export-memory-allocate-info-nv 
                 :next next
                 :handle-types handle-types))

(defun make-import-memory-win32-handle-info-nv (&key (next nil)
                                                (handle-type nil) (handle nil))
"Creates an instance of IMPORT-MEMORY-WIN32-HANDLE-INFO-NV.
The arguments of this function correspond to the slots of IMPORT-MEMORY-WIN32-HANDLE-INFO-NV.


See IMPORT-MEMORY-WIN32-HANDLE-INFO-NV"
  (make-instance 'vk:import-memory-win32-handle-info-nv 
                 :next next
                 :handle-type handle-type
                 :handle handle))

(defun make-export-memory-win32-handle-info-nv (&key (next nil)
                                                (attributes nil)
                                                (dw-access nil))
"Creates an instance of EXPORT-MEMORY-WIN32-HANDLE-INFO-NV.
The arguments of this function correspond to the slots of EXPORT-MEMORY-WIN32-HANDLE-INFO-NV.


See EXPORT-MEMORY-WIN32-HANDLE-INFO-NV"
  (make-instance 'vk:export-memory-win32-handle-info-nv 
                 :next next
                 :attributes attributes
                 :dw-access dw-access))

(defun make-win32-keyed-mutex-acquire-release-info-nv (&key (next nil)
                                                       (acquire-syncs nil)
                                                       (acquire-keys nil)
                                                       (acquire-timeout-milliseconds nil)
                                                       (release-syncs nil)
                                                       (release-keys nil))
"Creates an instance of WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-NV.
The arguments of this function correspond to the slots of WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-NV.


See WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-NV"
  (make-instance 'vk:win32-keyed-mutex-acquire-release-info-nv 
                 :next next
                 :acquire-syncs acquire-syncs
                 :acquire-keys acquire-keys
                 :acquire-timeout-milliseconds acquire-timeout-milliseconds
                 :release-syncs release-syncs
                 :release-keys release-keys))

(defun make-physical-device-device-generated-commands-features-nv (&key
                                                                   (next nil)
                                                                   (device-generated-commands nil))
"Creates an instance of PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-FEATURES-NV.


See PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-FEATURES-NV"
  (make-instance 'vk:physical-device-device-generated-commands-features-nv 
                 :next next
                 :device-generated-commands device-generated-commands))

(defun make-device-private-data-create-info-ext (&key (next nil)
                                                 (private-data-slot-request-count 0))
"Creates an instance of DEVICE-PRIVATE-DATA-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DEVICE-PRIVATE-DATA-CREATE-INFO-EXT.


See DEVICE-PRIVATE-DATA-CREATE-INFO-EXT"
  (make-instance 'vk:device-private-data-create-info-ext 
                 :next next
                 :private-data-slot-request-count private-data-slot-request-count))

(defun make-private-data-slot-create-info-ext (&key (next nil) (flags nil))
"Creates an instance of PRIVATE-DATA-SLOT-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PRIVATE-DATA-SLOT-CREATE-INFO-EXT.


See PRIVATE-DATA-SLOT-CREATE-INFO-EXT"
  (make-instance 'vk:private-data-slot-create-info-ext 
                 :next next
                 :flags flags))

(defun make-physical-device-private-data-features-ext (&key (next nil)
                                                       (private-data nil))
"Creates an instance of PHYSICAL-DEVICE-PRIVATE-DATA-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PRIVATE-DATA-FEATURES-EXT.


See PHYSICAL-DEVICE-PRIVATE-DATA-FEATURES-EXT"
  (make-instance 'vk:physical-device-private-data-features-ext 
                 :next next
                 :private-data private-data))

(defun make-physical-device-device-generated-commands-properties-nv (&key
                                                                     (next nil)
                                                                     (max-graphics-shader-group-count 0)
                                                                     (max-indirect-sequence-count 0)
                                                                     (max-indirect-commands-token-count 0)
                                                                     (max-indirect-commands-stream-count 0)
                                                                     (max-indirect-commands-token-offset 0)
                                                                     (max-indirect-commands-stream-stride 0)
                                                                     (min-sequences-count-buffer-offset-alignment 0)
                                                                     (min-sequences-index-buffer-offset-alignment 0)
                                                                     (min-indirect-commands-buffer-offset-alignment 0))
"Creates an instance of PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-PROPERTIES-NV.


See PHYSICAL-DEVICE-DEVICE-GENERATED-COMMANDS-PROPERTIES-NV"
  (make-instance 'vk:physical-device-device-generated-commands-properties-nv 
                 :next next
                 :max-graphics-shader-group-count max-graphics-shader-group-count
                 :max-indirect-sequence-count max-indirect-sequence-count
                 :max-indirect-commands-token-count max-indirect-commands-token-count
                 :max-indirect-commands-stream-count max-indirect-commands-stream-count
                 :max-indirect-commands-token-offset max-indirect-commands-token-offset
                 :max-indirect-commands-stream-stride max-indirect-commands-stream-stride
                 :min-sequences-count-buffer-offset-alignment min-sequences-count-buffer-offset-alignment
                 :min-sequences-index-buffer-offset-alignment min-sequences-index-buffer-offset-alignment
                 :min-indirect-commands-buffer-offset-alignment min-indirect-commands-buffer-offset-alignment))

(defun make-physical-device-multi-draw-properties-ext (&key (next nil)
                                                       (max-multi-draw-count 0))
"Creates an instance of PHYSICAL-DEVICE-MULTI-DRAW-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MULTI-DRAW-PROPERTIES-EXT.


See PHYSICAL-DEVICE-MULTI-DRAW-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-multi-draw-properties-ext 
                 :next next
                 :max-multi-draw-count max-multi-draw-count))

(defun make-graphics-shader-group-create-info-nv (&key (next nil) (stages nil)
                                                  (vertex-input-state nil)
                                                  (tessellation-state nil))
"Creates an instance of GRAPHICS-SHADER-GROUP-CREATE-INFO-NV.
The arguments of this function correspond to the slots of GRAPHICS-SHADER-GROUP-CREATE-INFO-NV.


See GRAPHICS-SHADER-GROUP-CREATE-INFO-NV"
  (make-instance 'vk:graphics-shader-group-create-info-nv 
                 :next next
                 :stages stages
                 :vertex-input-state vertex-input-state
                 :tessellation-state tessellation-state))

(defun make-graphics-pipeline-shader-groups-create-info-nv (&key (next nil)
                                                            (groups nil)
                                                            (pipelines nil))
"Creates an instance of GRAPHICS-PIPELINE-SHADER-GROUPS-CREATE-INFO-NV.
The arguments of this function correspond to the slots of GRAPHICS-PIPELINE-SHADER-GROUPS-CREATE-INFO-NV.


See GRAPHICS-PIPELINE-SHADER-GROUPS-CREATE-INFO-NV"
  (make-instance 'vk:graphics-pipeline-shader-groups-create-info-nv 
                 :next next
                 :groups groups
                 :pipelines pipelines))

(defun make-bind-shader-group-indirect-command-nv (&key (group-index 0))
"Creates an instance of BIND-SHADER-GROUP-INDIRECT-COMMAND-NV.
The arguments of this function correspond to the slots of BIND-SHADER-GROUP-INDIRECT-COMMAND-NV.


See BIND-SHADER-GROUP-INDIRECT-COMMAND-NV"
  (make-instance 'vk:bind-shader-group-indirect-command-nv 
                 :group-index group-index))

(defun make-bind-index-buffer-indirect-command-nv (&key (buffer-address 0)
                                                   (size 0) (index-type nil))
"Creates an instance of BIND-INDEX-BUFFER-INDIRECT-COMMAND-NV.
The arguments of this function correspond to the slots of BIND-INDEX-BUFFER-INDIRECT-COMMAND-NV.


See BIND-INDEX-BUFFER-INDIRECT-COMMAND-NV"
  (make-instance 'vk:bind-index-buffer-indirect-command-nv 
                 :buffer-address buffer-address
                 :size size
                 :index-type index-type))

(defun make-bind-vertex-buffer-indirect-command-nv (&key (buffer-address 0)
                                                    (size 0) (stride 0))
"Creates an instance of BIND-VERTEX-BUFFER-INDIRECT-COMMAND-NV.
The arguments of this function correspond to the slots of BIND-VERTEX-BUFFER-INDIRECT-COMMAND-NV.


See BIND-VERTEX-BUFFER-INDIRECT-COMMAND-NV"
  (make-instance 'vk:bind-vertex-buffer-indirect-command-nv 
                 :buffer-address buffer-address
                 :size size
                 :stride stride))

(defun make-set-state-flags-indirect-command-nv (&key (data 0))
"Creates an instance of SET-STATE-FLAGS-INDIRECT-COMMAND-NV.
The arguments of this function correspond to the slots of SET-STATE-FLAGS-INDIRECT-COMMAND-NV.


See SET-STATE-FLAGS-INDIRECT-COMMAND-NV"
  (make-instance 'vk:set-state-flags-indirect-command-nv 
                 :data data))

(defun make-indirect-commands-stream-nv (&key (buffer nil) (offset 0))
"Creates an instance of INDIRECT-COMMANDS-STREAM-NV.
The arguments of this function correspond to the slots of INDIRECT-COMMANDS-STREAM-NV.


See INDIRECT-COMMANDS-STREAM-NV"
  (make-instance 'vk:indirect-commands-stream-nv 
                 :buffer buffer
                 :offset offset))

(defun make-indirect-commands-layout-token-nv (&key (next nil) (token-type nil)
                                               (stream 0) (offset 0)
                                               (vertex-binding-unit 0)
                                               (vertex-dynamic-stride nil)
                                               (pushconstant-pipeline-layout nil)
                                               (pushconstant-shader-stage-flags nil)
                                               (pushconstant-offset 0)
                                               (pushconstant-size 0)
                                               (indirect-state-flags nil)
                                               (index-types nil)
                                               (index-type-values nil))
"Creates an instance of INDIRECT-COMMANDS-LAYOUT-TOKEN-NV.
The arguments of this function correspond to the slots of INDIRECT-COMMANDS-LAYOUT-TOKEN-NV.


See INDIRECT-COMMANDS-LAYOUT-TOKEN-NV"
  (make-instance 'vk:indirect-commands-layout-token-nv 
                 :next next
                 :token-type token-type
                 :stream stream
                 :offset offset
                 :vertex-binding-unit vertex-binding-unit
                 :vertex-dynamic-stride vertex-dynamic-stride
                 :pushconstant-pipeline-layout pushconstant-pipeline-layout
                 :pushconstant-shader-stage-flags pushconstant-shader-stage-flags
                 :pushconstant-offset pushconstant-offset
                 :pushconstant-size pushconstant-size
                 :indirect-state-flags indirect-state-flags
                 :index-types index-types
                 :index-type-values index-type-values))

(defun make-indirect-commands-layout-create-info-nv (&key (next nil)
                                                     (flags nil)
                                                     (pipeline-bind-point nil)
                                                     (tokens nil)
                                                     (stream-strides nil))
"Creates an instance of INDIRECT-COMMANDS-LAYOUT-CREATE-INFO-NV.
The arguments of this function correspond to the slots of INDIRECT-COMMANDS-LAYOUT-CREATE-INFO-NV.


See INDIRECT-COMMANDS-LAYOUT-CREATE-INFO-NV"
  (make-instance 'vk:indirect-commands-layout-create-info-nv 
                 :next next
                 :flags flags
                 :pipeline-bind-point pipeline-bind-point
                 :tokens tokens
                 :stream-strides stream-strides))

(defun make-generated-commands-info-nv (&key (next nil)
                                        (pipeline-bind-point nil)
                                        (pipeline nil)
                                        (indirect-commands-layout nil)
                                        (streams nil) (sequences-count 0)
                                        (preprocess-buffer nil)
                                        (preprocess-offset 0)
                                        (preprocess-size 0)
                                        (sequences-count-buffer nil)
                                        (sequences-count-offset 0)
                                        (sequences-index-buffer nil)
                                        (sequences-index-offset 0))
"Creates an instance of GENERATED-COMMANDS-INFO-NV.
The arguments of this function correspond to the slots of GENERATED-COMMANDS-INFO-NV.


See GENERATED-COMMANDS-INFO-NV"
  (make-instance 'vk:generated-commands-info-nv 
                 :next next
                 :pipeline-bind-point pipeline-bind-point
                 :pipeline pipeline
                 :indirect-commands-layout indirect-commands-layout
                 :streams streams
                 :sequences-count sequences-count
                 :preprocess-buffer preprocess-buffer
                 :preprocess-offset preprocess-offset
                 :preprocess-size preprocess-size
                 :sequences-count-buffer sequences-count-buffer
                 :sequences-count-offset sequences-count-offset
                 :sequences-index-buffer sequences-index-buffer
                 :sequences-index-offset sequences-index-offset))

(defun make-generated-commands-memory-requirements-info-nv (&key (next nil)
                                                            (pipeline-bind-point nil)
                                                            (pipeline nil)
                                                            (indirect-commands-layout nil)
                                                            (max-sequences-count 0))
"Creates an instance of GENERATED-COMMANDS-MEMORY-REQUIREMENTS-INFO-NV.
The arguments of this function correspond to the slots of GENERATED-COMMANDS-MEMORY-REQUIREMENTS-INFO-NV.


See GENERATED-COMMANDS-MEMORY-REQUIREMENTS-INFO-NV"
  (make-instance 'vk:generated-commands-memory-requirements-info-nv 
                 :next next
                 :pipeline-bind-point pipeline-bind-point
                 :pipeline pipeline
                 :indirect-commands-layout indirect-commands-layout
                 :max-sequences-count max-sequences-count))

(defun make-physical-device-features-2 (&key (next nil)
                                        (features (vk:make-physical-device-features)))
"Creates an instance of PHYSICAL-DEVICE-FEATURES-2.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FEATURES-2.


See PHYSICAL-DEVICE-FEATURES-2"
  (make-instance 'vk:physical-device-features-2 
                 :next next
                 :features features))

(defun make-physical-device-properties-2 (&key (next nil) (properties nil))
"Creates an instance of PHYSICAL-DEVICE-PROPERTIES-2.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROPERTIES-2.


See PHYSICAL-DEVICE-PROPERTIES-2"
  (make-instance 'vk:physical-device-properties-2 
                 :next next
                 :properties properties))

(defun make-format-properties-2 (&key (next nil) (format-properties nil))
"Creates an instance of FORMAT-PROPERTIES-2.
The arguments of this function correspond to the slots of FORMAT-PROPERTIES-2.


See FORMAT-PROPERTIES-2"
  (make-instance 'vk:format-properties-2 
                 :next next
                 :format-properties format-properties))

(defun make-image-format-properties-2 (&key (next nil)
                                       (image-format-properties nil))
"Creates an instance of IMAGE-FORMAT-PROPERTIES-2.
The arguments of this function correspond to the slots of IMAGE-FORMAT-PROPERTIES-2.


See IMAGE-FORMAT-PROPERTIES-2"
  (make-instance 'vk:image-format-properties-2 
                 :next next
                 :image-format-properties image-format-properties))

(defun make-physical-device-image-format-info-2 (&key (next nil) (format nil)
                                                 (type nil) (tiling nil)
                                                 (usage nil) (flags nil))
"Creates an instance of PHYSICAL-DEVICE-IMAGE-FORMAT-INFO-2.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-IMAGE-FORMAT-INFO-2.


See PHYSICAL-DEVICE-IMAGE-FORMAT-INFO-2"
  (make-instance 'vk:physical-device-image-format-info-2 
                 :next next
                 :format format
                 :type type
                 :tiling tiling
                 :usage usage
                 :flags flags))

(defun make-queue-family-properties-2 (&key (next nil)
                                       (queue-family-properties nil))
"Creates an instance of QUEUE-FAMILY-PROPERTIES-2.
The arguments of this function correspond to the slots of QUEUE-FAMILY-PROPERTIES-2.


See QUEUE-FAMILY-PROPERTIES-2"
  (make-instance 'vk:queue-family-properties-2 
                 :next next
                 :queue-family-properties queue-family-properties))

(defun make-physical-device-memory-properties-2 (&key (next nil)
                                                 (memory-properties nil))
"Creates an instance of PHYSICAL-DEVICE-MEMORY-PROPERTIES-2.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MEMORY-PROPERTIES-2.


See PHYSICAL-DEVICE-MEMORY-PROPERTIES-2"
  (make-instance 'vk:physical-device-memory-properties-2 
                 :next next
                 :memory-properties memory-properties))

(defun make-sparse-image-format-properties-2 (&key (next nil) (properties nil))
"Creates an instance of SPARSE-IMAGE-FORMAT-PROPERTIES-2.
The arguments of this function correspond to the slots of SPARSE-IMAGE-FORMAT-PROPERTIES-2.


See SPARSE-IMAGE-FORMAT-PROPERTIES-2"
  (make-instance 'vk:sparse-image-format-properties-2 
                 :next next
                 :properties properties))

(defun make-physical-device-sparse-image-format-info-2 (&key (next nil)
                                                        (format nil) (type nil)
                                                        (samples nil)
                                                        (usage nil)
                                                        (tiling nil))
"Creates an instance of PHYSICAL-DEVICE-SPARSE-IMAGE-FORMAT-INFO-2.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SPARSE-IMAGE-FORMAT-INFO-2.


See PHYSICAL-DEVICE-SPARSE-IMAGE-FORMAT-INFO-2"
  (make-instance 'vk:physical-device-sparse-image-format-info-2 
                 :next next
                 :format format
                 :type type
                 :samples samples
                 :usage usage
                 :tiling tiling))

(defun make-physical-device-push-descriptor-properties-khr (&key (next nil)
                                                            (max-push-descriptors 0))
"Creates an instance of PHYSICAL-DEVICE-PUSH-DESCRIPTOR-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PUSH-DESCRIPTOR-PROPERTIES-KHR.


See PHYSICAL-DEVICE-PUSH-DESCRIPTOR-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-push-descriptor-properties-khr 
                 :next next
                 :max-push-descriptors max-push-descriptors))

(defun make-conformance-version (&key (major 0) (minor 0) (subminor 0)
                                 (patch 0))
"Creates an instance of CONFORMANCE-VERSION.
The arguments of this function correspond to the slots of CONFORMANCE-VERSION.


See CONFORMANCE-VERSION"
  (make-instance 'vk:conformance-version 
                 :major major
                 :minor minor
                 :subminor subminor
                 :patch patch))

(defun make-physical-device-driver-properties (&key (next nil) (driver-id nil)
                                               (driver-name "")
                                               (driver-info "")
                                               (conformance-version (vk:make-conformance-version)))
"Creates an instance of PHYSICAL-DEVICE-DRIVER-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DRIVER-PROPERTIES.


See PHYSICAL-DEVICE-DRIVER-PROPERTIES"
  (make-instance 'vk:physical-device-driver-properties 
                 :next next
                 :driver-id driver-id
                 :driver-name driver-name
                 :driver-info driver-info
                 :conformance-version conformance-version))

(defun make-present-regions-khr (&key (next nil) (swapchain-count 0)
                                 (regions nil))
"Creates an instance of PRESENT-REGIONS-KHR.
The arguments of this function correspond to the slots of PRESENT-REGIONS-KHR.


See PRESENT-REGIONS-KHR"
  (make-instance 'vk:present-regions-khr 
                 :next next
                 :swapchain-count swapchain-count
                 :regions regions))

(defun make-present-region-khr (&key (rectangles nil))
"Creates an instance of PRESENT-REGION-KHR.
The arguments of this function correspond to the slots of PRESENT-REGION-KHR.


See PRESENT-REGION-KHR"
  (make-instance 'vk:present-region-khr 
                 :rectangles rectangles))

(defun make-rect-layer-khr (&key (offset (vk:make-offset-2d))
                            (extent (vk:make-extent-2d)) (layer 0))
"Creates an instance of RECT-LAYER-KHR.
The arguments of this function correspond to the slots of RECT-LAYER-KHR.


See RECT-LAYER-KHR"
  (make-instance 'vk:rect-layer-khr 
                 :offset offset
                 :extent extent
                 :layer layer))

(defun make-physical-device-variable-pointers-features (&key (next nil)
                                                        (variable-pointers-storage-buffer nil)
                                                        (variable-pointers nil))
"Creates an instance of PHYSICAL-DEVICE-VARIABLE-POINTERS-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VARIABLE-POINTERS-FEATURES.


See PHYSICAL-DEVICE-VARIABLE-POINTERS-FEATURES"
  (make-instance 'vk:physical-device-variable-pointers-features 
                 :next next
                 :variable-pointers-storage-buffer variable-pointers-storage-buffer
                 :variable-pointers variable-pointers))

(defun make-external-memory-properties (&key (external-memory-features nil)
                                        (export-from-imported-handle-types nil)
                                        (compatible-handle-types nil))
"Creates an instance of EXTERNAL-MEMORY-PROPERTIES.
The arguments of this function correspond to the slots of EXTERNAL-MEMORY-PROPERTIES.


See EXTERNAL-MEMORY-PROPERTIES"
  (make-instance 'vk:external-memory-properties 
                 :external-memory-features external-memory-features
                 :export-from-imported-handle-types export-from-imported-handle-types
                 :compatible-handle-types compatible-handle-types))

(defun make-physical-device-external-image-format-info (&key (next nil)
                                                        (handle-type nil))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-IMAGE-FORMAT-INFO.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-IMAGE-FORMAT-INFO.


See PHYSICAL-DEVICE-EXTERNAL-IMAGE-FORMAT-INFO"
  (make-instance 'vk:physical-device-external-image-format-info 
                 :next next
                 :handle-type handle-type))

(defun make-external-image-format-properties (&key (next nil)
                                              (external-memory-properties nil))
"Creates an instance of EXTERNAL-IMAGE-FORMAT-PROPERTIES.
The arguments of this function correspond to the slots of EXTERNAL-IMAGE-FORMAT-PROPERTIES.


See EXTERNAL-IMAGE-FORMAT-PROPERTIES"
  (make-instance 'vk:external-image-format-properties 
                 :next next
                 :external-memory-properties external-memory-properties))

(defun make-physical-device-external-buffer-info (&key (next nil) (flags nil)
                                                  (usage nil) (handle-type nil))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-BUFFER-INFO.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-BUFFER-INFO.


See PHYSICAL-DEVICE-EXTERNAL-BUFFER-INFO"
  (make-instance 'vk:physical-device-external-buffer-info 
                 :next next
                 :flags flags
                 :usage usage
                 :handle-type handle-type))

(defun make-external-buffer-properties (&key (next nil)
                                        (external-memory-properties nil))
"Creates an instance of EXTERNAL-BUFFER-PROPERTIES.
The arguments of this function correspond to the slots of EXTERNAL-BUFFER-PROPERTIES.


See EXTERNAL-BUFFER-PROPERTIES"
  (make-instance 'vk:external-buffer-properties 
                 :next next
                 :external-memory-properties external-memory-properties))

(defun make-physical-device-id-properties (&key (next nil) (device-uuid 0)
                                           (driver-uuid 0) (device-luid 0)
                                           (device-node-mask 0)
                                           (device-luid-valid nil))
"Creates an instance of PHYSICAL-DEVICE-ID-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ID-PROPERTIES.


See PHYSICAL-DEVICE-ID-PROPERTIES"
  (make-instance 'vk:physical-device-id-properties 
                 :next next
                 :device-uuid device-uuid
                 :driver-uuid driver-uuid
                 :device-luid device-luid
                 :device-node-mask device-node-mask
                 :device-luid-valid device-luid-valid))

(defun make-external-memory-image-create-info (&key (next nil)
                                               (handle-types nil))
"Creates an instance of EXTERNAL-MEMORY-IMAGE-CREATE-INFO.
The arguments of this function correspond to the slots of EXTERNAL-MEMORY-IMAGE-CREATE-INFO.


See EXTERNAL-MEMORY-IMAGE-CREATE-INFO"
  (make-instance 'vk:external-memory-image-create-info 
                 :next next
                 :handle-types handle-types))

(defun make-external-memory-buffer-create-info (&key (next nil)
                                                (handle-types nil))
"Creates an instance of EXTERNAL-MEMORY-BUFFER-CREATE-INFO.
The arguments of this function correspond to the slots of EXTERNAL-MEMORY-BUFFER-CREATE-INFO.


See EXTERNAL-MEMORY-BUFFER-CREATE-INFO"
  (make-instance 'vk:external-memory-buffer-create-info 
                 :next next
                 :handle-types handle-types))

(defun make-export-memory-allocate-info (&key (next nil) (handle-types nil))
"Creates an instance of EXPORT-MEMORY-ALLOCATE-INFO.
The arguments of this function correspond to the slots of EXPORT-MEMORY-ALLOCATE-INFO.


See EXPORT-MEMORY-ALLOCATE-INFO"
  (make-instance 'vk:export-memory-allocate-info 
                 :next next
                 :handle-types handle-types))

(defun make-import-memory-win32-handle-info-khr (&key (next nil)
                                                 (handle-type nil) (handle nil)
                                                 (name nil))
"Creates an instance of IMPORT-MEMORY-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-MEMORY-WIN32-HANDLE-INFO-KHR.


See IMPORT-MEMORY-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:import-memory-win32-handle-info-khr 
                 :next next
                 :handle-type handle-type
                 :handle handle
                 :name name))

(defun make-export-memory-win32-handle-info-khr (&key (next nil)
                                                 (attributes nil)
                                                 (dw-access nil) (name nil))
"Creates an instance of EXPORT-MEMORY-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of EXPORT-MEMORY-WIN32-HANDLE-INFO-KHR.


See EXPORT-MEMORY-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:export-memory-win32-handle-info-khr 
                 :next next
                 :attributes attributes
                 :dw-access dw-access
                 :name name))

(defun make-import-memory-zircon-handle-info-fuchsia (&key (next nil)
                                                      (handle-type nil)
                                                      (handle nil))
"Creates an instance of IMPORT-MEMORY-ZIRCON-HANDLE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of IMPORT-MEMORY-ZIRCON-HANDLE-INFO-FUCHSIA.


See IMPORT-MEMORY-ZIRCON-HANDLE-INFO-FUCHSIA"
  (make-instance 'vk:import-memory-zircon-handle-info-fuchsia 
                 :next next
                 :handle-type handle-type
                 :handle handle))

(defun make-memory-zircon-handle-properties-fuchsia (&key (next nil)
                                                     (memory-type-bits 0))
"Creates an instance of MEMORY-ZIRCON-HANDLE-PROPERTIES-FUCHSIA.
The arguments of this function correspond to the slots of MEMORY-ZIRCON-HANDLE-PROPERTIES-FUCHSIA.


See MEMORY-ZIRCON-HANDLE-PROPERTIES-FUCHSIA"
  (make-instance 'vk:memory-zircon-handle-properties-fuchsia 
                 :next next
                 :memory-type-bits memory-type-bits))

(defun make-memory-get-zircon-handle-info-fuchsia (&key (next nil) (memory nil)
                                                   (handle-type nil))
"Creates an instance of MEMORY-GET-ZIRCON-HANDLE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of MEMORY-GET-ZIRCON-HANDLE-INFO-FUCHSIA.


See MEMORY-GET-ZIRCON-HANDLE-INFO-FUCHSIA"
  (make-instance 'vk:memory-get-zircon-handle-info-fuchsia 
                 :next next
                 :memory memory
                 :handle-type handle-type))

(defun make-memory-win32-handle-properties-khr (&key (next nil)
                                                (memory-type-bits 0))
"Creates an instance of MEMORY-WIN32-HANDLE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of MEMORY-WIN32-HANDLE-PROPERTIES-KHR.


See MEMORY-WIN32-HANDLE-PROPERTIES-KHR"
  (make-instance 'vk:memory-win32-handle-properties-khr 
                 :next next
                 :memory-type-bits memory-type-bits))

(defun make-memory-get-win32-handle-info-khr (&key (next nil) (memory nil)
                                              (handle-type nil))
"Creates an instance of MEMORY-GET-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of MEMORY-GET-WIN32-HANDLE-INFO-KHR.


See MEMORY-GET-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:memory-get-win32-handle-info-khr 
                 :next next
                 :memory memory
                 :handle-type handle-type))

(defun make-import-memory-fd-info-khr (&key (next nil) (handle-type nil) (fd 0))
"Creates an instance of IMPORT-MEMORY-FD-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-MEMORY-FD-INFO-KHR.


See IMPORT-MEMORY-FD-INFO-KHR"
  (make-instance 'vk:import-memory-fd-info-khr 
                 :next next
                 :handle-type handle-type
                 :fd fd))

(defun make-memory-fd-properties-khr (&key (next nil) (memory-type-bits 0))
"Creates an instance of MEMORY-FD-PROPERTIES-KHR.
The arguments of this function correspond to the slots of MEMORY-FD-PROPERTIES-KHR.


See MEMORY-FD-PROPERTIES-KHR"
  (make-instance 'vk:memory-fd-properties-khr 
                 :next next
                 :memory-type-bits memory-type-bits))

(defun make-memory-get-fd-info-khr (&key (next nil) (memory nil)
                                    (handle-type nil))
"Creates an instance of MEMORY-GET-FD-INFO-KHR.
The arguments of this function correspond to the slots of MEMORY-GET-FD-INFO-KHR.


See MEMORY-GET-FD-INFO-KHR"
  (make-instance 'vk:memory-get-fd-info-khr 
                 :next next
                 :memory memory
                 :handle-type handle-type))

(defun make-win32-keyed-mutex-acquire-release-info-khr (&key (next nil)
                                                        (acquire-syncs nil)
                                                        (acquire-keys nil)
                                                        (acquire-timeouts nil)
                                                        (release-syncs nil)
                                                        (release-keys nil))
"Creates an instance of WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-KHR.
The arguments of this function correspond to the slots of WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-KHR.


See WIN32-KEYED-MUTEX-ACQUIRE-RELEASE-INFO-KHR"
  (make-instance 'vk:win32-keyed-mutex-acquire-release-info-khr 
                 :next next
                 :acquire-syncs acquire-syncs
                 :acquire-keys acquire-keys
                 :acquire-timeouts acquire-timeouts
                 :release-syncs release-syncs
                 :release-keys release-keys))

(defun make-physical-device-external-semaphore-info (&key (next nil)
                                                     (handle-type nil))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-SEMAPHORE-INFO.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-SEMAPHORE-INFO.


See PHYSICAL-DEVICE-EXTERNAL-SEMAPHORE-INFO"
  (make-instance 'vk:physical-device-external-semaphore-info 
                 :next next
                 :handle-type handle-type))

(defun make-external-semaphore-properties (&key (next nil)
                                           (export-from-imported-handle-types nil)
                                           (compatible-handle-types nil)
                                           (external-semaphore-features nil))
"Creates an instance of EXTERNAL-SEMAPHORE-PROPERTIES.
The arguments of this function correspond to the slots of EXTERNAL-SEMAPHORE-PROPERTIES.


See EXTERNAL-SEMAPHORE-PROPERTIES"
  (make-instance 'vk:external-semaphore-properties 
                 :next next
                 :export-from-imported-handle-types export-from-imported-handle-types
                 :compatible-handle-types compatible-handle-types
                 :external-semaphore-features external-semaphore-features))

(defun make-export-semaphore-create-info (&key (next nil) (handle-types nil))
"Creates an instance of EXPORT-SEMAPHORE-CREATE-INFO.
The arguments of this function correspond to the slots of EXPORT-SEMAPHORE-CREATE-INFO.


See EXPORT-SEMAPHORE-CREATE-INFO"
  (make-instance 'vk:export-semaphore-create-info 
                 :next next
                 :handle-types handle-types))

(defun make-import-semaphore-win32-handle-info-khr (&key (next nil)
                                                    (semaphore nil) (flags nil)
                                                    (handle-type nil)
                                                    (handle nil) (name nil))
"Creates an instance of IMPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR.


See IMPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:import-semaphore-win32-handle-info-khr 
                 :next next
                 :semaphore semaphore
                 :flags flags
                 :handle-type handle-type
                 :handle handle
                 :name name))

(defun make-export-semaphore-win32-handle-info-khr (&key (next nil)
                                                    (attributes nil)
                                                    (dw-access nil) (name nil))
"Creates an instance of EXPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of EXPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR.


See EXPORT-SEMAPHORE-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:export-semaphore-win32-handle-info-khr 
                 :next next
                 :attributes attributes
                 :dw-access dw-access
                 :name name))

(defun make-d-3d-1-2-fence-submit-info-khr (&key (next nil)
                                            (wait-semaphore-values nil)
                                            (signal-semaphore-values nil))
"Creates an instance of D-3D-1-2-FENCE-SUBMIT-INFO-KHR.
The arguments of this function correspond to the slots of D-3D-1-2-FENCE-SUBMIT-INFO-KHR.


See D-3D-1-2-FENCE-SUBMIT-INFO-KHR"
  (make-instance 'vk:d-3d-1-2-fence-submit-info-khr 
                 :next next
                 :wait-semaphore-values wait-semaphore-values
                 :signal-semaphore-values signal-semaphore-values))

(defun make-semaphore-get-win32-handle-info-khr (&key (next nil)
                                                 (semaphore nil)
                                                 (handle-type nil))
"Creates an instance of SEMAPHORE-GET-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of SEMAPHORE-GET-WIN32-HANDLE-INFO-KHR.


See SEMAPHORE-GET-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:semaphore-get-win32-handle-info-khr 
                 :next next
                 :semaphore semaphore
                 :handle-type handle-type))

(defun make-import-semaphore-fd-info-khr (&key (next nil) (semaphore nil)
                                          (flags nil) (handle-type nil) (fd 0))
"Creates an instance of IMPORT-SEMAPHORE-FD-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-SEMAPHORE-FD-INFO-KHR.


See IMPORT-SEMAPHORE-FD-INFO-KHR"
  (make-instance 'vk:import-semaphore-fd-info-khr 
                 :next next
                 :semaphore semaphore
                 :flags flags
                 :handle-type handle-type
                 :fd fd))

(defun make-semaphore-get-fd-info-khr (&key (next nil) (semaphore nil)
                                       (handle-type nil))
"Creates an instance of SEMAPHORE-GET-FD-INFO-KHR.
The arguments of this function correspond to the slots of SEMAPHORE-GET-FD-INFO-KHR.


See SEMAPHORE-GET-FD-INFO-KHR"
  (make-instance 'vk:semaphore-get-fd-info-khr 
                 :next next
                 :semaphore semaphore
                 :handle-type handle-type))

(defun make-import-semaphore-zircon-handle-info-fuchsia (&key (next nil)
                                                         (semaphore nil)
                                                         (flags nil)
                                                         (handle-type nil)
                                                         (zircon-handle nil))
"Creates an instance of IMPORT-SEMAPHORE-ZIRCON-HANDLE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of IMPORT-SEMAPHORE-ZIRCON-HANDLE-INFO-FUCHSIA.


See IMPORT-SEMAPHORE-ZIRCON-HANDLE-INFO-FUCHSIA"
  (make-instance 'vk:import-semaphore-zircon-handle-info-fuchsia 
                 :next next
                 :semaphore semaphore
                 :flags flags
                 :handle-type handle-type
                 :zircon-handle zircon-handle))

(defun make-semaphore-get-zircon-handle-info-fuchsia (&key (next nil)
                                                      (semaphore nil)
                                                      (handle-type nil))
"Creates an instance of SEMAPHORE-GET-ZIRCON-HANDLE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of SEMAPHORE-GET-ZIRCON-HANDLE-INFO-FUCHSIA.


See SEMAPHORE-GET-ZIRCON-HANDLE-INFO-FUCHSIA"
  (make-instance 'vk:semaphore-get-zircon-handle-info-fuchsia 
                 :next next
                 :semaphore semaphore
                 :handle-type handle-type))

(defun make-physical-device-external-fence-info (&key (next nil)
                                                 (handle-type nil))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-FENCE-INFO.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-FENCE-INFO.


See PHYSICAL-DEVICE-EXTERNAL-FENCE-INFO"
  (make-instance 'vk:physical-device-external-fence-info 
                 :next next
                 :handle-type handle-type))

(defun make-external-fence-properties (&key (next nil)
                                       (export-from-imported-handle-types nil)
                                       (compatible-handle-types nil)
                                       (external-fence-features nil))
"Creates an instance of EXTERNAL-FENCE-PROPERTIES.
The arguments of this function correspond to the slots of EXTERNAL-FENCE-PROPERTIES.


See EXTERNAL-FENCE-PROPERTIES"
  (make-instance 'vk:external-fence-properties 
                 :next next
                 :export-from-imported-handle-types export-from-imported-handle-types
                 :compatible-handle-types compatible-handle-types
                 :external-fence-features external-fence-features))

(defun make-export-fence-create-info (&key (next nil) (handle-types nil))
"Creates an instance of EXPORT-FENCE-CREATE-INFO.
The arguments of this function correspond to the slots of EXPORT-FENCE-CREATE-INFO.


See EXPORT-FENCE-CREATE-INFO"
  (make-instance 'vk:export-fence-create-info 
                 :next next
                 :handle-types handle-types))

(defun make-import-fence-win32-handle-info-khr (&key (next nil) (fence nil)
                                                (flags nil) (handle-type nil)
                                                (handle nil) (name nil))
"Creates an instance of IMPORT-FENCE-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-FENCE-WIN32-HANDLE-INFO-KHR.


See IMPORT-FENCE-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:import-fence-win32-handle-info-khr 
                 :next next
                 :fence fence
                 :flags flags
                 :handle-type handle-type
                 :handle handle
                 :name name))

(defun make-export-fence-win32-handle-info-khr (&key (next nil)
                                                (attributes nil)
                                                (dw-access nil) (name nil))
"Creates an instance of EXPORT-FENCE-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of EXPORT-FENCE-WIN32-HANDLE-INFO-KHR.


See EXPORT-FENCE-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:export-fence-win32-handle-info-khr 
                 :next next
                 :attributes attributes
                 :dw-access dw-access
                 :name name))

(defun make-fence-get-win32-handle-info-khr (&key (next nil) (fence nil)
                                             (handle-type nil))
"Creates an instance of FENCE-GET-WIN32-HANDLE-INFO-KHR.
The arguments of this function correspond to the slots of FENCE-GET-WIN32-HANDLE-INFO-KHR.


See FENCE-GET-WIN32-HANDLE-INFO-KHR"
  (make-instance 'vk:fence-get-win32-handle-info-khr 
                 :next next
                 :fence fence
                 :handle-type handle-type))

(defun make-import-fence-fd-info-khr (&key (next nil) (fence nil) (flags nil)
                                      (handle-type nil) (fd 0))
"Creates an instance of IMPORT-FENCE-FD-INFO-KHR.
The arguments of this function correspond to the slots of IMPORT-FENCE-FD-INFO-KHR.


See IMPORT-FENCE-FD-INFO-KHR"
  (make-instance 'vk:import-fence-fd-info-khr 
                 :next next
                 :fence fence
                 :flags flags
                 :handle-type handle-type
                 :fd fd))

(defun make-fence-get-fd-info-khr (&key (next nil) (fence nil)
                                   (handle-type nil))
"Creates an instance of FENCE-GET-FD-INFO-KHR.
The arguments of this function correspond to the slots of FENCE-GET-FD-INFO-KHR.


See FENCE-GET-FD-INFO-KHR"
  (make-instance 'vk:fence-get-fd-info-khr 
                 :next next
                 :fence fence
                 :handle-type handle-type))

(defun make-physical-device-multiview-features (&key (next nil) (multiview nil)
                                                (multiview-geometry-shader nil)
                                                (multiview-tessellation-shader nil))
"Creates an instance of PHYSICAL-DEVICE-MULTIVIEW-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MULTIVIEW-FEATURES.


See PHYSICAL-DEVICE-MULTIVIEW-FEATURES"
  (make-instance 'vk:physical-device-multiview-features 
                 :next next
                 :multiview multiview
                 :multiview-geometry-shader multiview-geometry-shader
                 :multiview-tessellation-shader multiview-tessellation-shader))

(defun make-physical-device-multiview-properties (&key (next nil)
                                                  (max-multiview-view-count 0)
                                                  (max-multiview-instance-index 0))
"Creates an instance of PHYSICAL-DEVICE-MULTIVIEW-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MULTIVIEW-PROPERTIES.


See PHYSICAL-DEVICE-MULTIVIEW-PROPERTIES"
  (make-instance 'vk:physical-device-multiview-properties 
                 :next next
                 :max-multiview-view-count max-multiview-view-count
                 :max-multiview-instance-index max-multiview-instance-index))

(defun make-render-pass-multiview-create-info (&key (next nil) (view-masks nil)
                                               (view-offsets nil)
                                               (correlation-masks nil))
"Creates an instance of RENDER-PASS-MULTIVIEW-CREATE-INFO.
The arguments of this function correspond to the slots of RENDER-PASS-MULTIVIEW-CREATE-INFO.


See RENDER-PASS-MULTIVIEW-CREATE-INFO"
  (make-instance 'vk:render-pass-multiview-create-info 
                 :next next
                 :view-masks view-masks
                 :view-offsets view-offsets
                 :correlation-masks correlation-masks))

(defun make-surface-capabilities-2-ext (&key (next nil) (min-image-count 0)
                                        (max-image-count 0)
                                        (current-extent (vk:make-extent-2d))
                                        (min-image-extent (vk:make-extent-2d))
                                        (max-image-extent (vk:make-extent-2d))
                                        (max-image-array-layers 0)
                                        (supported-transforms nil)
                                        (current-transform nil)
                                        (supported-composite-alpha nil)
                                        (supported-usage-flags nil)
                                        (supported-surface-counters nil))
"Creates an instance of SURFACE-CAPABILITIES-2-EXT.
The arguments of this function correspond to the slots of SURFACE-CAPABILITIES-2-EXT.


See SURFACE-CAPABILITIES-2-EXT"
  (make-instance 'vk:surface-capabilities-2-ext 
                 :next next
                 :min-image-count min-image-count
                 :max-image-count max-image-count
                 :current-extent current-extent
                 :min-image-extent min-image-extent
                 :max-image-extent max-image-extent
                 :max-image-array-layers max-image-array-layers
                 :supported-transforms supported-transforms
                 :current-transform current-transform
                 :supported-composite-alpha supported-composite-alpha
                 :supported-usage-flags supported-usage-flags
                 :supported-surface-counters supported-surface-counters))

(defun make-display-power-info-ext (&key (next nil) (power-state nil))
"Creates an instance of DISPLAY-POWER-INFO-EXT.
The arguments of this function correspond to the slots of DISPLAY-POWER-INFO-EXT.


See DISPLAY-POWER-INFO-EXT"
  (make-instance 'vk:display-power-info-ext 
                 :next next
                 :power-state power-state))

(defun make-device-event-info-ext (&key (next nil) (device-event nil))
"Creates an instance of DEVICE-EVENT-INFO-EXT.
The arguments of this function correspond to the slots of DEVICE-EVENT-INFO-EXT.


See DEVICE-EVENT-INFO-EXT"
  (make-instance 'vk:device-event-info-ext 
                 :next next
                 :device-event device-event))

(defun make-display-event-info-ext (&key (next nil) (display-event nil))
"Creates an instance of DISPLAY-EVENT-INFO-EXT.
The arguments of this function correspond to the slots of DISPLAY-EVENT-INFO-EXT.


See DISPLAY-EVENT-INFO-EXT"
  (make-instance 'vk:display-event-info-ext 
                 :next next
                 :display-event display-event))

(defun make-swapchain-counter-create-info-ext (&key (next nil)
                                               (surface-counters nil))
"Creates an instance of SWAPCHAIN-COUNTER-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of SWAPCHAIN-COUNTER-CREATE-INFO-EXT.


See SWAPCHAIN-COUNTER-CREATE-INFO-EXT"
  (make-instance 'vk:swapchain-counter-create-info-ext 
                 :next next
                 :surface-counters surface-counters))

(defun make-physical-device-group-properties (&key (next nil)
                                              (physical-device-count 0)
                                              (physical-devices nil)
                                              (subset-allocation nil))
"Creates an instance of PHYSICAL-DEVICE-GROUP-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-GROUP-PROPERTIES.


See PHYSICAL-DEVICE-GROUP-PROPERTIES"
  (make-instance 'vk:physical-device-group-properties 
                 :next next
                 :physical-device-count physical-device-count
                 :physical-devices physical-devices
                 :subset-allocation subset-allocation))

(defun make-memory-allocate-flags-info (&key (next nil) (flags nil)
                                        (device-mask 0))
"Creates an instance of MEMORY-ALLOCATE-FLAGS-INFO.
The arguments of this function correspond to the slots of MEMORY-ALLOCATE-FLAGS-INFO.


See MEMORY-ALLOCATE-FLAGS-INFO"
  (make-instance 'vk:memory-allocate-flags-info 
                 :next next
                 :flags flags
                 :device-mask device-mask))

(defun make-bind-buffer-memory-info (&key (next nil) (buffer nil) (memory nil)
                                     (memory-offset 0))
"Creates an instance of BIND-BUFFER-MEMORY-INFO.
The arguments of this function correspond to the slots of BIND-BUFFER-MEMORY-INFO.


See BIND-BUFFER-MEMORY-INFO"
  (make-instance 'vk:bind-buffer-memory-info 
                 :next next
                 :buffer buffer
                 :memory memory
                 :memory-offset memory-offset))

(defun make-bind-buffer-memory-device-group-info (&key (next nil)
                                                  (device-indices nil))
"Creates an instance of BIND-BUFFER-MEMORY-DEVICE-GROUP-INFO.
The arguments of this function correspond to the slots of BIND-BUFFER-MEMORY-DEVICE-GROUP-INFO.


See BIND-BUFFER-MEMORY-DEVICE-GROUP-INFO"
  (make-instance 'vk:bind-buffer-memory-device-group-info 
                 :next next
                 :device-indices device-indices))

(defun make-bind-image-memory-info (&key (next nil) (image nil) (memory nil)
                                    (memory-offset 0))
"Creates an instance of BIND-IMAGE-MEMORY-INFO.
The arguments of this function correspond to the slots of BIND-IMAGE-MEMORY-INFO.


See BIND-IMAGE-MEMORY-INFO"
  (make-instance 'vk:bind-image-memory-info 
                 :next next
                 :image image
                 :memory memory
                 :memory-offset memory-offset))

(defun make-bind-image-memory-device-group-info (&key (next nil)
                                                 (device-indices nil)
                                                 (split-instance-bind-regions nil))
"Creates an instance of BIND-IMAGE-MEMORY-DEVICE-GROUP-INFO.
The arguments of this function correspond to the slots of BIND-IMAGE-MEMORY-DEVICE-GROUP-INFO.


See BIND-IMAGE-MEMORY-DEVICE-GROUP-INFO"
  (make-instance 'vk:bind-image-memory-device-group-info 
                 :next next
                 :device-indices device-indices
                 :split-instance-bind-regions split-instance-bind-regions))

(defun make-device-group-render-pass-begin-info (&key (next nil)
                                                 (device-mask 0)
                                                 (device-render-areas nil))
"Creates an instance of DEVICE-GROUP-RENDER-PASS-BEGIN-INFO.
The arguments of this function correspond to the slots of DEVICE-GROUP-RENDER-PASS-BEGIN-INFO.


See DEVICE-GROUP-RENDER-PASS-BEGIN-INFO"
  (make-instance 'vk:device-group-render-pass-begin-info 
                 :next next
                 :device-mask device-mask
                 :device-render-areas device-render-areas))

(defun make-device-group-command-buffer-begin-info (&key (next nil)
                                                    (device-mask 0))
"Creates an instance of DEVICE-GROUP-COMMAND-BUFFER-BEGIN-INFO.
The arguments of this function correspond to the slots of DEVICE-GROUP-COMMAND-BUFFER-BEGIN-INFO.


See DEVICE-GROUP-COMMAND-BUFFER-BEGIN-INFO"
  (make-instance 'vk:device-group-command-buffer-begin-info 
                 :next next
                 :device-mask device-mask))

(defun make-device-group-submit-info (&key (next nil)
                                      (wait-semaphore-device-indices nil)
                                      (command-buffer-device-masks nil)
                                      (signal-semaphore-device-indices nil))
"Creates an instance of DEVICE-GROUP-SUBMIT-INFO.
The arguments of this function correspond to the slots of DEVICE-GROUP-SUBMIT-INFO.


See DEVICE-GROUP-SUBMIT-INFO"
  (make-instance 'vk:device-group-submit-info 
                 :next next
                 :wait-semaphore-device-indices wait-semaphore-device-indices
                 :command-buffer-device-masks command-buffer-device-masks
                 :signal-semaphore-device-indices signal-semaphore-device-indices))

(defun make-device-group-bind-sparse-info (&key (next nil)
                                           (resource-device-index 0)
                                           (memory-device-index 0))
"Creates an instance of DEVICE-GROUP-BIND-SPARSE-INFO.
The arguments of this function correspond to the slots of DEVICE-GROUP-BIND-SPARSE-INFO.


See DEVICE-GROUP-BIND-SPARSE-INFO"
  (make-instance 'vk:device-group-bind-sparse-info 
                 :next next
                 :resource-device-index resource-device-index
                 :memory-device-index memory-device-index))

(defun make-device-group-present-capabilities-khr (&key (next nil)
                                                   (present-mask 0) (modes nil))
"Creates an instance of DEVICE-GROUP-PRESENT-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of DEVICE-GROUP-PRESENT-CAPABILITIES-KHR.


See DEVICE-GROUP-PRESENT-CAPABILITIES-KHR"
  (make-instance 'vk:device-group-present-capabilities-khr 
                 :next next
                 :present-mask present-mask
                 :modes modes))

(defun make-image-swapchain-create-info-khr (&key (next nil) (swapchain nil))
"Creates an instance of IMAGE-SWAPCHAIN-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of IMAGE-SWAPCHAIN-CREATE-INFO-KHR.


See IMAGE-SWAPCHAIN-CREATE-INFO-KHR"
  (make-instance 'vk:image-swapchain-create-info-khr 
                 :next next
                 :swapchain swapchain))

(defun make-bind-image-memory-swapchain-info-khr (&key (next nil)
                                                  (swapchain nil)
                                                  (image-index 0))
"Creates an instance of BIND-IMAGE-MEMORY-SWAPCHAIN-INFO-KHR.
The arguments of this function correspond to the slots of BIND-IMAGE-MEMORY-SWAPCHAIN-INFO-KHR.


See BIND-IMAGE-MEMORY-SWAPCHAIN-INFO-KHR"
  (make-instance 'vk:bind-image-memory-swapchain-info-khr 
                 :next next
                 :swapchain swapchain
                 :image-index image-index))

(defun make-acquire-next-image-info-khr (&key (next nil) (swapchain nil)
                                         (timeout 0) (semaphore nil)
                                         (fence nil) (device-mask 0))
"Creates an instance of ACQUIRE-NEXT-IMAGE-INFO-KHR.
The arguments of this function correspond to the slots of ACQUIRE-NEXT-IMAGE-INFO-KHR.


See ACQUIRE-NEXT-IMAGE-INFO-KHR"
  (make-instance 'vk:acquire-next-image-info-khr 
                 :next next
                 :swapchain swapchain
                 :timeout timeout
                 :semaphore semaphore
                 :fence fence
                 :device-mask device-mask))

(defun make-device-group-present-info-khr (&key (next nil) (device-masks nil)
                                           (mode nil))
"Creates an instance of DEVICE-GROUP-PRESENT-INFO-KHR.
The arguments of this function correspond to the slots of DEVICE-GROUP-PRESENT-INFO-KHR.


See DEVICE-GROUP-PRESENT-INFO-KHR"
  (make-instance 'vk:device-group-present-info-khr 
                 :next next
                 :device-masks device-masks
                 :mode mode))

(defun make-device-group-device-create-info (&key (next nil)
                                             (physical-devices nil))
"Creates an instance of DEVICE-GROUP-DEVICE-CREATE-INFO.
The arguments of this function correspond to the slots of DEVICE-GROUP-DEVICE-CREATE-INFO.


See DEVICE-GROUP-DEVICE-CREATE-INFO"
  (make-instance 'vk:device-group-device-create-info 
                 :next next
                 :physical-devices physical-devices))

(defun make-device-group-swapchain-create-info-khr (&key (next nil) (modes nil))
"Creates an instance of DEVICE-GROUP-SWAPCHAIN-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of DEVICE-GROUP-SWAPCHAIN-CREATE-INFO-KHR.


See DEVICE-GROUP-SWAPCHAIN-CREATE-INFO-KHR"
  (make-instance 'vk:device-group-swapchain-create-info-khr 
                 :next next
                 :modes modes))

(defun make-descriptor-update-template-entry (&key (dst-binding 0)
                                              (dst-array-element 0)
                                              (descriptor-count 0)
                                              (descriptor-type nil) (offset 0)
                                              (stride 0))
"Creates an instance of DESCRIPTOR-UPDATE-TEMPLATE-ENTRY.
The arguments of this function correspond to the slots of DESCRIPTOR-UPDATE-TEMPLATE-ENTRY.


See DESCRIPTOR-UPDATE-TEMPLATE-ENTRY"
  (make-instance 'vk:descriptor-update-template-entry 
                 :dst-binding dst-binding
                 :dst-array-element dst-array-element
                 :descriptor-count descriptor-count
                 :descriptor-type descriptor-type
                 :offset offset
                 :stride stride))

(defun make-descriptor-update-template-create-info (&key (next nil) (flags nil)
                                                    (descriptor-update-entries nil)
                                                    (template-type nil)
                                                    (descriptor-set-layout nil)
                                                    (pipeline-bind-point nil)
                                                    (pipeline-layout nil)
                                                    (set 0))
"Creates an instance of DESCRIPTOR-UPDATE-TEMPLATE-CREATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-UPDATE-TEMPLATE-CREATE-INFO.


See DESCRIPTOR-UPDATE-TEMPLATE-CREATE-INFO"
  (make-instance 'vk:descriptor-update-template-create-info 
                 :next next
                 :flags flags
                 :descriptor-update-entries descriptor-update-entries
                 :template-type template-type
                 :descriptor-set-layout descriptor-set-layout
                 :pipeline-bind-point pipeline-bind-point
                 :pipeline-layout pipeline-layout
                 :set set))

(defun make-x-y-color-ext (&key (x 0.0) (y 0.0))
"Creates an instance of X-Y-COLOR-EXT.
The arguments of this function correspond to the slots of X-Y-COLOR-EXT.


See X-Y-COLOR-EXT"
  (make-instance 'vk:x-y-color-ext 
                 :x x
                 :y y))

(defun make-physical-device-present-id-features-khr (&key (next nil)
                                                     (present-id nil))
"Creates an instance of PHYSICAL-DEVICE-PRESENT-ID-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PRESENT-ID-FEATURES-KHR.


See PHYSICAL-DEVICE-PRESENT-ID-FEATURES-KHR"
  (make-instance 'vk:physical-device-present-id-features-khr 
                 :next next
                 :present-id present-id))

(defun make-present-id-khr (&key (next nil) (present-ids nil))
"Creates an instance of PRESENT-ID-KHR.
The arguments of this function correspond to the slots of PRESENT-ID-KHR.


See PRESENT-ID-KHR"
  (make-instance 'vk:present-id-khr 
                 :next next
                 :present-ids present-ids))

(defun make-physical-device-present-wait-features-khr (&key (next nil)
                                                       (present-wait nil))
"Creates an instance of PHYSICAL-DEVICE-PRESENT-WAIT-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PRESENT-WAIT-FEATURES-KHR.


See PHYSICAL-DEVICE-PRESENT-WAIT-FEATURES-KHR"
  (make-instance 'vk:physical-device-present-wait-features-khr 
                 :next next
                 :present-wait present-wait))

(defun make-hdr-metadata-ext (&key (next nil)
                              (display-primary-red (vk:make-x-y-color-ext))
                              (display-primary-green (vk:make-x-y-color-ext))
                              (display-primary-blue (vk:make-x-y-color-ext))
                              (white-point (vk:make-x-y-color-ext))
                              (max-luminance 0.0) (min-luminance 0.0)
                              (max-content-light-level 0.0)
                              (max-frame-average-light-level 0.0))
"Creates an instance of HDR-METADATA-EXT.
The arguments of this function correspond to the slots of HDR-METADATA-EXT.


See HDR-METADATA-EXT"
  (make-instance 'vk:hdr-metadata-ext 
                 :next next
                 :display-primary-red display-primary-red
                 :display-primary-green display-primary-green
                 :display-primary-blue display-primary-blue
                 :white-point white-point
                 :max-luminance max-luminance
                 :min-luminance min-luminance
                 :max-content-light-level max-content-light-level
                 :max-frame-average-light-level max-frame-average-light-level))

(defun make-display-native-hdr-surface-capabilities-amd (&key (next nil)
                                                         (local-dimming-support nil))
"Creates an instance of DISPLAY-NATIVE-HDR-SURFACE-CAPABILITIES-AMD.
The arguments of this function correspond to the slots of DISPLAY-NATIVE-HDR-SURFACE-CAPABILITIES-AMD.


See DISPLAY-NATIVE-HDR-SURFACE-CAPABILITIES-AMD"
  (make-instance 'vk:display-native-hdr-surface-capabilities-amd 
                 :next next
                 :local-dimming-support local-dimming-support))

(defun make-swapchain-display-native-hdr-create-info-amd (&key (next nil)
                                                          (local-dimming-enable nil))
"Creates an instance of SWAPCHAIN-DISPLAY-NATIVE-HDR-CREATE-INFO-AMD.
The arguments of this function correspond to the slots of SWAPCHAIN-DISPLAY-NATIVE-HDR-CREATE-INFO-AMD.


See SWAPCHAIN-DISPLAY-NATIVE-HDR-CREATE-INFO-AMD"
  (make-instance 'vk:swapchain-display-native-hdr-create-info-amd 
                 :next next
                 :local-dimming-enable local-dimming-enable))

(defun make-refresh-cycle-duration-google (&key (refresh-duration 0))
"Creates an instance of REFRESH-CYCLE-DURATION-GOOGLE.
The arguments of this function correspond to the slots of REFRESH-CYCLE-DURATION-GOOGLE.


See REFRESH-CYCLE-DURATION-GOOGLE"
  (make-instance 'vk:refresh-cycle-duration-google 
                 :refresh-duration refresh-duration))

(defun make-past-presentation-timing-google (&key (present-id 0)
                                             (desired-present-time 0)
                                             (actual-present-time 0)
                                             (earliest-present-time 0)
                                             (present-margin 0))
"Creates an instance of PAST-PRESENTATION-TIMING-GOOGLE.
The arguments of this function correspond to the slots of PAST-PRESENTATION-TIMING-GOOGLE.


See PAST-PRESENTATION-TIMING-GOOGLE"
  (make-instance 'vk:past-presentation-timing-google 
                 :present-id present-id
                 :desired-present-time desired-present-time
                 :actual-present-time actual-present-time
                 :earliest-present-time earliest-present-time
                 :present-margin present-margin))

(defun make-present-times-info-google (&key (next nil) (swapchain-count 0)
                                       (times nil))
"Creates an instance of PRESENT-TIMES-INFO-GOOGLE.
The arguments of this function correspond to the slots of PRESENT-TIMES-INFO-GOOGLE.


See PRESENT-TIMES-INFO-GOOGLE"
  (make-instance 'vk:present-times-info-google 
                 :next next
                 :swapchain-count swapchain-count
                 :times times))

(defun make-present-time-google (&key (present-id 0) (desired-present-time 0))
"Creates an instance of PRESENT-TIME-GOOGLE.
The arguments of this function correspond to the slots of PRESENT-TIME-GOOGLE.


See PRESENT-TIME-GOOGLE"
  (make-instance 'vk:present-time-google 
                 :present-id present-id
                 :desired-present-time desired-present-time))

(defun make-ios-surface-create-info-mvk (&key (next nil) (flags nil) (view nil))
"Creates an instance of IOS-SURFACE-CREATE-INFO-MVK.
The arguments of this function correspond to the slots of IOS-SURFACE-CREATE-INFO-MVK.


See IOS-SURFACE-CREATE-INFO-MVK"
  (make-instance 'vk:ios-surface-create-info-mvk 
                 :next next
                 :flags flags
                 :view view))

(defun make-mac-os-surface-create-info-mvk (&key (next nil) (flags nil)
                                            (view nil))
"Creates an instance of MAC-OS-SURFACE-CREATE-INFO-MVK.
The arguments of this function correspond to the slots of MAC-OS-SURFACE-CREATE-INFO-MVK.


See MAC-OS-SURFACE-CREATE-INFO-MVK"
  (make-instance 'vk:mac-os-surface-create-info-mvk 
                 :next next
                 :flags flags
                 :view view))

(defun make-metal-surface-create-info-ext (&key (next nil) (flags nil)
                                           (layer nil))
"Creates an instance of METAL-SURFACE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of METAL-SURFACE-CREATE-INFO-EXT.


See METAL-SURFACE-CREATE-INFO-EXT"
  (make-instance 'vk:metal-surface-create-info-ext 
                 :next next
                 :flags flags
                 :layer layer))

(defun make-viewport-w-scaling-nv (&key (xcoeff 0.0) (ycoeff 0.0))
"Creates an instance of VIEWPORT-W-SCALING-NV.
The arguments of this function correspond to the slots of VIEWPORT-W-SCALING-NV.


See VIEWPORT-W-SCALING-NV"
  (make-instance 'vk:viewport-w-scaling-nv 
                 :xcoeff xcoeff
                 :ycoeff ycoeff))

(defun make-pipeline-viewport-w-scaling-state-create-info-nv (&key (next nil)
                                                              (viewport-w-scaling-enable nil)
                                                              (viewport-w-scalings nil))
"Creates an instance of PIPELINE-VIEWPORT-W-SCALING-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-W-SCALING-STATE-CREATE-INFO-NV.


See PIPELINE-VIEWPORT-W-SCALING-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-viewport-w-scaling-state-create-info-nv 
                 :next next
                 :viewport-w-scaling-enable viewport-w-scaling-enable
                 :viewport-w-scalings viewport-w-scalings))

(defun make-viewport-swizzle-nv (&key (x nil) (y nil) (z nil) (w nil))
"Creates an instance of VIEWPORT-SWIZZLE-NV.
The arguments of this function correspond to the slots of VIEWPORT-SWIZZLE-NV.


See VIEWPORT-SWIZZLE-NV"
  (make-instance 'vk:viewport-swizzle-nv 
                 :x x
                 :y y
                 :z z
                 :w w))

(defun make-pipeline-viewport-swizzle-state-create-info-nv (&key (next nil)
                                                            (flags nil)
                                                            (viewport-swizzles nil))
"Creates an instance of PIPELINE-VIEWPORT-SWIZZLE-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-SWIZZLE-STATE-CREATE-INFO-NV.


See PIPELINE-VIEWPORT-SWIZZLE-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-viewport-swizzle-state-create-info-nv 
                 :next next
                 :flags flags
                 :viewport-swizzles viewport-swizzles))

(defun make-physical-device-discard-rectangle-properties-ext (&key (next nil)
                                                              (max-discard-rectangles 0))
"Creates an instance of PHYSICAL-DEVICE-DISCARD-RECTANGLE-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DISCARD-RECTANGLE-PROPERTIES-EXT.


See PHYSICAL-DEVICE-DISCARD-RECTANGLE-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-discard-rectangle-properties-ext 
                 :next next
                 :max-discard-rectangles max-discard-rectangles))

(defun make-pipeline-discard-rectangle-state-create-info-ext (&key (next nil)
                                                              (flags nil)
                                                              (discard-rectangle-mode nil)
                                                              (discard-rectangles nil))
"Creates an instance of PIPELINE-DISCARD-RECTANGLE-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-DISCARD-RECTANGLE-STATE-CREATE-INFO-EXT.


See PIPELINE-DISCARD-RECTANGLE-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-discard-rectangle-state-create-info-ext 
                 :next next
                 :flags flags
                 :discard-rectangle-mode discard-rectangle-mode
                 :discard-rectangles discard-rectangles))

(defun make-physical-device-multiview-per-view-attributes-properties-nvx (&key
                                                                          (next nil)
                                                                          (per-view-position-all-components nil))
"Creates an instance of PHYSICAL-DEVICE-MULTIVIEW-PER-VIEW-ATTRIBUTES-PROPERTIES-NVX.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MULTIVIEW-PER-VIEW-ATTRIBUTES-PROPERTIES-NVX.


See PHYSICAL-DEVICE-MULTIVIEW-PER-VIEW-ATTRIBUTES-PROPERTIES-NVX"
  (make-instance 'vk:physical-device-multiview-per-view-attributes-properties-nvx 
                 :next next
                 :per-view-position-all-components per-view-position-all-components))

(defun make-input-attachment-aspect-reference (&key (subpass 0)
                                               (input-attachment-index 0)
                                               (aspect-mask nil))
"Creates an instance of INPUT-ATTACHMENT-ASPECT-REFERENCE.
The arguments of this function correspond to the slots of INPUT-ATTACHMENT-ASPECT-REFERENCE.


See INPUT-ATTACHMENT-ASPECT-REFERENCE"
  (make-instance 'vk:input-attachment-aspect-reference 
                 :subpass subpass
                 :input-attachment-index input-attachment-index
                 :aspect-mask aspect-mask))

(defun make-render-pass-input-attachment-aspect-create-info (&key (next nil)
                                                             (aspect-references nil))
"Creates an instance of RENDER-PASS-INPUT-ATTACHMENT-ASPECT-CREATE-INFO.
The arguments of this function correspond to the slots of RENDER-PASS-INPUT-ATTACHMENT-ASPECT-CREATE-INFO.


See RENDER-PASS-INPUT-ATTACHMENT-ASPECT-CREATE-INFO"
  (make-instance 'vk:render-pass-input-attachment-aspect-create-info 
                 :next next
                 :aspect-references aspect-references))

(defun make-physical-device-surface-info-2-khr (&key (next nil) (surface nil))
"Creates an instance of PHYSICAL-DEVICE-SURFACE-INFO-2-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SURFACE-INFO-2-KHR.


See PHYSICAL-DEVICE-SURFACE-INFO-2-KHR"
  (make-instance 'vk:physical-device-surface-info-2-khr 
                 :next next
                 :surface surface))

(defun make-surface-capabilities-2-khr (&key (next nil)
                                        (surface-capabilities nil))
"Creates an instance of SURFACE-CAPABILITIES-2-KHR.
The arguments of this function correspond to the slots of SURFACE-CAPABILITIES-2-KHR.


See SURFACE-CAPABILITIES-2-KHR"
  (make-instance 'vk:surface-capabilities-2-khr 
                 :next next
                 :surface-capabilities surface-capabilities))

(defun make-surface-format-2-khr (&key (next nil) (surface-format nil))
"Creates an instance of SURFACE-FORMAT-2-KHR.
The arguments of this function correspond to the slots of SURFACE-FORMAT-2-KHR.


See SURFACE-FORMAT-2-KHR"
  (make-instance 'vk:surface-format-2-khr 
                 :next next
                 :surface-format surface-format))

(defun make-display-properties-2-khr (&key (next nil) (display-properties nil))
"Creates an instance of DISPLAY-PROPERTIES-2-KHR.
The arguments of this function correspond to the slots of DISPLAY-PROPERTIES-2-KHR.


See DISPLAY-PROPERTIES-2-KHR"
  (make-instance 'vk:display-properties-2-khr 
                 :next next
                 :display-properties display-properties))

(defun make-display-plane-properties-2-khr (&key (next nil)
                                            (display-plane-properties nil))
"Creates an instance of DISPLAY-PLANE-PROPERTIES-2-KHR.
The arguments of this function correspond to the slots of DISPLAY-PLANE-PROPERTIES-2-KHR.


See DISPLAY-PLANE-PROPERTIES-2-KHR"
  (make-instance 'vk:display-plane-properties-2-khr 
                 :next next
                 :display-plane-properties display-plane-properties))

(defun make-display-mode-properties-2-khr (&key (next nil)
                                           (display-mode-properties nil))
"Creates an instance of DISPLAY-MODE-PROPERTIES-2-KHR.
The arguments of this function correspond to the slots of DISPLAY-MODE-PROPERTIES-2-KHR.


See DISPLAY-MODE-PROPERTIES-2-KHR"
  (make-instance 'vk:display-mode-properties-2-khr 
                 :next next
                 :display-mode-properties display-mode-properties))

(defun make-display-plane-info-2-khr (&key (next nil) (mode nil)
                                      (plane-index 0))
"Creates an instance of DISPLAY-PLANE-INFO-2-KHR.
The arguments of this function correspond to the slots of DISPLAY-PLANE-INFO-2-KHR.


See DISPLAY-PLANE-INFO-2-KHR"
  (make-instance 'vk:display-plane-info-2-khr 
                 :next next
                 :mode mode
                 :plane-index plane-index))

(defun make-display-plane-capabilities-2-khr (&key (next nil)
                                              (capabilities nil))
"Creates an instance of DISPLAY-PLANE-CAPABILITIES-2-KHR.
The arguments of this function correspond to the slots of DISPLAY-PLANE-CAPABILITIES-2-KHR.


See DISPLAY-PLANE-CAPABILITIES-2-KHR"
  (make-instance 'vk:display-plane-capabilities-2-khr 
                 :next next
                 :capabilities capabilities))

(defun make-shared-present-surface-capabilities-khr (&key (next nil)
                                                     (shared-present-supported-usage-flags nil))
"Creates an instance of SHARED-PRESENT-SURFACE-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of SHARED-PRESENT-SURFACE-CAPABILITIES-KHR.


See SHARED-PRESENT-SURFACE-CAPABILITIES-KHR"
  (make-instance 'vk:shared-present-surface-capabilities-khr 
                 :next next
                 :shared-present-supported-usage-flags shared-present-supported-usage-flags))

(defun make-physical-device-16-bit-storage-features (&key (next nil)
                                                     (storage-buffer-16-bit-access nil)
                                                     (uniform-and-storage-buffer-16-bit-access nil)
                                                     (storage-push-constant-16 nil)
                                                     (storage-input-output-16 nil))
"Creates an instance of PHYSICAL-DEVICE-16-BIT-STORAGE-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-16-BIT-STORAGE-FEATURES.


See PHYSICAL-DEVICE-16-BIT-STORAGE-FEATURES"
  (make-instance 'vk:physical-device-16-bit-storage-features 
                 :next next
                 :storage-buffer-16-bit-access storage-buffer-16-bit-access
                 :uniform-and-storage-buffer-16-bit-access uniform-and-storage-buffer-16-bit-access
                 :storage-push-constant-16 storage-push-constant-16
                 :storage-input-output-16 storage-input-output-16))

(defun make-physical-device-subgroup-properties (&key (next nil)
                                                 (subgroup-size 0)
                                                 (supported-stages nil)
                                                 (supported-operations nil)
                                                 (quad-operations-in-all-stages nil))
"Creates an instance of PHYSICAL-DEVICE-SUBGROUP-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SUBGROUP-PROPERTIES.


See PHYSICAL-DEVICE-SUBGROUP-PROPERTIES"
  (make-instance 'vk:physical-device-subgroup-properties 
                 :next next
                 :subgroup-size subgroup-size
                 :supported-stages supported-stages
                 :supported-operations supported-operations
                 :quad-operations-in-all-stages quad-operations-in-all-stages))

(defun make-physical-device-shader-subgroup-extended-types-features (&key
                                                                     (next nil)
                                                                     (shader-subgroup-extended-types nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-SUBGROUP-EXTENDED-TYPES-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-SUBGROUP-EXTENDED-TYPES-FEATURES.


See PHYSICAL-DEVICE-SHADER-SUBGROUP-EXTENDED-TYPES-FEATURES"
  (make-instance 'vk:physical-device-shader-subgroup-extended-types-features 
                 :next next
                 :shader-subgroup-extended-types shader-subgroup-extended-types))

(defun make-buffer-memory-requirements-info-2 (&key (next nil) (buffer nil))
"Creates an instance of BUFFER-MEMORY-REQUIREMENTS-INFO-2.
The arguments of this function correspond to the slots of BUFFER-MEMORY-REQUIREMENTS-INFO-2.


See BUFFER-MEMORY-REQUIREMENTS-INFO-2"
  (make-instance 'vk:buffer-memory-requirements-info-2 
                 :next next
                 :buffer buffer))

(defun make-device-buffer-memory-requirements-khr (&key (next nil)
                                                   (create-info nil))
"Creates an instance of DEVICE-BUFFER-MEMORY-REQUIREMENTS-KHR.
The arguments of this function correspond to the slots of DEVICE-BUFFER-MEMORY-REQUIREMENTS-KHR.


See DEVICE-BUFFER-MEMORY-REQUIREMENTS-KHR"
  (make-instance 'vk:device-buffer-memory-requirements-khr 
                 :next next
                 :create-info create-info))

(defun make-image-memory-requirements-info-2 (&key (next nil) (image nil))
"Creates an instance of IMAGE-MEMORY-REQUIREMENTS-INFO-2.
The arguments of this function correspond to the slots of IMAGE-MEMORY-REQUIREMENTS-INFO-2.


See IMAGE-MEMORY-REQUIREMENTS-INFO-2"
  (make-instance 'vk:image-memory-requirements-info-2 
                 :next next
                 :image image))

(defun make-image-sparse-memory-requirements-info-2 (&key (next nil)
                                                     (image nil))
"Creates an instance of IMAGE-SPARSE-MEMORY-REQUIREMENTS-INFO-2.
The arguments of this function correspond to the slots of IMAGE-SPARSE-MEMORY-REQUIREMENTS-INFO-2.


See IMAGE-SPARSE-MEMORY-REQUIREMENTS-INFO-2"
  (make-instance 'vk:image-sparse-memory-requirements-info-2 
                 :next next
                 :image image))

(defun make-device-image-memory-requirements-khr (&key (next nil)
                                                  (create-info nil)
                                                  (plane-aspect nil))
"Creates an instance of DEVICE-IMAGE-MEMORY-REQUIREMENTS-KHR.
The arguments of this function correspond to the slots of DEVICE-IMAGE-MEMORY-REQUIREMENTS-KHR.


See DEVICE-IMAGE-MEMORY-REQUIREMENTS-KHR"
  (make-instance 'vk:device-image-memory-requirements-khr 
                 :next next
                 :create-info create-info
                 :plane-aspect plane-aspect))

(defun make-memory-requirements-2 (&key (next nil) (memory-requirements nil))
"Creates an instance of MEMORY-REQUIREMENTS-2.
The arguments of this function correspond to the slots of MEMORY-REQUIREMENTS-2.


See MEMORY-REQUIREMENTS-2"
  (make-instance 'vk:memory-requirements-2 
                 :next next
                 :memory-requirements memory-requirements))

(defun make-sparse-image-memory-requirements-2 (&key (next nil)
                                                (memory-requirements nil))
"Creates an instance of SPARSE-IMAGE-MEMORY-REQUIREMENTS-2.
The arguments of this function correspond to the slots of SPARSE-IMAGE-MEMORY-REQUIREMENTS-2.


See SPARSE-IMAGE-MEMORY-REQUIREMENTS-2"
  (make-instance 'vk:sparse-image-memory-requirements-2 
                 :next next
                 :memory-requirements memory-requirements))

(defun make-physical-device-point-clipping-properties (&key (next nil)
                                                       (point-clipping-behavior nil))
"Creates an instance of PHYSICAL-DEVICE-POINT-CLIPPING-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-POINT-CLIPPING-PROPERTIES.


See PHYSICAL-DEVICE-POINT-CLIPPING-PROPERTIES"
  (make-instance 'vk:physical-device-point-clipping-properties 
                 :next next
                 :point-clipping-behavior point-clipping-behavior))

(defun make-memory-dedicated-requirements (&key (next nil)
                                           (prefers-dedicated-allocation nil)
                                           (requires-dedicated-allocation nil))
"Creates an instance of MEMORY-DEDICATED-REQUIREMENTS.
The arguments of this function correspond to the slots of MEMORY-DEDICATED-REQUIREMENTS.


See MEMORY-DEDICATED-REQUIREMENTS"
  (make-instance 'vk:memory-dedicated-requirements 
                 :next next
                 :prefers-dedicated-allocation prefers-dedicated-allocation
                 :requires-dedicated-allocation requires-dedicated-allocation))

(defun make-memory-dedicated-allocate-info (&key (next nil) (image nil)
                                            (buffer nil))
"Creates an instance of MEMORY-DEDICATED-ALLOCATE-INFO.
The arguments of this function correspond to the slots of MEMORY-DEDICATED-ALLOCATE-INFO.


See MEMORY-DEDICATED-ALLOCATE-INFO"
  (make-instance 'vk:memory-dedicated-allocate-info 
                 :next next
                 :image image
                 :buffer buffer))

(defun make-image-view-usage-create-info (&key (next nil) (usage nil))
"Creates an instance of IMAGE-VIEW-USAGE-CREATE-INFO.
The arguments of this function correspond to the slots of IMAGE-VIEW-USAGE-CREATE-INFO.


See IMAGE-VIEW-USAGE-CREATE-INFO"
  (make-instance 'vk:image-view-usage-create-info 
                 :next next
                 :usage usage))

(defun make-pipeline-tessellation-domain-origin-state-create-info (&key
                                                                   (next nil)
                                                                   (domain-origin nil))
"Creates an instance of PIPELINE-TESSELLATION-DOMAIN-ORIGIN-STATE-CREATE-INFO.
The arguments of this function correspond to the slots of PIPELINE-TESSELLATION-DOMAIN-ORIGIN-STATE-CREATE-INFO.


See PIPELINE-TESSELLATION-DOMAIN-ORIGIN-STATE-CREATE-INFO"
  (make-instance 'vk:pipeline-tessellation-domain-origin-state-create-info 
                 :next next
                 :domain-origin domain-origin))

(defun make-sampler-ycbcr-conversion-info (&key (next nil) (conversion nil))
"Creates an instance of SAMPLER-YCBCR-CONVERSION-INFO.
The arguments of this function correspond to the slots of SAMPLER-YCBCR-CONVERSION-INFO.


See SAMPLER-YCBCR-CONVERSION-INFO"
  (make-instance 'vk:sampler-ycbcr-conversion-info 
                 :next next
                 :conversion conversion))

(defun make-sampler-ycbcr-conversion-create-info (&key (next nil) (format nil)
                                                  (ycbcr-model nil)
                                                  (ycbcr-range nil)
                                                  (components (vk:make-component-mapping))
                                                  (x-chroma-offset nil)
                                                  (y-chroma-offset nil)
                                                  (chroma-filter nil)
                                                  (force-explicit-reconstruction nil))
"Creates an instance of SAMPLER-YCBCR-CONVERSION-CREATE-INFO.
The arguments of this function correspond to the slots of SAMPLER-YCBCR-CONVERSION-CREATE-INFO.


See SAMPLER-YCBCR-CONVERSION-CREATE-INFO"
  (make-instance 'vk:sampler-ycbcr-conversion-create-info 
                 :next next
                 :format format
                 :ycbcr-model ycbcr-model
                 :ycbcr-range ycbcr-range
                 :components components
                 :x-chroma-offset x-chroma-offset
                 :y-chroma-offset y-chroma-offset
                 :chroma-filter chroma-filter
                 :force-explicit-reconstruction force-explicit-reconstruction))

(defun make-bind-image-plane-memory-info (&key (next nil) (plane-aspect nil))
"Creates an instance of BIND-IMAGE-PLANE-MEMORY-INFO.
The arguments of this function correspond to the slots of BIND-IMAGE-PLANE-MEMORY-INFO.


See BIND-IMAGE-PLANE-MEMORY-INFO"
  (make-instance 'vk:bind-image-plane-memory-info 
                 :next next
                 :plane-aspect plane-aspect))

(defun make-image-plane-memory-requirements-info (&key (next nil)
                                                  (plane-aspect nil))
"Creates an instance of IMAGE-PLANE-MEMORY-REQUIREMENTS-INFO.
The arguments of this function correspond to the slots of IMAGE-PLANE-MEMORY-REQUIREMENTS-INFO.


See IMAGE-PLANE-MEMORY-REQUIREMENTS-INFO"
  (make-instance 'vk:image-plane-memory-requirements-info 
                 :next next
                 :plane-aspect plane-aspect))

(defun make-physical-device-sampler-ycbcr-conversion-features (&key (next nil)
                                                               (sampler-ycbcr-conversion nil))
"Creates an instance of PHYSICAL-DEVICE-SAMPLER-YCBCR-CONVERSION-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SAMPLER-YCBCR-CONVERSION-FEATURES.


See PHYSICAL-DEVICE-SAMPLER-YCBCR-CONVERSION-FEATURES"
  (make-instance 'vk:physical-device-sampler-ycbcr-conversion-features 
                 :next next
                 :sampler-ycbcr-conversion sampler-ycbcr-conversion))

(defun make-sampler-ycbcr-conversion-image-format-properties (&key (next nil)
                                                              (combined-image-sampler-descriptor-count 0))
"Creates an instance of SAMPLER-YCBCR-CONVERSION-IMAGE-FORMAT-PROPERTIES.
The arguments of this function correspond to the slots of SAMPLER-YCBCR-CONVERSION-IMAGE-FORMAT-PROPERTIES.


See SAMPLER-YCBCR-CONVERSION-IMAGE-FORMAT-PROPERTIES"
  (make-instance 'vk:sampler-ycbcr-conversion-image-format-properties 
                 :next next
                 :combined-image-sampler-descriptor-count combined-image-sampler-descriptor-count))

(defun make-texture-l-o-d-gather-format-properties-amd (&key (next nil)
                                                        (supports-texture-gather-l-o-d-bias-amd nil))
"Creates an instance of TEXTURE-L-O-D-GATHER-FORMAT-PROPERTIES-AMD.
The arguments of this function correspond to the slots of TEXTURE-L-O-D-GATHER-FORMAT-PROPERTIES-AMD.


See TEXTURE-L-O-D-GATHER-FORMAT-PROPERTIES-AMD"
  (make-instance 'vk:texture-l-o-d-gather-format-properties-amd 
                 :next next
                 :supports-texture-gather-l-o-d-bias-amd supports-texture-gather-l-o-d-bias-amd))

(defun make-conditional-rendering-begin-info-ext (&key (next nil) (buffer nil)
                                                  (offset 0) (flags nil))
"Creates an instance of CONDITIONAL-RENDERING-BEGIN-INFO-EXT.
The arguments of this function correspond to the slots of CONDITIONAL-RENDERING-BEGIN-INFO-EXT.


See CONDITIONAL-RENDERING-BEGIN-INFO-EXT"
  (make-instance 'vk:conditional-rendering-begin-info-ext 
                 :next next
                 :buffer buffer
                 :offset offset
                 :flags flags))

(defun make-protected-submit-info (&key (next nil) (protected-submit nil))
"Creates an instance of PROTECTED-SUBMIT-INFO.
The arguments of this function correspond to the slots of PROTECTED-SUBMIT-INFO.


See PROTECTED-SUBMIT-INFO"
  (make-instance 'vk:protected-submit-info 
                 :next next
                 :protected-submit protected-submit))

(defun make-physical-device-protected-memory-features (&key (next nil)
                                                       (protected-memory nil))
"Creates an instance of PHYSICAL-DEVICE-PROTECTED-MEMORY-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROTECTED-MEMORY-FEATURES.


See PHYSICAL-DEVICE-PROTECTED-MEMORY-FEATURES"
  (make-instance 'vk:physical-device-protected-memory-features 
                 :next next
                 :protected-memory protected-memory))

(defun make-physical-device-protected-memory-properties (&key (next nil)
                                                         (protected-no-fault nil))
"Creates an instance of PHYSICAL-DEVICE-PROTECTED-MEMORY-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROTECTED-MEMORY-PROPERTIES.


See PHYSICAL-DEVICE-PROTECTED-MEMORY-PROPERTIES"
  (make-instance 'vk:physical-device-protected-memory-properties 
                 :next next
                 :protected-no-fault protected-no-fault))

(defun make-device-queue-info-2 (&key (next nil) (flags nil)
                                 (queue-family-index 0) (queue-index 0))
"Creates an instance of DEVICE-QUEUE-INFO-2.
The arguments of this function correspond to the slots of DEVICE-QUEUE-INFO-2.


See DEVICE-QUEUE-INFO-2"
  (make-instance 'vk:device-queue-info-2 
                 :next next
                 :flags flags
                 :queue-family-index queue-family-index
                 :queue-index queue-index))

(defun make-pipeline-coverage-to-color-state-create-info-nv (&key (next nil)
                                                             (flags nil)
                                                             (coverage-to-color-enable nil)
                                                             (coverage-to-color-location 0))
"Creates an instance of PIPELINE-COVERAGE-TO-COLOR-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-COVERAGE-TO-COLOR-STATE-CREATE-INFO-NV.


See PIPELINE-COVERAGE-TO-COLOR-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-coverage-to-color-state-create-info-nv 
                 :next next
                 :flags flags
                 :coverage-to-color-enable coverage-to-color-enable
                 :coverage-to-color-location coverage-to-color-location))

(defun make-physical-device-sampler-filter-minmax-properties (&key (next nil)
                                                              (filter-minmax-single-component-formats nil)
                                                              (filter-minmax-image-component-mapping nil))
"Creates an instance of PHYSICAL-DEVICE-SAMPLER-FILTER-MINMAX-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SAMPLER-FILTER-MINMAX-PROPERTIES.


See PHYSICAL-DEVICE-SAMPLER-FILTER-MINMAX-PROPERTIES"
  (make-instance 'vk:physical-device-sampler-filter-minmax-properties 
                 :next next
                 :filter-minmax-single-component-formats filter-minmax-single-component-formats
                 :filter-minmax-image-component-mapping filter-minmax-image-component-mapping))

(defun make-sample-location-ext (&key (x 0.0) (y 0.0))
"Creates an instance of SAMPLE-LOCATION-EXT.
The arguments of this function correspond to the slots of SAMPLE-LOCATION-EXT.


See SAMPLE-LOCATION-EXT"
  (make-instance 'vk:sample-location-ext 
                 :x x
                 :y y))

(defun make-sample-locations-info-ext (&key (next nil)
                                       (sample-locations-per-pixel nil)
                                       (sample-location-grid-size (vk:make-extent-2d))
                                       (sample-locations nil))
"Creates an instance of SAMPLE-LOCATIONS-INFO-EXT.
The arguments of this function correspond to the slots of SAMPLE-LOCATIONS-INFO-EXT.


See SAMPLE-LOCATIONS-INFO-EXT"
  (make-instance 'vk:sample-locations-info-ext 
                 :next next
                 :sample-locations-per-pixel sample-locations-per-pixel
                 :sample-location-grid-size sample-location-grid-size
                 :sample-locations sample-locations))

(defun make-attachment-sample-locations-ext (&key (attachment-index 0)
                                             (sample-locations-info (vk:make-sample-locations-info-ext)))
"Creates an instance of ATTACHMENT-SAMPLE-LOCATIONS-EXT.
The arguments of this function correspond to the slots of ATTACHMENT-SAMPLE-LOCATIONS-EXT.


See ATTACHMENT-SAMPLE-LOCATIONS-EXT"
  (make-instance 'vk:attachment-sample-locations-ext 
                 :attachment-index attachment-index
                 :sample-locations-info sample-locations-info))

(defun make-subpass-sample-locations-ext (&key (subpass-index 0)
                                          (sample-locations-info (vk:make-sample-locations-info-ext)))
"Creates an instance of SUBPASS-SAMPLE-LOCATIONS-EXT.
The arguments of this function correspond to the slots of SUBPASS-SAMPLE-LOCATIONS-EXT.


See SUBPASS-SAMPLE-LOCATIONS-EXT"
  (make-instance 'vk:subpass-sample-locations-ext 
                 :subpass-index subpass-index
                 :sample-locations-info sample-locations-info))

(defun make-render-pass-sample-locations-begin-info-ext (&key (next nil)
                                                         (attachment-initial-sample-locations nil)
                                                         (post-subpass-sample-locations nil))
"Creates an instance of RENDER-PASS-SAMPLE-LOCATIONS-BEGIN-INFO-EXT.
The arguments of this function correspond to the slots of RENDER-PASS-SAMPLE-LOCATIONS-BEGIN-INFO-EXT.


See RENDER-PASS-SAMPLE-LOCATIONS-BEGIN-INFO-EXT"
  (make-instance 'vk:render-pass-sample-locations-begin-info-ext 
                 :next next
                 :attachment-initial-sample-locations attachment-initial-sample-locations
                 :post-subpass-sample-locations post-subpass-sample-locations))

(defun make-pipeline-sample-locations-state-create-info-ext (&key (next nil)
                                                             (sample-locations-enable nil)
                                                             (sample-locations-info (vk:make-sample-locations-info-ext)))
"Creates an instance of PIPELINE-SAMPLE-LOCATIONS-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-SAMPLE-LOCATIONS-STATE-CREATE-INFO-EXT.


See PIPELINE-SAMPLE-LOCATIONS-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-sample-locations-state-create-info-ext 
                 :next next
                 :sample-locations-enable sample-locations-enable
                 :sample-locations-info sample-locations-info))

(defun make-physical-device-sample-locations-properties-ext (&key (next nil)
                                                             (sample-location-sample-counts nil)
                                                             (max-sample-location-grid-size (vk:make-extent-2d))
                                                             (sample-location-coordinate-range 0.0)
                                                             (sample-location-sub-pixel-bits 0)
                                                             (variable-sample-locations nil))
"Creates an instance of PHYSICAL-DEVICE-SAMPLE-LOCATIONS-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SAMPLE-LOCATIONS-PROPERTIES-EXT.


See PHYSICAL-DEVICE-SAMPLE-LOCATIONS-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-sample-locations-properties-ext 
                 :next next
                 :sample-location-sample-counts sample-location-sample-counts
                 :max-sample-location-grid-size max-sample-location-grid-size
                 :sample-location-coordinate-range sample-location-coordinate-range
                 :sample-location-sub-pixel-bits sample-location-sub-pixel-bits
                 :variable-sample-locations variable-sample-locations))

(defun make-multisample-properties-ext (&key (next nil)
                                        (max-sample-location-grid-size (vk:make-extent-2d)))
"Creates an instance of MULTISAMPLE-PROPERTIES-EXT.
The arguments of this function correspond to the slots of MULTISAMPLE-PROPERTIES-EXT.


See MULTISAMPLE-PROPERTIES-EXT"
  (make-instance 'vk:multisample-properties-ext 
                 :next next
                 :max-sample-location-grid-size max-sample-location-grid-size))

(defun make-sampler-reduction-mode-create-info (&key (next nil)
                                                (reduction-mode nil))
"Creates an instance of SAMPLER-REDUCTION-MODE-CREATE-INFO.
The arguments of this function correspond to the slots of SAMPLER-REDUCTION-MODE-CREATE-INFO.


See SAMPLER-REDUCTION-MODE-CREATE-INFO"
  (make-instance 'vk:sampler-reduction-mode-create-info 
                 :next next
                 :reduction-mode reduction-mode))

(defun make-physical-device-blend-operation-advanced-features-ext (&key
                                                                   (next nil)
                                                                   (advanced-blend-coherent-operations nil))
"Creates an instance of PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-FEATURES-EXT.


See PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-FEATURES-EXT"
  (make-instance 'vk:physical-device-blend-operation-advanced-features-ext 
                 :next next
                 :advanced-blend-coherent-operations advanced-blend-coherent-operations))

(defun make-physical-device-multi-draw-features-ext (&key (next nil)
                                                     (multi-draw nil))
"Creates an instance of PHYSICAL-DEVICE-MULTI-DRAW-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MULTI-DRAW-FEATURES-EXT.


See PHYSICAL-DEVICE-MULTI-DRAW-FEATURES-EXT"
  (make-instance 'vk:physical-device-multi-draw-features-ext 
                 :next next
                 :multi-draw multi-draw))

(defun make-physical-device-blend-operation-advanced-properties-ext (&key
                                                                     (next nil)
                                                                     (advanced-blend-max-color-attachments 0)
                                                                     (advanced-blend-independent-blend nil)
                                                                     (advanced-blend-non-premultiplied-src-color nil)
                                                                     (advanced-blend-non-premultiplied-dst-color nil)
                                                                     (advanced-blend-correlated-overlap nil)
                                                                     (advanced-blend-all-operations nil))
"Creates an instance of PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-PROPERTIES-EXT.


See PHYSICAL-DEVICE-BLEND-OPERATION-ADVANCED-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-blend-operation-advanced-properties-ext 
                 :next next
                 :advanced-blend-max-color-attachments advanced-blend-max-color-attachments
                 :advanced-blend-independent-blend advanced-blend-independent-blend
                 :advanced-blend-non-premultiplied-src-color advanced-blend-non-premultiplied-src-color
                 :advanced-blend-non-premultiplied-dst-color advanced-blend-non-premultiplied-dst-color
                 :advanced-blend-correlated-overlap advanced-blend-correlated-overlap
                 :advanced-blend-all-operations advanced-blend-all-operations))

(defun make-pipeline-color-blend-advanced-state-create-info-ext (&key
                                                                 (next nil)
                                                                 (src-premultiplied nil)
                                                                 (dst-premultiplied nil)
                                                                 (blend-overlap nil))
"Creates an instance of PIPELINE-COLOR-BLEND-ADVANCED-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-COLOR-BLEND-ADVANCED-STATE-CREATE-INFO-EXT.


See PIPELINE-COLOR-BLEND-ADVANCED-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-color-blend-advanced-state-create-info-ext 
                 :next next
                 :src-premultiplied src-premultiplied
                 :dst-premultiplied dst-premultiplied
                 :blend-overlap blend-overlap))

(defun make-physical-device-inline-uniform-block-features-ext (&key (next nil)
                                                               (inline-uniform-block nil)
                                                               (descriptor-binding-inline-uniform-block-update-after-bind nil))
"Creates an instance of PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-FEATURES-EXT.


See PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-FEATURES-EXT"
  (make-instance 'vk:physical-device-inline-uniform-block-features-ext 
                 :next next
                 :inline-uniform-block inline-uniform-block
                 :descriptor-binding-inline-uniform-block-update-after-bind descriptor-binding-inline-uniform-block-update-after-bind))

(defun make-physical-device-inline-uniform-block-properties-ext (&key
                                                                 (next nil)
                                                                 (max-inline-uniform-block-size 0)
                                                                 (max-per-stage-descriptor-inline-uniform-blocks 0)
                                                                 (max-per-stage-descriptor-update-after-bind-inline-uniform-blocks 0)
                                                                 (max-descriptor-set-inline-uniform-blocks 0)
                                                                 (max-descriptor-set-update-after-bind-inline-uniform-blocks 0))
"Creates an instance of PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-PROPERTIES-EXT.


See PHYSICAL-DEVICE-INLINE-UNIFORM-BLOCK-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-inline-uniform-block-properties-ext 
                 :next next
                 :max-inline-uniform-block-size max-inline-uniform-block-size
                 :max-per-stage-descriptor-inline-uniform-blocks max-per-stage-descriptor-inline-uniform-blocks
                 :max-per-stage-descriptor-update-after-bind-inline-uniform-blocks max-per-stage-descriptor-update-after-bind-inline-uniform-blocks
                 :max-descriptor-set-inline-uniform-blocks max-descriptor-set-inline-uniform-blocks
                 :max-descriptor-set-update-after-bind-inline-uniform-blocks max-descriptor-set-update-after-bind-inline-uniform-blocks))

(defun make-write-descriptor-set-inline-uniform-block-ext (&key (next nil)
                                                           (data-size 0)
                                                           (data nil))
"Creates an instance of WRITE-DESCRIPTOR-SET-INLINE-UNIFORM-BLOCK-EXT.
The arguments of this function correspond to the slots of WRITE-DESCRIPTOR-SET-INLINE-UNIFORM-BLOCK-EXT.


See WRITE-DESCRIPTOR-SET-INLINE-UNIFORM-BLOCK-EXT"
  (make-instance 'vk:write-descriptor-set-inline-uniform-block-ext 
                 :next next
                 :data-size data-size
                 :data data))

(defun make-descriptor-pool-inline-uniform-block-create-info-ext (&key
                                                                  (next nil)
                                                                  (max-inline-uniform-block-bindings 0))
"Creates an instance of DESCRIPTOR-POOL-INLINE-UNIFORM-BLOCK-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DESCRIPTOR-POOL-INLINE-UNIFORM-BLOCK-CREATE-INFO-EXT.


See DESCRIPTOR-POOL-INLINE-UNIFORM-BLOCK-CREATE-INFO-EXT"
  (make-instance 'vk:descriptor-pool-inline-uniform-block-create-info-ext 
                 :next next
                 :max-inline-uniform-block-bindings max-inline-uniform-block-bindings))

(defun make-pipeline-coverage-modulation-state-create-info-nv (&key (next nil)
                                                               (flags nil)
                                                               (coverage-modulation-mode nil)
                                                               (coverage-modulation-table-enable nil)
                                                               (coverage-modulation-table nil))
"Creates an instance of PIPELINE-COVERAGE-MODULATION-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-COVERAGE-MODULATION-STATE-CREATE-INFO-NV.


See PIPELINE-COVERAGE-MODULATION-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-coverage-modulation-state-create-info-nv 
                 :next next
                 :flags flags
                 :coverage-modulation-mode coverage-modulation-mode
                 :coverage-modulation-table-enable coverage-modulation-table-enable
                 :coverage-modulation-table coverage-modulation-table))

(defun make-image-format-list-create-info (&key (next nil) (view-formats nil))
"Creates an instance of IMAGE-FORMAT-LIST-CREATE-INFO.
The arguments of this function correspond to the slots of IMAGE-FORMAT-LIST-CREATE-INFO.


See IMAGE-FORMAT-LIST-CREATE-INFO"
  (make-instance 'vk:image-format-list-create-info 
                 :next next
                 :view-formats view-formats))

(defun make-validation-cache-create-info-ext (&key (next nil) (flags nil)
                                              (initial-data-size 0)
                                              (initial-data nil))
"Creates an instance of VALIDATION-CACHE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VALIDATION-CACHE-CREATE-INFO-EXT.


See VALIDATION-CACHE-CREATE-INFO-EXT"
  (make-instance 'vk:validation-cache-create-info-ext 
                 :next next
                 :flags flags
                 :initial-data-size initial-data-size
                 :initial-data initial-data))

(defun make-shader-module-validation-cache-create-info-ext (&key (next nil)
                                                            (validation-cache nil))
"Creates an instance of SHADER-MODULE-VALIDATION-CACHE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of SHADER-MODULE-VALIDATION-CACHE-CREATE-INFO-EXT.


See SHADER-MODULE-VALIDATION-CACHE-CREATE-INFO-EXT"
  (make-instance 'vk:shader-module-validation-cache-create-info-ext 
                 :next next
                 :validation-cache validation-cache))

(defun make-physical-device-maintenance-3-properties (&key (next nil)
                                                      (max-per-set-descriptors 0)
                                                      (max-memory-allocation-size 0))
"Creates an instance of PHYSICAL-DEVICE-MAINTENANCE-3-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MAINTENANCE-3-PROPERTIES.


See PHYSICAL-DEVICE-MAINTENANCE-3-PROPERTIES"
  (make-instance 'vk:physical-device-maintenance-3-properties 
                 :next next
                 :max-per-set-descriptors max-per-set-descriptors
                 :max-memory-allocation-size max-memory-allocation-size))

(defun make-physical-device-maintenance-4-features-khr (&key (next nil)
                                                        (maintenance-4 nil))
"Creates an instance of PHYSICAL-DEVICE-MAINTENANCE-4-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MAINTENANCE-4-FEATURES-KHR.


See PHYSICAL-DEVICE-MAINTENANCE-4-FEATURES-KHR"
  (make-instance 'vk:physical-device-maintenance-4-features-khr 
                 :next next
                 :maintenance-4 maintenance-4))

(defun make-physical-device-maintenance-4-properties-khr (&key (next nil)
                                                          (max-buffer-size 0))
"Creates an instance of PHYSICAL-DEVICE-MAINTENANCE-4-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MAINTENANCE-4-PROPERTIES-KHR.


See PHYSICAL-DEVICE-MAINTENANCE-4-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-maintenance-4-properties-khr 
                 :next next
                 :max-buffer-size max-buffer-size))

(defun make-descriptor-set-layout-support (&key (next nil) (supported nil))
"Creates an instance of DESCRIPTOR-SET-LAYOUT-SUPPORT.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-LAYOUT-SUPPORT.


See DESCRIPTOR-SET-LAYOUT-SUPPORT"
  (make-instance 'vk:descriptor-set-layout-support 
                 :next next
                 :supported supported))

(defun make-physical-device-shader-draw-parameters-features (&key (next nil)
                                                             (shader-draw-parameters nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-DRAW-PARAMETERS-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-DRAW-PARAMETERS-FEATURES.


See PHYSICAL-DEVICE-SHADER-DRAW-PARAMETERS-FEATURES"
  (make-instance 'vk:physical-device-shader-draw-parameters-features 
                 :next next
                 :shader-draw-parameters shader-draw-parameters))

(defun make-physical-device-shader-float-16-int-8-features (&key (next nil)
                                                            (shader-float-16 nil)
                                                            (shader-int-8 nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-FLOAT-16-INT-8-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-FLOAT-16-INT-8-FEATURES.


See PHYSICAL-DEVICE-SHADER-FLOAT-16-INT-8-FEATURES"
  (make-instance 'vk:physical-device-shader-float-16-int-8-features 
                 :next next
                 :shader-float-16 shader-float-16
                 :shader-int-8 shader-int-8))

(defun make-physical-device-float-controls-properties (&key (next nil)
                                                       (denorm-behavior-independence nil)
                                                       (rounding-mode-independence nil)
                                                       (shader-signed-zero-inf-nan-preserve-float-16 nil)
                                                       (shader-signed-zero-inf-nan-preserve-float-32 nil)
                                                       (shader-signed-zero-inf-nan-preserve-float-64 nil)
                                                       (shader-denorm-preserve-float-16 nil)
                                                       (shader-denorm-preserve-float-32 nil)
                                                       (shader-denorm-preserve-float-64 nil)
                                                       (shader-denorm-flush-to-zero-float-16 nil)
                                                       (shader-denorm-flush-to-zero-float-32 nil)
                                                       (shader-denorm-flush-to-zero-float-64 nil)
                                                       (shader-rounding-mode-rte-float-16 nil)
                                                       (shader-rounding-mode-rte-float-32 nil)
                                                       (shader-rounding-mode-rte-float-64 nil)
                                                       (shader-rounding-mode-rtz-float-16 nil)
                                                       (shader-rounding-mode-rtz-float-32 nil)
                                                       (shader-rounding-mode-rtz-float-64 nil))
"Creates an instance of PHYSICAL-DEVICE-FLOAT-CONTROLS-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FLOAT-CONTROLS-PROPERTIES.


See PHYSICAL-DEVICE-FLOAT-CONTROLS-PROPERTIES"
  (make-instance 'vk:physical-device-float-controls-properties 
                 :next next
                 :denorm-behavior-independence denorm-behavior-independence
                 :rounding-mode-independence rounding-mode-independence
                 :shader-signed-zero-inf-nan-preserve-float-16 shader-signed-zero-inf-nan-preserve-float-16
                 :shader-signed-zero-inf-nan-preserve-float-32 shader-signed-zero-inf-nan-preserve-float-32
                 :shader-signed-zero-inf-nan-preserve-float-64 shader-signed-zero-inf-nan-preserve-float-64
                 :shader-denorm-preserve-float-16 shader-denorm-preserve-float-16
                 :shader-denorm-preserve-float-32 shader-denorm-preserve-float-32
                 :shader-denorm-preserve-float-64 shader-denorm-preserve-float-64
                 :shader-denorm-flush-to-zero-float-16 shader-denorm-flush-to-zero-float-16
                 :shader-denorm-flush-to-zero-float-32 shader-denorm-flush-to-zero-float-32
                 :shader-denorm-flush-to-zero-float-64 shader-denorm-flush-to-zero-float-64
                 :shader-rounding-mode-rte-float-16 shader-rounding-mode-rte-float-16
                 :shader-rounding-mode-rte-float-32 shader-rounding-mode-rte-float-32
                 :shader-rounding-mode-rte-float-64 shader-rounding-mode-rte-float-64
                 :shader-rounding-mode-rtz-float-16 shader-rounding-mode-rtz-float-16
                 :shader-rounding-mode-rtz-float-32 shader-rounding-mode-rtz-float-32
                 :shader-rounding-mode-rtz-float-64 shader-rounding-mode-rtz-float-64))

(defun make-physical-device-host-query-reset-features (&key (next nil)
                                                       (host-query-reset nil))
"Creates an instance of PHYSICAL-DEVICE-HOST-QUERY-RESET-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-HOST-QUERY-RESET-FEATURES.


See PHYSICAL-DEVICE-HOST-QUERY-RESET-FEATURES"
  (make-instance 'vk:physical-device-host-query-reset-features 
                 :next next
                 :host-query-reset host-query-reset))

(defun make-shader-resource-usage-amd (&key (num-used-vgprs 0)
                                       (num-used-sgprs 0)
                                       (lds-size-per-local-work-group 0)
                                       (lds-usage-size-in-bytes 0)
                                       (scratch-mem-usage-in-bytes 0))
"Creates an instance of SHADER-RESOURCE-USAGE-AMD.
The arguments of this function correspond to the slots of SHADER-RESOURCE-USAGE-AMD.


See SHADER-RESOURCE-USAGE-AMD"
  (make-instance 'vk:shader-resource-usage-amd 
                 :num-used-vgprs num-used-vgprs
                 :num-used-sgprs num-used-sgprs
                 :lds-size-per-local-work-group lds-size-per-local-work-group
                 :lds-usage-size-in-bytes lds-usage-size-in-bytes
                 :scratch-mem-usage-in-bytes scratch-mem-usage-in-bytes))

(defun make-shader-statistics-info-amd (&key (shader-stage-mask nil)
                                        (resource-usage nil)
                                        (num-physical-vgprs 0)
                                        (num-physical-sgprs 0)
                                        (num-available-vgprs 0)
                                        (num-available-sgprs 0)
                                        (compute-work-group-size 0))
"Creates an instance of SHADER-STATISTICS-INFO-AMD.
The arguments of this function correspond to the slots of SHADER-STATISTICS-INFO-AMD.


See SHADER-STATISTICS-INFO-AMD"
  (make-instance 'vk:shader-statistics-info-amd 
                 :shader-stage-mask shader-stage-mask
                 :resource-usage resource-usage
                 :num-physical-vgprs num-physical-vgprs
                 :num-physical-sgprs num-physical-sgprs
                 :num-available-vgprs num-available-vgprs
                 :num-available-sgprs num-available-sgprs
                 :compute-work-group-size compute-work-group-size))

(defun make-device-queue-global-priority-create-info-ext (&key (next nil)
                                                          (global-priority nil))
"Creates an instance of DEVICE-QUEUE-GLOBAL-PRIORITY-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DEVICE-QUEUE-GLOBAL-PRIORITY-CREATE-INFO-EXT.


See DEVICE-QUEUE-GLOBAL-PRIORITY-CREATE-INFO-EXT"
  (make-instance 'vk:device-queue-global-priority-create-info-ext 
                 :next next
                 :global-priority global-priority))

(defun make-physical-device-global-priority-query-features-ext (&key (next nil)
                                                                (global-priority-query nil))
"Creates an instance of PHYSICAL-DEVICE-GLOBAL-PRIORITY-QUERY-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-GLOBAL-PRIORITY-QUERY-FEATURES-EXT.


See PHYSICAL-DEVICE-GLOBAL-PRIORITY-QUERY-FEATURES-EXT"
  (make-instance 'vk:physical-device-global-priority-query-features-ext 
                 :next next
                 :global-priority-query global-priority-query))

(defun make-queue-family-global-priority-properties-ext (&key (next nil)
                                                         (priority-count 0)
                                                         (priorities nil))
"Creates an instance of QUEUE-FAMILY-GLOBAL-PRIORITY-PROPERTIES-EXT.
The arguments of this function correspond to the slots of QUEUE-FAMILY-GLOBAL-PRIORITY-PROPERTIES-EXT.


See QUEUE-FAMILY-GLOBAL-PRIORITY-PROPERTIES-EXT"
  (make-instance 'vk:queue-family-global-priority-properties-ext 
                 :next next
                 :priority-count priority-count
                 :priorities priorities))

(defun make-debug-utils-object-name-info-ext (&key (next nil) (object-type nil)
                                              (object-handle 0)
                                              (object-name ""))
"Creates an instance of DEBUG-UTILS-OBJECT-NAME-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-UTILS-OBJECT-NAME-INFO-EXT.


See DEBUG-UTILS-OBJECT-NAME-INFO-EXT"
  (make-instance 'vk:debug-utils-object-name-info-ext 
                 :next next
                 :object-type object-type
                 :object-handle object-handle
                 :object-name object-name))

(defun make-debug-utils-object-tag-info-ext (&key (next nil) (object-type nil)
                                             (object-handle 0) (tag-name 0)
                                             (tag-size 0) (tag nil))
"Creates an instance of DEBUG-UTILS-OBJECT-TAG-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-UTILS-OBJECT-TAG-INFO-EXT.


See DEBUG-UTILS-OBJECT-TAG-INFO-EXT"
  (make-instance 'vk:debug-utils-object-tag-info-ext 
                 :next next
                 :object-type object-type
                 :object-handle object-handle
                 :tag-name tag-name
                 :tag-size tag-size
                 :tag tag))

(defun make-debug-utils-label-ext (&key (next nil) (label-name "") (color 0.0))
"Creates an instance of DEBUG-UTILS-LABEL-EXT.
The arguments of this function correspond to the slots of DEBUG-UTILS-LABEL-EXT.


See DEBUG-UTILS-LABEL-EXT"
  (make-instance 'vk:debug-utils-label-ext 
                 :next next
                 :label-name label-name
                 :color color))

(defun make-debug-utils-messenger-create-info-ext (&key (next nil) (flags nil)
                                                   (message-severity nil)
                                                   (message-type nil)
                                                   (pfn-user-callback nil)
                                                   (user-data nil))
"Creates an instance of DEBUG-UTILS-MESSENGER-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DEBUG-UTILS-MESSENGER-CREATE-INFO-EXT.


See DEBUG-UTILS-MESSENGER-CREATE-INFO-EXT"
  (make-instance 'vk:debug-utils-messenger-create-info-ext 
                 :next next
                 :flags flags
                 :message-severity message-severity
                 :message-type message-type
                 :pfn-user-callback pfn-user-callback
                 :user-data user-data))

(defun make-debug-utils-messenger-callback-data-ext (&key (next nil)
                                                     (flags nil)
                                                     (message-id-name "")
                                                     (message-id-number 0)
                                                     (message "")
                                                     (queue-labels nil)
                                                     (cmd-buf-labels nil)
                                                     (objects nil))
"Creates an instance of DEBUG-UTILS-MESSENGER-CALLBACK-DATA-EXT.
The arguments of this function correspond to the slots of DEBUG-UTILS-MESSENGER-CALLBACK-DATA-EXT.


See DEBUG-UTILS-MESSENGER-CALLBACK-DATA-EXT"
  (make-instance 'vk:debug-utils-messenger-callback-data-ext 
                 :next next
                 :flags flags
                 :message-id-name message-id-name
                 :message-id-number message-id-number
                 :message message
                 :queue-labels queue-labels
                 :cmd-buf-labels cmd-buf-labels
                 :objects objects))

(defun make-physical-device-device-memory-report-features-ext (&key (next nil)
                                                               (device-memory-report nil))
"Creates an instance of PHYSICAL-DEVICE-DEVICE-MEMORY-REPORT-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEVICE-MEMORY-REPORT-FEATURES-EXT.


See PHYSICAL-DEVICE-DEVICE-MEMORY-REPORT-FEATURES-EXT"
  (make-instance 'vk:physical-device-device-memory-report-features-ext 
                 :next next
                 :device-memory-report device-memory-report))

(defun make-device-device-memory-report-create-info-ext (&key (next nil)
                                                         (flags nil)
                                                         (pfn-user-callback nil)
                                                         (user-data nil))
"Creates an instance of DEVICE-DEVICE-MEMORY-REPORT-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of DEVICE-DEVICE-MEMORY-REPORT-CREATE-INFO-EXT.


See DEVICE-DEVICE-MEMORY-REPORT-CREATE-INFO-EXT"
  (make-instance 'vk:device-device-memory-report-create-info-ext 
                 :next next
                 :flags flags
                 :pfn-user-callback pfn-user-callback
                 :user-data user-data))

(defun make-device-memory-report-callback-data-ext (&key (next nil) (flags nil)
                                                    (type nil)
                                                    (memory-object-id 0)
                                                    (size 0) (object-type nil)
                                                    (object-handle 0)
                                                    (heap-index 0))
"Creates an instance of DEVICE-MEMORY-REPORT-CALLBACK-DATA-EXT.
The arguments of this function correspond to the slots of DEVICE-MEMORY-REPORT-CALLBACK-DATA-EXT.


See DEVICE-MEMORY-REPORT-CALLBACK-DATA-EXT"
  (make-instance 'vk:device-memory-report-callback-data-ext 
                 :next next
                 :flags flags
                 :type type
                 :memory-object-id memory-object-id
                 :size size
                 :object-type object-type
                 :object-handle object-handle
                 :heap-index heap-index))

(defun make-import-memory-host-pointer-info-ext (&key (next nil)
                                                 (handle-type nil)
                                                 (host-pointer nil))
"Creates an instance of IMPORT-MEMORY-HOST-POINTER-INFO-EXT.
The arguments of this function correspond to the slots of IMPORT-MEMORY-HOST-POINTER-INFO-EXT.


See IMPORT-MEMORY-HOST-POINTER-INFO-EXT"
  (make-instance 'vk:import-memory-host-pointer-info-ext 
                 :next next
                 :handle-type handle-type
                 :host-pointer host-pointer))

(defun make-memory-host-pointer-properties-ext (&key (next nil)
                                                (memory-type-bits 0))
"Creates an instance of MEMORY-HOST-POINTER-PROPERTIES-EXT.
The arguments of this function correspond to the slots of MEMORY-HOST-POINTER-PROPERTIES-EXT.


See MEMORY-HOST-POINTER-PROPERTIES-EXT"
  (make-instance 'vk:memory-host-pointer-properties-ext 
                 :next next
                 :memory-type-bits memory-type-bits))

(defun make-physical-device-external-memory-host-properties-ext (&key
                                                                 (next nil)
                                                                 (min-imported-host-pointer-alignment 0))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-MEMORY-HOST-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-MEMORY-HOST-PROPERTIES-EXT.


See PHYSICAL-DEVICE-EXTERNAL-MEMORY-HOST-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-external-memory-host-properties-ext 
                 :next next
                 :min-imported-host-pointer-alignment min-imported-host-pointer-alignment))

(defun make-physical-device-conservative-rasterization-properties-ext (&key
                                                                       (next nil)
                                                                       (primitive-overestimation-size 0.0)
                                                                       (max-extra-primitive-overestimation-size 0.0)
                                                                       (extra-primitive-overestimation-size-granularity 0.0)
                                                                       (primitive-underestimation nil)
                                                                       (conservative-point-and-line-rasterization nil)
                                                                       (degenerate-triangles-rasterized nil)
                                                                       (degenerate-lines-rasterized nil)
                                                                       (fully-covered-fragment-shader-input-variable nil)
                                                                       (conservative-rasterization-post-depth-coverage nil))
"Creates an instance of PHYSICAL-DEVICE-CONSERVATIVE-RASTERIZATION-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-CONSERVATIVE-RASTERIZATION-PROPERTIES-EXT.


See PHYSICAL-DEVICE-CONSERVATIVE-RASTERIZATION-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-conservative-rasterization-properties-ext 
                 :next next
                 :primitive-overestimation-size primitive-overestimation-size
                 :max-extra-primitive-overestimation-size max-extra-primitive-overestimation-size
                 :extra-primitive-overestimation-size-granularity extra-primitive-overestimation-size-granularity
                 :primitive-underestimation primitive-underestimation
                 :conservative-point-and-line-rasterization conservative-point-and-line-rasterization
                 :degenerate-triangles-rasterized degenerate-triangles-rasterized
                 :degenerate-lines-rasterized degenerate-lines-rasterized
                 :fully-covered-fragment-shader-input-variable fully-covered-fragment-shader-input-variable
                 :conservative-rasterization-post-depth-coverage conservative-rasterization-post-depth-coverage))

(defun make-calibrated-timestamp-info-ext (&key (next nil) (time-domain nil))
"Creates an instance of CALIBRATED-TIMESTAMP-INFO-EXT.
The arguments of this function correspond to the slots of CALIBRATED-TIMESTAMP-INFO-EXT.


See CALIBRATED-TIMESTAMP-INFO-EXT"
  (make-instance 'vk:calibrated-timestamp-info-ext 
                 :next next
                 :time-domain time-domain))

(defun make-physical-device-shader-core-properties-amd (&key (next nil)
                                                        (shader-engine-count 0)
                                                        (shader-arrays-per-engine-count 0)
                                                        (compute-units-per-shader-array 0)
                                                        (simd-per-compute-unit 0)
                                                        (wavefronts-per-simd 0)
                                                        (wavefront-size 0)
                                                        (sgprs-per-simd 0)
                                                        (min-sgpr-allocation 0)
                                                        (max-sgpr-allocation 0)
                                                        (sgpr-allocation-granularity 0)
                                                        (vgprs-per-simd 0)
                                                        (min-vgpr-allocation 0)
                                                        (max-vgpr-allocation 0)
                                                        (vgpr-allocation-granularity 0))
"Creates an instance of PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-AMD.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-AMD.


See PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-AMD"
  (make-instance 'vk:physical-device-shader-core-properties-amd 
                 :next next
                 :shader-engine-count shader-engine-count
                 :shader-arrays-per-engine-count shader-arrays-per-engine-count
                 :compute-units-per-shader-array compute-units-per-shader-array
                 :simd-per-compute-unit simd-per-compute-unit
                 :wavefronts-per-simd wavefronts-per-simd
                 :wavefront-size wavefront-size
                 :sgprs-per-simd sgprs-per-simd
                 :min-sgpr-allocation min-sgpr-allocation
                 :max-sgpr-allocation max-sgpr-allocation
                 :sgpr-allocation-granularity sgpr-allocation-granularity
                 :vgprs-per-simd vgprs-per-simd
                 :min-vgpr-allocation min-vgpr-allocation
                 :max-vgpr-allocation max-vgpr-allocation
                 :vgpr-allocation-granularity vgpr-allocation-granularity))

(defun make-physical-device-shader-core-properties-2-amd (&key (next nil)
                                                          (shader-core-features nil)
                                                          (active-compute-unit-count 0))
"Creates an instance of PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-2-AMD.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-2-AMD.


See PHYSICAL-DEVICE-SHADER-CORE-PROPERTIES-2-AMD"
  (make-instance 'vk:physical-device-shader-core-properties-2-amd 
                 :next next
                 :shader-core-features shader-core-features
                 :active-compute-unit-count active-compute-unit-count))

(defun make-pipeline-rasterization-conservative-state-create-info-ext (&key
                                                                       (next nil)
                                                                       (flags nil)
                                                                       (conservative-rasterization-mode nil)
                                                                       (extra-primitive-overestimation-size 0.0))
"Creates an instance of PIPELINE-RASTERIZATION-CONSERVATIVE-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-CONSERVATIVE-STATE-CREATE-INFO-EXT.


See PIPELINE-RASTERIZATION-CONSERVATIVE-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-rasterization-conservative-state-create-info-ext 
                 :next next
                 :flags flags
                 :conservative-rasterization-mode conservative-rasterization-mode
                 :extra-primitive-overestimation-size extra-primitive-overestimation-size))

(defun make-physical-device-descriptor-indexing-features (&key (next nil)
                                                          (shader-input-attachment-array-dynamic-indexing nil)
                                                          (shader-uniform-texel-buffer-array-dynamic-indexing nil)
                                                          (shader-storage-texel-buffer-array-dynamic-indexing nil)
                                                          (shader-uniform-buffer-array-non-uniform-indexing nil)
                                                          (shader-sampled-image-array-non-uniform-indexing nil)
                                                          (shader-storage-buffer-array-non-uniform-indexing nil)
                                                          (shader-storage-image-array-non-uniform-indexing nil)
                                                          (shader-input-attachment-array-non-uniform-indexing nil)
                                                          (shader-uniform-texel-buffer-array-non-uniform-indexing nil)
                                                          (shader-storage-texel-buffer-array-non-uniform-indexing nil)
                                                          (descriptor-binding-uniform-buffer-update-after-bind nil)
                                                          (descriptor-binding-sampled-image-update-after-bind nil)
                                                          (descriptor-binding-storage-image-update-after-bind nil)
                                                          (descriptor-binding-storage-buffer-update-after-bind nil)
                                                          (descriptor-binding-uniform-texel-buffer-update-after-bind nil)
                                                          (descriptor-binding-storage-texel-buffer-update-after-bind nil)
                                                          (descriptor-binding-update-unused-while-pending nil)
                                                          (descriptor-binding-partially-bound nil)
                                                          (descriptor-binding-variable-descriptor-count nil)
                                                          (runtime-descriptor-array nil))
"Creates an instance of PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-FEATURES.


See PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-FEATURES"
  (make-instance 'vk:physical-device-descriptor-indexing-features 
                 :next next
                 :shader-input-attachment-array-dynamic-indexing shader-input-attachment-array-dynamic-indexing
                 :shader-uniform-texel-buffer-array-dynamic-indexing shader-uniform-texel-buffer-array-dynamic-indexing
                 :shader-storage-texel-buffer-array-dynamic-indexing shader-storage-texel-buffer-array-dynamic-indexing
                 :shader-uniform-buffer-array-non-uniform-indexing shader-uniform-buffer-array-non-uniform-indexing
                 :shader-sampled-image-array-non-uniform-indexing shader-sampled-image-array-non-uniform-indexing
                 :shader-storage-buffer-array-non-uniform-indexing shader-storage-buffer-array-non-uniform-indexing
                 :shader-storage-image-array-non-uniform-indexing shader-storage-image-array-non-uniform-indexing
                 :shader-input-attachment-array-non-uniform-indexing shader-input-attachment-array-non-uniform-indexing
                 :shader-uniform-texel-buffer-array-non-uniform-indexing shader-uniform-texel-buffer-array-non-uniform-indexing
                 :shader-storage-texel-buffer-array-non-uniform-indexing shader-storage-texel-buffer-array-non-uniform-indexing
                 :descriptor-binding-uniform-buffer-update-after-bind descriptor-binding-uniform-buffer-update-after-bind
                 :descriptor-binding-sampled-image-update-after-bind descriptor-binding-sampled-image-update-after-bind
                 :descriptor-binding-storage-image-update-after-bind descriptor-binding-storage-image-update-after-bind
                 :descriptor-binding-storage-buffer-update-after-bind descriptor-binding-storage-buffer-update-after-bind
                 :descriptor-binding-uniform-texel-buffer-update-after-bind descriptor-binding-uniform-texel-buffer-update-after-bind
                 :descriptor-binding-storage-texel-buffer-update-after-bind descriptor-binding-storage-texel-buffer-update-after-bind
                 :descriptor-binding-update-unused-while-pending descriptor-binding-update-unused-while-pending
                 :descriptor-binding-partially-bound descriptor-binding-partially-bound
                 :descriptor-binding-variable-descriptor-count descriptor-binding-variable-descriptor-count
                 :runtime-descriptor-array runtime-descriptor-array))

(defun make-physical-device-descriptor-indexing-properties (&key (next nil)
                                                            (max-update-after-bind-descriptors-in-all-pools 0)
                                                            (shader-uniform-buffer-array-non-uniform-indexing-native nil)
                                                            (shader-sampled-image-array-non-uniform-indexing-native nil)
                                                            (shader-storage-buffer-array-non-uniform-indexing-native nil)
                                                            (shader-storage-image-array-non-uniform-indexing-native nil)
                                                            (shader-input-attachment-array-non-uniform-indexing-native nil)
                                                            (robust-buffer-access-update-after-bind nil)
                                                            (quad-divergent-implicit-lod nil)
                                                            (max-per-stage-descriptor-update-after-bind-samplers 0)
                                                            (max-per-stage-descriptor-update-after-bind-uniform-buffers 0)
                                                            (max-per-stage-descriptor-update-after-bind-storage-buffers 0)
                                                            (max-per-stage-descriptor-update-after-bind-sampled-images 0)
                                                            (max-per-stage-descriptor-update-after-bind-storage-images 0)
                                                            (max-per-stage-descriptor-update-after-bind-input-attachments 0)
                                                            (max-per-stage-update-after-bind-resources 0)
                                                            (max-descriptor-set-update-after-bind-samplers 0)
                                                            (max-descriptor-set-update-after-bind-uniform-buffers 0)
                                                            (max-descriptor-set-update-after-bind-uniform-buffers-dynamic 0)
                                                            (max-descriptor-set-update-after-bind-storage-buffers 0)
                                                            (max-descriptor-set-update-after-bind-storage-buffers-dynamic 0)
                                                            (max-descriptor-set-update-after-bind-sampled-images 0)
                                                            (max-descriptor-set-update-after-bind-storage-images 0)
                                                            (max-descriptor-set-update-after-bind-input-attachments 0))
"Creates an instance of PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-PROPERTIES.


See PHYSICAL-DEVICE-DESCRIPTOR-INDEXING-PROPERTIES"
  (make-instance 'vk:physical-device-descriptor-indexing-properties 
                 :next next
                 :max-update-after-bind-descriptors-in-all-pools max-update-after-bind-descriptors-in-all-pools
                 :shader-uniform-buffer-array-non-uniform-indexing-native shader-uniform-buffer-array-non-uniform-indexing-native
                 :shader-sampled-image-array-non-uniform-indexing-native shader-sampled-image-array-non-uniform-indexing-native
                 :shader-storage-buffer-array-non-uniform-indexing-native shader-storage-buffer-array-non-uniform-indexing-native
                 :shader-storage-image-array-non-uniform-indexing-native shader-storage-image-array-non-uniform-indexing-native
                 :shader-input-attachment-array-non-uniform-indexing-native shader-input-attachment-array-non-uniform-indexing-native
                 :robust-buffer-access-update-after-bind robust-buffer-access-update-after-bind
                 :quad-divergent-implicit-lod quad-divergent-implicit-lod
                 :max-per-stage-descriptor-update-after-bind-samplers max-per-stage-descriptor-update-after-bind-samplers
                 :max-per-stage-descriptor-update-after-bind-uniform-buffers max-per-stage-descriptor-update-after-bind-uniform-buffers
                 :max-per-stage-descriptor-update-after-bind-storage-buffers max-per-stage-descriptor-update-after-bind-storage-buffers
                 :max-per-stage-descriptor-update-after-bind-sampled-images max-per-stage-descriptor-update-after-bind-sampled-images
                 :max-per-stage-descriptor-update-after-bind-storage-images max-per-stage-descriptor-update-after-bind-storage-images
                 :max-per-stage-descriptor-update-after-bind-input-attachments max-per-stage-descriptor-update-after-bind-input-attachments
                 :max-per-stage-update-after-bind-resources max-per-stage-update-after-bind-resources
                 :max-descriptor-set-update-after-bind-samplers max-descriptor-set-update-after-bind-samplers
                 :max-descriptor-set-update-after-bind-uniform-buffers max-descriptor-set-update-after-bind-uniform-buffers
                 :max-descriptor-set-update-after-bind-uniform-buffers-dynamic max-descriptor-set-update-after-bind-uniform-buffers-dynamic
                 :max-descriptor-set-update-after-bind-storage-buffers max-descriptor-set-update-after-bind-storage-buffers
                 :max-descriptor-set-update-after-bind-storage-buffers-dynamic max-descriptor-set-update-after-bind-storage-buffers-dynamic
                 :max-descriptor-set-update-after-bind-sampled-images max-descriptor-set-update-after-bind-sampled-images
                 :max-descriptor-set-update-after-bind-storage-images max-descriptor-set-update-after-bind-storage-images
                 :max-descriptor-set-update-after-bind-input-attachments max-descriptor-set-update-after-bind-input-attachments))

(defun make-descriptor-set-layout-binding-flags-create-info (&key (next nil)
                                                             (binding-flags nil))
"Creates an instance of DESCRIPTOR-SET-LAYOUT-BINDING-FLAGS-CREATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-LAYOUT-BINDING-FLAGS-CREATE-INFO.


See DESCRIPTOR-SET-LAYOUT-BINDING-FLAGS-CREATE-INFO"
  (make-instance 'vk:descriptor-set-layout-binding-flags-create-info 
                 :next next
                 :binding-flags binding-flags))

(defun make-descriptor-set-variable-descriptor-count-allocate-info (&key
                                                                    (next nil)
                                                                    (descriptor-counts nil))
"Creates an instance of DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-ALLOCATE-INFO.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-ALLOCATE-INFO.


See DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-ALLOCATE-INFO"
  (make-instance 'vk:descriptor-set-variable-descriptor-count-allocate-info 
                 :next next
                 :descriptor-counts descriptor-counts))

(defun make-descriptor-set-variable-descriptor-count-layout-support (&key
                                                                     (next nil)
                                                                     (max-variable-descriptor-count 0))
"Creates an instance of DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-LAYOUT-SUPPORT.
The arguments of this function correspond to the slots of DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-LAYOUT-SUPPORT.


See DESCRIPTOR-SET-VARIABLE-DESCRIPTOR-COUNT-LAYOUT-SUPPORT"
  (make-instance 'vk:descriptor-set-variable-descriptor-count-layout-support 
                 :next next
                 :max-variable-descriptor-count max-variable-descriptor-count))

(defun make-attachment-description-2 (&key (next nil) (flags nil) (format nil)
                                      (samples nil) (load-op nil)
                                      (store-op nil) (stencil-load-op nil)
                                      (stencil-store-op nil)
                                      (initial-layout nil) (final-layout nil))
"Creates an instance of ATTACHMENT-DESCRIPTION-2.
The arguments of this function correspond to the slots of ATTACHMENT-DESCRIPTION-2.


See ATTACHMENT-DESCRIPTION-2"
  (make-instance 'vk:attachment-description-2 
                 :next next
                 :flags flags
                 :format format
                 :samples samples
                 :load-op load-op
                 :store-op store-op
                 :stencil-load-op stencil-load-op
                 :stencil-store-op stencil-store-op
                 :initial-layout initial-layout
                 :final-layout final-layout))

(defun make-attachment-reference-2 (&key (next nil) (attachment 0) (layout nil)
                                    (aspect-mask nil))
"Creates an instance of ATTACHMENT-REFERENCE-2.
The arguments of this function correspond to the slots of ATTACHMENT-REFERENCE-2.


See ATTACHMENT-REFERENCE-2"
  (make-instance 'vk:attachment-reference-2 
                 :next next
                 :attachment attachment
                 :layout layout
                 :aspect-mask aspect-mask))

(defun make-subpass-description-2 (&key (next nil) (flags nil)
                                   (pipeline-bind-point nil) (view-mask 0)
                                   (input-attachments nil)
                                   (color-attachments nil)
                                   (resolve-attachments nil)
                                   (depth-stencil-attachment nil)
                                   (preserve-attachments nil))
"Creates an instance of SUBPASS-DESCRIPTION-2.
The arguments of this function correspond to the slots of SUBPASS-DESCRIPTION-2.


See SUBPASS-DESCRIPTION-2"
  (make-instance 'vk:subpass-description-2 
                 :next next
                 :flags flags
                 :pipeline-bind-point pipeline-bind-point
                 :view-mask view-mask
                 :input-attachments input-attachments
                 :color-attachments color-attachments
                 :resolve-attachments resolve-attachments
                 :depth-stencil-attachment depth-stencil-attachment
                 :preserve-attachments preserve-attachments))

(defun make-subpass-dependency-2 (&key (next nil) (src-subpass 0)
                                  (dst-subpass 0) (src-stage-mask nil)
                                  (dst-stage-mask nil) (src-access-mask nil)
                                  (dst-access-mask nil) (dependency-flags nil)
                                  (view-offset 0))
"Creates an instance of SUBPASS-DEPENDENCY-2.
The arguments of this function correspond to the slots of SUBPASS-DEPENDENCY-2.


See SUBPASS-DEPENDENCY-2"
  (make-instance 'vk:subpass-dependency-2 
                 :next next
                 :src-subpass src-subpass
                 :dst-subpass dst-subpass
                 :src-stage-mask src-stage-mask
                 :dst-stage-mask dst-stage-mask
                 :src-access-mask src-access-mask
                 :dst-access-mask dst-access-mask
                 :dependency-flags dependency-flags
                 :view-offset view-offset))

(defun make-render-pass-create-info-2 (&key (next nil) (flags nil)
                                       (attachments nil) (subpasses nil)
                                       (dependencies nil)
                                       (correlated-view-masks nil))
"Creates an instance of RENDER-PASS-CREATE-INFO-2.
The arguments of this function correspond to the slots of RENDER-PASS-CREATE-INFO-2.


See RENDER-PASS-CREATE-INFO-2"
  (make-instance 'vk:render-pass-create-info-2 
                 :next next
                 :flags flags
                 :attachments attachments
                 :subpasses subpasses
                 :dependencies dependencies
                 :correlated-view-masks correlated-view-masks))

(defun make-subpass-begin-info (&key (next nil) (contents nil))
"Creates an instance of SUBPASS-BEGIN-INFO.
The arguments of this function correspond to the slots of SUBPASS-BEGIN-INFO.


See SUBPASS-BEGIN-INFO"
  (make-instance 'vk:subpass-begin-info 
                 :next next
                 :contents contents))

(defun make-subpass-end-info (&key (next nil))
"Creates an instance of SUBPASS-END-INFO.
The arguments of this function correspond to the slots of SUBPASS-END-INFO.


See SUBPASS-END-INFO"
  (make-instance 'vk:subpass-end-info 
                 :next next))

(defun make-physical-device-timeline-semaphore-features (&key (next nil)
                                                         (timeline-semaphore nil))
"Creates an instance of PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-FEATURES.


See PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-FEATURES"
  (make-instance 'vk:physical-device-timeline-semaphore-features 
                 :next next
                 :timeline-semaphore timeline-semaphore))

(defun make-physical-device-timeline-semaphore-properties (&key (next nil)
                                                           (max-timeline-semaphore-value-difference 0))
"Creates an instance of PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-PROPERTIES.


See PHYSICAL-DEVICE-TIMELINE-SEMAPHORE-PROPERTIES"
  (make-instance 'vk:physical-device-timeline-semaphore-properties 
                 :next next
                 :max-timeline-semaphore-value-difference max-timeline-semaphore-value-difference))

(defun make-semaphore-type-create-info (&key (next nil) (semaphore-type nil)
                                        (initial-value 0))
"Creates an instance of SEMAPHORE-TYPE-CREATE-INFO.
The arguments of this function correspond to the slots of SEMAPHORE-TYPE-CREATE-INFO.


See SEMAPHORE-TYPE-CREATE-INFO"
  (make-instance 'vk:semaphore-type-create-info 
                 :next next
                 :semaphore-type semaphore-type
                 :initial-value initial-value))

(defun make-timeline-semaphore-submit-info (&key (next nil)
                                            (wait-semaphore-values nil)
                                            (signal-semaphore-values nil))
"Creates an instance of TIMELINE-SEMAPHORE-SUBMIT-INFO.
The arguments of this function correspond to the slots of TIMELINE-SEMAPHORE-SUBMIT-INFO.


See TIMELINE-SEMAPHORE-SUBMIT-INFO"
  (make-instance 'vk:timeline-semaphore-submit-info 
                 :next next
                 :wait-semaphore-values wait-semaphore-values
                 :signal-semaphore-values signal-semaphore-values))

(defun make-semaphore-wait-info (&key (next nil) (flags nil) (semaphores nil)
                                 (values nil))
"Creates an instance of SEMAPHORE-WAIT-INFO.
The arguments of this function correspond to the slots of SEMAPHORE-WAIT-INFO.


See SEMAPHORE-WAIT-INFO"
  (make-instance 'vk:semaphore-wait-info 
                 :next next
                 :flags flags
                 :semaphores semaphores
                 :values values))

(defun make-semaphore-signal-info (&key (next nil) (semaphore nil) (value 0))
"Creates an instance of SEMAPHORE-SIGNAL-INFO.
The arguments of this function correspond to the slots of SEMAPHORE-SIGNAL-INFO.


See SEMAPHORE-SIGNAL-INFO"
  (make-instance 'vk:semaphore-signal-info 
                 :next next
                 :semaphore semaphore
                 :value value))

(defun make-vertex-input-binding-divisor-description-ext (&key (binding 0)
                                                          (divisor 0))
"Creates an instance of VERTEX-INPUT-BINDING-DIVISOR-DESCRIPTION-EXT.
The arguments of this function correspond to the slots of VERTEX-INPUT-BINDING-DIVISOR-DESCRIPTION-EXT.


See VERTEX-INPUT-BINDING-DIVISOR-DESCRIPTION-EXT"
  (make-instance 'vk:vertex-input-binding-divisor-description-ext 
                 :binding binding
                 :divisor divisor))

(defun make-pipeline-vertex-input-divisor-state-create-info-ext (&key
                                                                 (next nil)
                                                                 (vertex-binding-divisors nil))
"Creates an instance of PIPELINE-VERTEX-INPUT-DIVISOR-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-VERTEX-INPUT-DIVISOR-STATE-CREATE-INFO-EXT.


See PIPELINE-VERTEX-INPUT-DIVISOR-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-vertex-input-divisor-state-create-info-ext 
                 :next next
                 :vertex-binding-divisors vertex-binding-divisors))

(defun make-physical-device-vertex-attribute-divisor-properties-ext (&key
                                                                     (next nil)
                                                                     (max-vertex-attrib-divisor 0))
"Creates an instance of PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-PROPERTIES-EXT.


See PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-vertex-attribute-divisor-properties-ext 
                 :next next
                 :max-vertex-attrib-divisor max-vertex-attrib-divisor))

(defun make-physical-device-p-c-i-bus-info-properties-ext (&key (next nil)
                                                           (pci-domain 0)
                                                           (pci-bus 0)
                                                           (pci-device 0)
                                                           (pci-function 0))
"Creates an instance of PHYSICAL-DEVICE-P-C-I-BUS-INFO-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-P-C-I-BUS-INFO-PROPERTIES-EXT.


See PHYSICAL-DEVICE-P-C-I-BUS-INFO-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-p-c-i-bus-info-properties-ext 
                 :next next
                 :pci-domain pci-domain
                 :pci-bus pci-bus
                 :pci-device pci-device
                 :pci-function pci-function))

(defun make-import-android-hardware-buffer-info-android (&key (next nil)
                                                         (buffer nil))
"Creates an instance of IMPORT-ANDROID-HARDWARE-BUFFER-INFO-ANDROID.
The arguments of this function correspond to the slots of IMPORT-ANDROID-HARDWARE-BUFFER-INFO-ANDROID.


See IMPORT-ANDROID-HARDWARE-BUFFER-INFO-ANDROID"
  (make-instance 'vk:import-android-hardware-buffer-info-android 
                 :next next
                 :buffer buffer))

(defun make-android-hardware-buffer-usage-android (&key (next nil)
                                                   (android-hardware-buffer-usage 0))
"Creates an instance of ANDROID-HARDWARE-BUFFER-USAGE-ANDROID.
The arguments of this function correspond to the slots of ANDROID-HARDWARE-BUFFER-USAGE-ANDROID.


See ANDROID-HARDWARE-BUFFER-USAGE-ANDROID"
  (make-instance 'vk:android-hardware-buffer-usage-android 
                 :next next
                 :android-hardware-buffer-usage android-hardware-buffer-usage))

(defun make-android-hardware-buffer-properties-android (&key (next nil)
                                                        (allocation-size 0)
                                                        (memory-type-bits 0))
"Creates an instance of ANDROID-HARDWARE-BUFFER-PROPERTIES-ANDROID.
The arguments of this function correspond to the slots of ANDROID-HARDWARE-BUFFER-PROPERTIES-ANDROID.


See ANDROID-HARDWARE-BUFFER-PROPERTIES-ANDROID"
  (make-instance 'vk:android-hardware-buffer-properties-android 
                 :next next
                 :allocation-size allocation-size
                 :memory-type-bits memory-type-bits))

(defun make-memory-get-android-hardware-buffer-info-android (&key (next nil)
                                                             (memory nil))
"Creates an instance of MEMORY-GET-ANDROID-HARDWARE-BUFFER-INFO-ANDROID.
The arguments of this function correspond to the slots of MEMORY-GET-ANDROID-HARDWARE-BUFFER-INFO-ANDROID.


See MEMORY-GET-ANDROID-HARDWARE-BUFFER-INFO-ANDROID"
  (make-instance 'vk:memory-get-android-hardware-buffer-info-android 
                 :next next
                 :memory memory))

(defun make-android-hardware-buffer-format-properties-android (&key (next nil)
                                                               (format nil)
                                                               (external-format 0)
                                                               (format-features nil)
                                                               (sampler-ycbcr-conversion-components (vk:make-component-mapping))
                                                               (suggested-ycbcr-model nil)
                                                               (suggested-ycbcr-range nil)
                                                               (suggested-x-chroma-offset nil)
                                                               (suggested-y-chroma-offset nil))
"Creates an instance of ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-ANDROID.
The arguments of this function correspond to the slots of ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-ANDROID.


See ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-ANDROID"
  (make-instance 'vk:android-hardware-buffer-format-properties-android 
                 :next next
                 :format format
                 :external-format external-format
                 :format-features format-features
                 :sampler-ycbcr-conversion-components sampler-ycbcr-conversion-components
                 :suggested-ycbcr-model suggested-ycbcr-model
                 :suggested-ycbcr-range suggested-ycbcr-range
                 :suggested-x-chroma-offset suggested-x-chroma-offset
                 :suggested-y-chroma-offset suggested-y-chroma-offset))

(defun make-command-buffer-inheritance-conditional-rendering-info-ext (&key
                                                                       (next nil)
                                                                       (conditional-rendering-enable nil))
"Creates an instance of COMMAND-BUFFER-INHERITANCE-CONDITIONAL-RENDERING-INFO-EXT.
The arguments of this function correspond to the slots of COMMAND-BUFFER-INHERITANCE-CONDITIONAL-RENDERING-INFO-EXT.


See COMMAND-BUFFER-INHERITANCE-CONDITIONAL-RENDERING-INFO-EXT"
  (make-instance 'vk:command-buffer-inheritance-conditional-rendering-info-ext 
                 :next next
                 :conditional-rendering-enable conditional-rendering-enable))

(defun make-external-format-android (&key (next nil) (external-format 0))
"Creates an instance of EXTERNAL-FORMAT-ANDROID.
The arguments of this function correspond to the slots of EXTERNAL-FORMAT-ANDROID.


See EXTERNAL-FORMAT-ANDROID"
  (make-instance 'vk:external-format-android 
                 :next next
                 :external-format external-format))

(defun make-physical-device-8-bit-storage-features (&key (next nil)
                                                    (storage-buffer-8-bit-access nil)
                                                    (uniform-and-storage-buffer-8-bit-access nil)
                                                    (storage-push-constant-8 nil))
"Creates an instance of PHYSICAL-DEVICE-8-BIT-STORAGE-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-8-BIT-STORAGE-FEATURES.


See PHYSICAL-DEVICE-8-BIT-STORAGE-FEATURES"
  (make-instance 'vk:physical-device-8-bit-storage-features 
                 :next next
                 :storage-buffer-8-bit-access storage-buffer-8-bit-access
                 :uniform-and-storage-buffer-8-bit-access uniform-and-storage-buffer-8-bit-access
                 :storage-push-constant-8 storage-push-constant-8))

(defun make-physical-device-conditional-rendering-features-ext (&key (next nil)
                                                                (conditional-rendering nil)
                                                                (inherited-conditional-rendering nil))
"Creates an instance of PHYSICAL-DEVICE-CONDITIONAL-RENDERING-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-CONDITIONAL-RENDERING-FEATURES-EXT.


See PHYSICAL-DEVICE-CONDITIONAL-RENDERING-FEATURES-EXT"
  (make-instance 'vk:physical-device-conditional-rendering-features-ext 
                 :next next
                 :conditional-rendering conditional-rendering
                 :inherited-conditional-rendering inherited-conditional-rendering))

(defun make-physical-device-vulkan-memory-model-features (&key (next nil)
                                                          (vulkan-memory-model nil)
                                                          (vulkan-memory-model-device-scope nil)
                                                          (vulkan-memory-model-availability-visibility-chains nil))
"Creates an instance of PHYSICAL-DEVICE-VULKAN-MEMORY-MODEL-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VULKAN-MEMORY-MODEL-FEATURES.


See PHYSICAL-DEVICE-VULKAN-MEMORY-MODEL-FEATURES"
  (make-instance 'vk:physical-device-vulkan-memory-model-features 
                 :next next
                 :vulkan-memory-model vulkan-memory-model
                 :vulkan-memory-model-device-scope vulkan-memory-model-device-scope
                 :vulkan-memory-model-availability-visibility-chains vulkan-memory-model-availability-visibility-chains))

(defun make-physical-device-shader-atomic-int-64-features (&key (next nil)
                                                           (shader-buffer-int-64-atomics nil)
                                                           (shader-shared-int-64-atomics nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-ATOMIC-INT-64-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-ATOMIC-INT-64-FEATURES.


See PHYSICAL-DEVICE-SHADER-ATOMIC-INT-64-FEATURES"
  (make-instance 'vk:physical-device-shader-atomic-int-64-features 
                 :next next
                 :shader-buffer-int-64-atomics shader-buffer-int-64-atomics
                 :shader-shared-int-64-atomics shader-shared-int-64-atomics))

(defun make-physical-device-shader-atomic-float-features-ext (&key (next nil)
                                                              (shader-buffer-float-32-atomics nil)
                                                              (shader-buffer-float-32-atomic-add nil)
                                                              (shader-buffer-float-64-atomics nil)
                                                              (shader-buffer-float-64-atomic-add nil)
                                                              (shader-shared-float-32-atomics nil)
                                                              (shader-shared-float-32-atomic-add nil)
                                                              (shader-shared-float-64-atomics nil)
                                                              (shader-shared-float-64-atomic-add nil)
                                                              (shader-image-float-32-atomics nil)
                                                              (shader-image-float-32-atomic-add nil)
                                                              (sparse-image-float-32-atomics nil)
                                                              (sparse-image-float-32-atomic-add nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-FEATURES-EXT.


See PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-FEATURES-EXT"
  (make-instance 'vk:physical-device-shader-atomic-float-features-ext 
                 :next next
                 :shader-buffer-float-32-atomics shader-buffer-float-32-atomics
                 :shader-buffer-float-32-atomic-add shader-buffer-float-32-atomic-add
                 :shader-buffer-float-64-atomics shader-buffer-float-64-atomics
                 :shader-buffer-float-64-atomic-add shader-buffer-float-64-atomic-add
                 :shader-shared-float-32-atomics shader-shared-float-32-atomics
                 :shader-shared-float-32-atomic-add shader-shared-float-32-atomic-add
                 :shader-shared-float-64-atomics shader-shared-float-64-atomics
                 :shader-shared-float-64-atomic-add shader-shared-float-64-atomic-add
                 :shader-image-float-32-atomics shader-image-float-32-atomics
                 :shader-image-float-32-atomic-add shader-image-float-32-atomic-add
                 :sparse-image-float-32-atomics sparse-image-float-32-atomics
                 :sparse-image-float-32-atomic-add sparse-image-float-32-atomic-add))

(defun make-physical-device-shader-atomic-float-2-features-ext (&key (next nil)
                                                                (shader-buffer-float-16-atomics nil)
                                                                (shader-buffer-float-16-atomic-add nil)
                                                                (shader-buffer-float-16-atomic-min-max nil)
                                                                (shader-buffer-float-32-atomic-min-max nil)
                                                                (shader-buffer-float-64-atomic-min-max nil)
                                                                (shader-shared-float-16-atomics nil)
                                                                (shader-shared-float-16-atomic-add nil)
                                                                (shader-shared-float-16-atomic-min-max nil)
                                                                (shader-shared-float-32-atomic-min-max nil)
                                                                (shader-shared-float-64-atomic-min-max nil)
                                                                (shader-image-float-32-atomic-min-max nil)
                                                                (sparse-image-float-32-atomic-min-max nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-2-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-2-FEATURES-EXT.


See PHYSICAL-DEVICE-SHADER-ATOMIC-FLOAT-2-FEATURES-EXT"
  (make-instance 'vk:physical-device-shader-atomic-float-2-features-ext 
                 :next next
                 :shader-buffer-float-16-atomics shader-buffer-float-16-atomics
                 :shader-buffer-float-16-atomic-add shader-buffer-float-16-atomic-add
                 :shader-buffer-float-16-atomic-min-max shader-buffer-float-16-atomic-min-max
                 :shader-buffer-float-32-atomic-min-max shader-buffer-float-32-atomic-min-max
                 :shader-buffer-float-64-atomic-min-max shader-buffer-float-64-atomic-min-max
                 :shader-shared-float-16-atomics shader-shared-float-16-atomics
                 :shader-shared-float-16-atomic-add shader-shared-float-16-atomic-add
                 :shader-shared-float-16-atomic-min-max shader-shared-float-16-atomic-min-max
                 :shader-shared-float-32-atomic-min-max shader-shared-float-32-atomic-min-max
                 :shader-shared-float-64-atomic-min-max shader-shared-float-64-atomic-min-max
                 :shader-image-float-32-atomic-min-max shader-image-float-32-atomic-min-max
                 :sparse-image-float-32-atomic-min-max sparse-image-float-32-atomic-min-max))

(defun make-physical-device-vertex-attribute-divisor-features-ext (&key
                                                                   (next nil)
                                                                   (vertex-attribute-instance-rate-divisor nil)
                                                                   (vertex-attribute-instance-rate-zero-divisor nil))
"Creates an instance of PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-FEATURES-EXT.


See PHYSICAL-DEVICE-VERTEX-ATTRIBUTE-DIVISOR-FEATURES-EXT"
  (make-instance 'vk:physical-device-vertex-attribute-divisor-features-ext 
                 :next next
                 :vertex-attribute-instance-rate-divisor vertex-attribute-instance-rate-divisor
                 :vertex-attribute-instance-rate-zero-divisor vertex-attribute-instance-rate-zero-divisor))

(defun make-queue-family-checkpoint-properties-nv (&key (next nil)
                                                   (checkpoint-execution-stage-mask nil))
"Creates an instance of QUEUE-FAMILY-CHECKPOINT-PROPERTIES-NV.
The arguments of this function correspond to the slots of QUEUE-FAMILY-CHECKPOINT-PROPERTIES-NV.


See QUEUE-FAMILY-CHECKPOINT-PROPERTIES-NV"
  (make-instance 'vk:queue-family-checkpoint-properties-nv 
                 :next next
                 :checkpoint-execution-stage-mask checkpoint-execution-stage-mask))

(defun make-checkpoint-data-nv (&key (next nil) (stage nil)
                                (checkpoint-marker nil))
"Creates an instance of CHECKPOINT-DATA-NV.
The arguments of this function correspond to the slots of CHECKPOINT-DATA-NV.


See CHECKPOINT-DATA-NV"
  (make-instance 'vk:checkpoint-data-nv 
                 :next next
                 :stage stage
                 :checkpoint-marker checkpoint-marker))

(defun make-physical-device-depth-stencil-resolve-properties (&key (next nil)
                                                              (supported-depth-resolve-modes nil)
                                                              (supported-stencil-resolve-modes nil)
                                                              (independent-resolve-none nil)
                                                              (independent-resolve nil))
"Creates an instance of PHYSICAL-DEVICE-DEPTH-STENCIL-RESOLVE-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEPTH-STENCIL-RESOLVE-PROPERTIES.


See PHYSICAL-DEVICE-DEPTH-STENCIL-RESOLVE-PROPERTIES"
  (make-instance 'vk:physical-device-depth-stencil-resolve-properties 
                 :next next
                 :supported-depth-resolve-modes supported-depth-resolve-modes
                 :supported-stencil-resolve-modes supported-stencil-resolve-modes
                 :independent-resolve-none independent-resolve-none
                 :independent-resolve independent-resolve))

(defun make-subpass-description-depth-stencil-resolve (&key (next nil)
                                                       (depth-resolve-mode nil)
                                                       (stencil-resolve-mode nil)
                                                       (depth-stencil-resolve-attachment nil))
"Creates an instance of SUBPASS-DESCRIPTION-DEPTH-STENCIL-RESOLVE.
The arguments of this function correspond to the slots of SUBPASS-DESCRIPTION-DEPTH-STENCIL-RESOLVE.


See SUBPASS-DESCRIPTION-DEPTH-STENCIL-RESOLVE"
  (make-instance 'vk:subpass-description-depth-stencil-resolve 
                 :next next
                 :depth-resolve-mode depth-resolve-mode
                 :stencil-resolve-mode stencil-resolve-mode
                 :depth-stencil-resolve-attachment depth-stencil-resolve-attachment))

(defun make-image-view-astc-decode-mode-ext (&key (next nil) (decode-mode nil))
"Creates an instance of IMAGE-VIEW-ASTC-DECODE-MODE-EXT.
The arguments of this function correspond to the slots of IMAGE-VIEW-ASTC-DECODE-MODE-EXT.


See IMAGE-VIEW-ASTC-DECODE-MODE-EXT"
  (make-instance 'vk:image-view-astc-decode-mode-ext 
                 :next next
                 :decode-mode decode-mode))

(defun make-physical-device-astc-decode-features-ext (&key (next nil)
                                                      (decode-mode-shared-exponent nil))
"Creates an instance of PHYSICAL-DEVICE-ASTC-DECODE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ASTC-DECODE-FEATURES-EXT.


See PHYSICAL-DEVICE-ASTC-DECODE-FEATURES-EXT"
  (make-instance 'vk:physical-device-astc-decode-features-ext 
                 :next next
                 :decode-mode-shared-exponent decode-mode-shared-exponent))

(defun make-physical-device-transform-feedback-features-ext (&key (next nil)
                                                             (transform-feedback nil)
                                                             (geometry-streams nil))
"Creates an instance of PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-FEATURES-EXT.


See PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-FEATURES-EXT"
  (make-instance 'vk:physical-device-transform-feedback-features-ext 
                 :next next
                 :transform-feedback transform-feedback
                 :geometry-streams geometry-streams))

(defun make-physical-device-transform-feedback-properties-ext (&key (next nil)
                                                               (max-transform-feedback-streams 0)
                                                               (max-transform-feedback-buffers 0)
                                                               (max-transform-feedback-buffer-size 0)
                                                               (max-transform-feedback-stream-data-size 0)
                                                               (max-transform-feedback-buffer-data-size 0)
                                                               (max-transform-feedback-buffer-data-stride 0)
                                                               (transform-feedback-queries nil)
                                                               (transform-feedback-streams-lines-triangles nil)
                                                               (transform-feedback-rasterization-stream-select nil)
                                                               (transform-feedback-draw nil))
"Creates an instance of PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-PROPERTIES-EXT.


See PHYSICAL-DEVICE-TRANSFORM-FEEDBACK-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-transform-feedback-properties-ext 
                 :next next
                 :max-transform-feedback-streams max-transform-feedback-streams
                 :max-transform-feedback-buffers max-transform-feedback-buffers
                 :max-transform-feedback-buffer-size max-transform-feedback-buffer-size
                 :max-transform-feedback-stream-data-size max-transform-feedback-stream-data-size
                 :max-transform-feedback-buffer-data-size max-transform-feedback-buffer-data-size
                 :max-transform-feedback-buffer-data-stride max-transform-feedback-buffer-data-stride
                 :transform-feedback-queries transform-feedback-queries
                 :transform-feedback-streams-lines-triangles transform-feedback-streams-lines-triangles
                 :transform-feedback-rasterization-stream-select transform-feedback-rasterization-stream-select
                 :transform-feedback-draw transform-feedback-draw))

(defun make-pipeline-rasterization-state-stream-create-info-ext (&key
                                                                 (next nil)
                                                                 (flags nil)
                                                                 (rasterization-stream 0))
"Creates an instance of PIPELINE-RASTERIZATION-STATE-STREAM-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-STATE-STREAM-CREATE-INFO-EXT.


See PIPELINE-RASTERIZATION-STATE-STREAM-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-rasterization-state-stream-create-info-ext 
                 :next next
                 :flags flags
                 :rasterization-stream rasterization-stream))

(defun make-physical-device-representative-fragment-test-features-nv (&key
                                                                      (next nil)
                                                                      (representative-fragment-test nil))
"Creates an instance of PHYSICAL-DEVICE-REPRESENTATIVE-FRAGMENT-TEST-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-REPRESENTATIVE-FRAGMENT-TEST-FEATURES-NV.


See PHYSICAL-DEVICE-REPRESENTATIVE-FRAGMENT-TEST-FEATURES-NV"
  (make-instance 'vk:physical-device-representative-fragment-test-features-nv 
                 :next next
                 :representative-fragment-test representative-fragment-test))

(defun make-pipeline-representative-fragment-test-state-create-info-nv (&key
                                                                        (next nil)
                                                                        (representative-fragment-test-enable nil))
"Creates an instance of PIPELINE-REPRESENTATIVE-FRAGMENT-TEST-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-REPRESENTATIVE-FRAGMENT-TEST-STATE-CREATE-INFO-NV.


See PIPELINE-REPRESENTATIVE-FRAGMENT-TEST-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-representative-fragment-test-state-create-info-nv 
                 :next next
                 :representative-fragment-test-enable representative-fragment-test-enable))

(defun make-physical-device-exclusive-scissor-features-nv (&key (next nil)
                                                           (exclusive-scissor nil))
"Creates an instance of PHYSICAL-DEVICE-EXCLUSIVE-SCISSOR-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXCLUSIVE-SCISSOR-FEATURES-NV.


See PHYSICAL-DEVICE-EXCLUSIVE-SCISSOR-FEATURES-NV"
  (make-instance 'vk:physical-device-exclusive-scissor-features-nv 
                 :next next
                 :exclusive-scissor exclusive-scissor))

(defun make-pipeline-viewport-exclusive-scissor-state-create-info-nv (&key
                                                                      (next nil)
                                                                      (exclusive-scissors nil))
"Creates an instance of PIPELINE-VIEWPORT-EXCLUSIVE-SCISSOR-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-EXCLUSIVE-SCISSOR-STATE-CREATE-INFO-NV.


See PIPELINE-VIEWPORT-EXCLUSIVE-SCISSOR-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-viewport-exclusive-scissor-state-create-info-nv 
                 :next next
                 :exclusive-scissors exclusive-scissors))

(defun make-physical-device-corner-sampled-image-features-nv (&key (next nil)
                                                              (corner-sampled-image nil))
"Creates an instance of PHYSICAL-DEVICE-CORNER-SAMPLED-IMAGE-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-CORNER-SAMPLED-IMAGE-FEATURES-NV.


See PHYSICAL-DEVICE-CORNER-SAMPLED-IMAGE-FEATURES-NV"
  (make-instance 'vk:physical-device-corner-sampled-image-features-nv 
                 :next next
                 :corner-sampled-image corner-sampled-image))

(defun make-physical-device-compute-shader-derivatives-features-nv (&key
                                                                    (next nil)
                                                                    (compute-derivative-group-quads nil)
                                                                    (compute-derivative-group-linear nil))
"Creates an instance of PHYSICAL-DEVICE-COMPUTE-SHADER-DERIVATIVES-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COMPUTE-SHADER-DERIVATIVES-FEATURES-NV.


See PHYSICAL-DEVICE-COMPUTE-SHADER-DERIVATIVES-FEATURES-NV"
  (make-instance 'vk:physical-device-compute-shader-derivatives-features-nv 
                 :next next
                 :compute-derivative-group-quads compute-derivative-group-quads
                 :compute-derivative-group-linear compute-derivative-group-linear))

(defun make-physical-device-fragment-shader-barycentric-features-nv (&key
                                                                     (next nil)
                                                                     (fragment-shader-barycentric nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADER-BARYCENTRIC-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADER-BARYCENTRIC-FEATURES-NV.


See PHYSICAL-DEVICE-FRAGMENT-SHADER-BARYCENTRIC-FEATURES-NV"
  (make-instance 'vk:physical-device-fragment-shader-barycentric-features-nv 
                 :next next
                 :fragment-shader-barycentric fragment-shader-barycentric))

(defun make-physical-device-shader-image-footprint-features-nv (&key (next nil)
                                                                (image-footprint nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-IMAGE-FOOTPRINT-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-IMAGE-FOOTPRINT-FEATURES-NV.


See PHYSICAL-DEVICE-SHADER-IMAGE-FOOTPRINT-FEATURES-NV"
  (make-instance 'vk:physical-device-shader-image-footprint-features-nv 
                 :next next
                 :image-footprint image-footprint))

(defun make-physical-device-dedicated-allocation-image-aliasing-features-nv (&key
                                                                             (next nil)
                                                                             (dedicated-allocation-image-aliasing nil))
"Creates an instance of PHYSICAL-DEVICE-DEDICATED-ALLOCATION-IMAGE-ALIASING-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEDICATED-ALLOCATION-IMAGE-ALIASING-FEATURES-NV.


See PHYSICAL-DEVICE-DEDICATED-ALLOCATION-IMAGE-ALIASING-FEATURES-NV"
  (make-instance 'vk:physical-device-dedicated-allocation-image-aliasing-features-nv 
                 :next next
                 :dedicated-allocation-image-aliasing dedicated-allocation-image-aliasing))

(defun make-shading-rate-palette-nv (&key (shading-rate-palette-entries nil))
"Creates an instance of SHADING-RATE-PALETTE-NV.
The arguments of this function correspond to the slots of SHADING-RATE-PALETTE-NV.


See SHADING-RATE-PALETTE-NV"
  (make-instance 'vk:shading-rate-palette-nv 
                 :shading-rate-palette-entries shading-rate-palette-entries))

(defun make-pipeline-viewport-shading-rate-image-state-create-info-nv (&key
                                                                       (next nil)
                                                                       (shading-rate-image-enable nil)
                                                                       (shading-rate-palettes nil))
"Creates an instance of PIPELINE-VIEWPORT-SHADING-RATE-IMAGE-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-SHADING-RATE-IMAGE-STATE-CREATE-INFO-NV.


See PIPELINE-VIEWPORT-SHADING-RATE-IMAGE-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-viewport-shading-rate-image-state-create-info-nv 
                 :next next
                 :shading-rate-image-enable shading-rate-image-enable
                 :shading-rate-palettes shading-rate-palettes))

(defun make-physical-device-shading-rate-image-features-nv (&key (next nil)
                                                            (shading-rate-image nil)
                                                            (shading-rate-coarse-sample-order nil))
"Creates an instance of PHYSICAL-DEVICE-SHADING-RATE-IMAGE-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADING-RATE-IMAGE-FEATURES-NV.


See PHYSICAL-DEVICE-SHADING-RATE-IMAGE-FEATURES-NV"
  (make-instance 'vk:physical-device-shading-rate-image-features-nv 
                 :next next
                 :shading-rate-image shading-rate-image
                 :shading-rate-coarse-sample-order shading-rate-coarse-sample-order))

(defun make-physical-device-shading-rate-image-properties-nv (&key (next nil)
                                                              (shading-rate-texel-size (vk:make-extent-2d))
                                                              (shading-rate-palette-size 0)
                                                              (shading-rate-max-coarse-samples 0))
"Creates an instance of PHYSICAL-DEVICE-SHADING-RATE-IMAGE-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADING-RATE-IMAGE-PROPERTIES-NV.


See PHYSICAL-DEVICE-SHADING-RATE-IMAGE-PROPERTIES-NV"
  (make-instance 'vk:physical-device-shading-rate-image-properties-nv 
                 :next next
                 :shading-rate-texel-size shading-rate-texel-size
                 :shading-rate-palette-size shading-rate-palette-size
                 :shading-rate-max-coarse-samples shading-rate-max-coarse-samples))

(defun make-physical-device-invocation-mask-features-huawei (&key (next nil)
                                                             (invocation-mask nil))
"Creates an instance of PHYSICAL-DEVICE-INVOCATION-MASK-FEATURES-HUAWEI.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-INVOCATION-MASK-FEATURES-HUAWEI.


See PHYSICAL-DEVICE-INVOCATION-MASK-FEATURES-HUAWEI"
  (make-instance 'vk:physical-device-invocation-mask-features-huawei 
                 :next next
                 :invocation-mask invocation-mask))

(defun make-coarse-sample-location-nv (&key (pixel-x 0) (pixel-y 0) (sample 0))
"Creates an instance of COARSE-SAMPLE-LOCATION-NV.
The arguments of this function correspond to the slots of COARSE-SAMPLE-LOCATION-NV.


See COARSE-SAMPLE-LOCATION-NV"
  (make-instance 'vk:coarse-sample-location-nv 
                 :pixel-x pixel-x
                 :pixel-y pixel-y
                 :sample sample))

(defun make-coarse-sample-order-custom-nv (&key (shading-rate nil)
                                           (sample-count 0)
                                           (sample-locations nil))
"Creates an instance of COARSE-SAMPLE-ORDER-CUSTOM-NV.
The arguments of this function correspond to the slots of COARSE-SAMPLE-ORDER-CUSTOM-NV.


See COARSE-SAMPLE-ORDER-CUSTOM-NV"
  (make-instance 'vk:coarse-sample-order-custom-nv 
                 :shading-rate shading-rate
                 :sample-count sample-count
                 :sample-locations sample-locations))

(defun make-pipeline-viewport-coarse-sample-order-state-create-info-nv (&key
                                                                        (next nil)
                                                                        (sample-order-type nil)
                                                                        (custom-sample-orders nil))
"Creates an instance of PIPELINE-VIEWPORT-COARSE-SAMPLE-ORDER-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-VIEWPORT-COARSE-SAMPLE-ORDER-STATE-CREATE-INFO-NV.


See PIPELINE-VIEWPORT-COARSE-SAMPLE-ORDER-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-viewport-coarse-sample-order-state-create-info-nv 
                 :next next
                 :sample-order-type sample-order-type
                 :custom-sample-orders custom-sample-orders))

(defun make-physical-device-mesh-shader-features-nv (&key (next nil)
                                                     (task-shader nil)
                                                     (mesh-shader nil))
"Creates an instance of PHYSICAL-DEVICE-MESH-SHADER-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MESH-SHADER-FEATURES-NV.


See PHYSICAL-DEVICE-MESH-SHADER-FEATURES-NV"
  (make-instance 'vk:physical-device-mesh-shader-features-nv 
                 :next next
                 :task-shader task-shader
                 :mesh-shader mesh-shader))

(defun make-physical-device-mesh-shader-properties-nv (&key (next nil)
                                                       (max-draw-mesh-tasks-count 0)
                                                       (max-task-work-group-invocations 0)
                                                       (max-task-work-group-size 0)
                                                       (max-task-total-memory-size 0)
                                                       (max-task-output-count 0)
                                                       (max-mesh-work-group-invocations 0)
                                                       (max-mesh-work-group-size 0)
                                                       (max-mesh-total-memory-size 0)
                                                       (max-mesh-output-vertices 0)
                                                       (max-mesh-output-primitives 0)
                                                       (max-mesh-multiview-view-count 0)
                                                       (mesh-output-per-vertex-granularity 0)
                                                       (mesh-output-per-primitive-granularity 0))
"Creates an instance of PHYSICAL-DEVICE-MESH-SHADER-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MESH-SHADER-PROPERTIES-NV.


See PHYSICAL-DEVICE-MESH-SHADER-PROPERTIES-NV"
  (make-instance 'vk:physical-device-mesh-shader-properties-nv 
                 :next next
                 :max-draw-mesh-tasks-count max-draw-mesh-tasks-count
                 :max-task-work-group-invocations max-task-work-group-invocations
                 :max-task-work-group-size max-task-work-group-size
                 :max-task-total-memory-size max-task-total-memory-size
                 :max-task-output-count max-task-output-count
                 :max-mesh-work-group-invocations max-mesh-work-group-invocations
                 :max-mesh-work-group-size max-mesh-work-group-size
                 :max-mesh-total-memory-size max-mesh-total-memory-size
                 :max-mesh-output-vertices max-mesh-output-vertices
                 :max-mesh-output-primitives max-mesh-output-primitives
                 :max-mesh-multiview-view-count max-mesh-multiview-view-count
                 :mesh-output-per-vertex-granularity mesh-output-per-vertex-granularity
                 :mesh-output-per-primitive-granularity mesh-output-per-primitive-granularity))

(defun make-draw-mesh-tasks-indirect-command-nv (&key (task-count 0)
                                                 (first-task 0))
"Creates an instance of DRAW-MESH-TASKS-INDIRECT-COMMAND-NV.
The arguments of this function correspond to the slots of DRAW-MESH-TASKS-INDIRECT-COMMAND-NV.


See DRAW-MESH-TASKS-INDIRECT-COMMAND-NV"
  (make-instance 'vk:draw-mesh-tasks-indirect-command-nv 
                 :task-count task-count
                 :first-task first-task))

(defun make-ray-tracing-shader-group-create-info-nv (&key (next nil) (type nil)
                                                     (general-shader 0)
                                                     (closest-hit-shader 0)
                                                     (any-hit-shader 0)
                                                     (intersection-shader 0))
"Creates an instance of RAY-TRACING-SHADER-GROUP-CREATE-INFO-NV.
The arguments of this function correspond to the slots of RAY-TRACING-SHADER-GROUP-CREATE-INFO-NV.


See RAY-TRACING-SHADER-GROUP-CREATE-INFO-NV"
  (make-instance 'vk:ray-tracing-shader-group-create-info-nv 
                 :next next
                 :type type
                 :general-shader general-shader
                 :closest-hit-shader closest-hit-shader
                 :any-hit-shader any-hit-shader
                 :intersection-shader intersection-shader))

(defun make-ray-tracing-shader-group-create-info-khr (&key (next nil)
                                                      (type nil)
                                                      (general-shader 0)
                                                      (closest-hit-shader 0)
                                                      (any-hit-shader 0)
                                                      (intersection-shader 0)
                                                      (shader-group-capture-replay-handle nil))
"Creates an instance of RAY-TRACING-SHADER-GROUP-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of RAY-TRACING-SHADER-GROUP-CREATE-INFO-KHR.


See RAY-TRACING-SHADER-GROUP-CREATE-INFO-KHR"
  (make-instance 'vk:ray-tracing-shader-group-create-info-khr 
                 :next next
                 :type type
                 :general-shader general-shader
                 :closest-hit-shader closest-hit-shader
                 :any-hit-shader any-hit-shader
                 :intersection-shader intersection-shader
                 :shader-group-capture-replay-handle shader-group-capture-replay-handle))

(defun make-ray-tracing-pipeline-create-info-nv (&key (next nil) (flags nil)
                                                 (stages nil) (groups nil)
                                                 (max-recursion-depth 0)
                                                 (layout nil)
                                                 (base-pipeline-handle nil)
                                                 (base-pipeline-index 0))
"Creates an instance of RAY-TRACING-PIPELINE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of RAY-TRACING-PIPELINE-CREATE-INFO-NV.


See RAY-TRACING-PIPELINE-CREATE-INFO-NV"
  (make-instance 'vk:ray-tracing-pipeline-create-info-nv 
                 :next next
                 :flags flags
                 :stages stages
                 :groups groups
                 :max-recursion-depth max-recursion-depth
                 :layout layout
                 :base-pipeline-handle base-pipeline-handle
                 :base-pipeline-index base-pipeline-index))

(defun make-ray-tracing-pipeline-create-info-khr (&key (next nil) (flags nil)
                                                  (stages nil) (groups nil)
                                                  (max-pipeline-ray-recursion-depth 0)
                                                  (library-info nil)
                                                  (library-interface nil)
                                                  (dynamic-state nil)
                                                  (layout nil)
                                                  (base-pipeline-handle nil)
                                                  (base-pipeline-index 0))
"Creates an instance of RAY-TRACING-PIPELINE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of RAY-TRACING-PIPELINE-CREATE-INFO-KHR.


See RAY-TRACING-PIPELINE-CREATE-INFO-KHR"
  (make-instance 'vk:ray-tracing-pipeline-create-info-khr 
                 :next next
                 :flags flags
                 :stages stages
                 :groups groups
                 :max-pipeline-ray-recursion-depth max-pipeline-ray-recursion-depth
                 :library-info library-info
                 :library-interface library-interface
                 :dynamic-state dynamic-state
                 :layout layout
                 :base-pipeline-handle base-pipeline-handle
                 :base-pipeline-index base-pipeline-index))

(defun make-geometry-triangles-nv (&key (next nil) (vertex-data nil)
                                   (vertex-offset 0) (vertex-count 0)
                                   (vertex-stride 0) (vertex-format nil)
                                   (index-data nil) (index-offset 0)
                                   (index-count 0) (index-type nil)
                                   (transform-data nil) (transform-offset 0))
"Creates an instance of GEOMETRY-TRIANGLES-NV.
The arguments of this function correspond to the slots of GEOMETRY-TRIANGLES-NV.


See GEOMETRY-TRIANGLES-NV"
  (make-instance 'vk:geometry-triangles-nv 
                 :next next
                 :vertex-data vertex-data
                 :vertex-offset vertex-offset
                 :vertex-count vertex-count
                 :vertex-stride vertex-stride
                 :vertex-format vertex-format
                 :index-data index-data
                 :index-offset index-offset
                 :index-count index-count
                 :index-type index-type
                 :transform-data transform-data
                 :transform-offset transform-offset))

(defun make-geometry-aabb-nv (&key (next nil) (aabb-data nil) (num-aabbs 0)
                              (stride 0) (offset 0))
"Creates an instance of GEOMETRY-AABB-NV.
The arguments of this function correspond to the slots of GEOMETRY-AABB-NV.


See GEOMETRY-AABB-NV"
  (make-instance 'vk:geometry-aabb-nv 
                 :next next
                 :aabb-data aabb-data
                 :num-aabbs num-aabbs
                 :stride stride
                 :offset offset))

(defun make-geometry-data-nv (&key (triangles (vk:make-geometry-triangles-nv))
                              (aabbs (vk:make-geometry-aabb-nv)))
"Creates an instance of GEOMETRY-DATA-NV.
The arguments of this function correspond to the slots of GEOMETRY-DATA-NV.


See GEOMETRY-DATA-NV"
  (make-instance 'vk:geometry-data-nv 
                 :triangles triangles
                 :aabbs aabbs))

(defun make-geometry-nv (&key (next nil) (geometry-type nil)
                         (geometry (vk:make-geometry-data-nv)) (flags nil))
"Creates an instance of GEOMETRY-NV.
The arguments of this function correspond to the slots of GEOMETRY-NV.


See GEOMETRY-NV"
  (make-instance 'vk:geometry-nv 
                 :next next
                 :geometry-type geometry-type
                 :geometry geometry
                 :flags flags))

(defun make-acceleration-structure-info-nv (&key (next nil) (type nil)
                                            (flags nil) (instance-count 0)
                                            (geometries nil))
"Creates an instance of ACCELERATION-STRUCTURE-INFO-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-INFO-NV.


See ACCELERATION-STRUCTURE-INFO-NV"
  (make-instance 'vk:acceleration-structure-info-nv 
                 :next next
                 :type type
                 :flags flags
                 :instance-count instance-count
                 :geometries geometries))

(defun make-acceleration-structure-create-info-nv (&key (next nil)
                                                   (compacted-size 0)
                                                   (info (vk:make-acceleration-structure-info-nv)))
"Creates an instance of ACCELERATION-STRUCTURE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-CREATE-INFO-NV.


See ACCELERATION-STRUCTURE-CREATE-INFO-NV"
  (make-instance 'vk:acceleration-structure-create-info-nv 
                 :next next
                 :compacted-size compacted-size
                 :info info))

(defun make-bind-acceleration-structure-memory-info-nv (&key (next nil)
                                                        (acceleration-structure nil)
                                                        (memory nil)
                                                        (memory-offset 0)
                                                        (device-indices nil))
"Creates an instance of BIND-ACCELERATION-STRUCTURE-MEMORY-INFO-NV.
The arguments of this function correspond to the slots of BIND-ACCELERATION-STRUCTURE-MEMORY-INFO-NV.


See BIND-ACCELERATION-STRUCTURE-MEMORY-INFO-NV"
  (make-instance 'vk:bind-acceleration-structure-memory-info-nv 
                 :next next
                 :acceleration-structure acceleration-structure
                 :memory memory
                 :memory-offset memory-offset
                 :device-indices device-indices))

(defun make-write-descriptor-set-acceleration-structure-khr (&key (next nil)
                                                             (acceleration-structures nil))
"Creates an instance of WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-KHR.
The arguments of this function correspond to the slots of WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-KHR.


See WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-KHR"
  (make-instance 'vk:write-descriptor-set-acceleration-structure-khr 
                 :next next
                 :acceleration-structures acceleration-structures))

(defun make-write-descriptor-set-acceleration-structure-nv (&key (next nil)
                                                            (acceleration-structures nil))
"Creates an instance of WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-NV.
The arguments of this function correspond to the slots of WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-NV.


See WRITE-DESCRIPTOR-SET-ACCELERATION-STRUCTURE-NV"
  (make-instance 'vk:write-descriptor-set-acceleration-structure-nv 
                 :next next
                 :acceleration-structures acceleration-structures))

(defun make-acceleration-structure-memory-requirements-info-nv (&key (next nil)
                                                                (type nil)
                                                                (acceleration-structure nil))
"Creates an instance of ACCELERATION-STRUCTURE-MEMORY-REQUIREMENTS-INFO-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-MEMORY-REQUIREMENTS-INFO-NV.


See ACCELERATION-STRUCTURE-MEMORY-REQUIREMENTS-INFO-NV"
  (make-instance 'vk:acceleration-structure-memory-requirements-info-nv 
                 :next next
                 :type type
                 :acceleration-structure acceleration-structure))

(defun make-physical-device-acceleration-structure-features-khr (&key
                                                                 (next nil)
                                                                 (acceleration-structure nil)
                                                                 (acceleration-structure-capture-replay nil)
                                                                 (acceleration-structure-indirect-build nil)
                                                                 (acceleration-structure-host-commands nil)
                                                                 (descriptor-binding-acceleration-structure-update-after-bind nil))
"Creates an instance of PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-FEATURES-KHR.


See PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-FEATURES-KHR"
  (make-instance 'vk:physical-device-acceleration-structure-features-khr 
                 :next next
                 :acceleration-structure acceleration-structure
                 :acceleration-structure-capture-replay acceleration-structure-capture-replay
                 :acceleration-structure-indirect-build acceleration-structure-indirect-build
                 :acceleration-structure-host-commands acceleration-structure-host-commands
                 :descriptor-binding-acceleration-structure-update-after-bind descriptor-binding-acceleration-structure-update-after-bind))

(defun make-physical-device-ray-tracing-pipeline-features-khr (&key (next nil)
                                                               (ray-tracing-pipeline nil)
                                                               (ray-tracing-pipeline-shader-group-handle-capture-replay nil)
                                                               (ray-tracing-pipeline-shader-group-handle-capture-replay-mixed nil)
                                                               (ray-tracing-pipeline-trace-rays-indirect nil)
                                                               (ray-traversal-primitive-culling nil))
"Creates an instance of PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-FEATURES-KHR.


See PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-FEATURES-KHR"
  (make-instance 'vk:physical-device-ray-tracing-pipeline-features-khr 
                 :next next
                 :ray-tracing-pipeline ray-tracing-pipeline
                 :ray-tracing-pipeline-shader-group-handle-capture-replay ray-tracing-pipeline-shader-group-handle-capture-replay
                 :ray-tracing-pipeline-shader-group-handle-capture-replay-mixed ray-tracing-pipeline-shader-group-handle-capture-replay-mixed
                 :ray-tracing-pipeline-trace-rays-indirect ray-tracing-pipeline-trace-rays-indirect
                 :ray-traversal-primitive-culling ray-traversal-primitive-culling))

(defun make-physical-device-ray-query-features-khr (&key (next nil)
                                                    (ray-query nil))
"Creates an instance of PHYSICAL-DEVICE-RAY-QUERY-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-RAY-QUERY-FEATURES-KHR.


See PHYSICAL-DEVICE-RAY-QUERY-FEATURES-KHR"
  (make-instance 'vk:physical-device-ray-query-features-khr 
                 :next next
                 :ray-query ray-query))

(defun make-physical-device-acceleration-structure-properties-khr (&key
                                                                   (next nil)
                                                                   (max-geometry-count 0)
                                                                   (max-instance-count 0)
                                                                   (max-primitive-count 0)
                                                                   (max-per-stage-descriptor-acceleration-structures 0)
                                                                   (max-per-stage-descriptor-update-after-bind-acceleration-structures 0)
                                                                   (max-descriptor-set-acceleration-structures 0)
                                                                   (max-descriptor-set-update-after-bind-acceleration-structures 0)
                                                                   (min-acceleration-structure-scratch-offset-alignment 0))
"Creates an instance of PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-PROPERTIES-KHR.


See PHYSICAL-DEVICE-ACCELERATION-STRUCTURE-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-acceleration-structure-properties-khr 
                 :next next
                 :max-geometry-count max-geometry-count
                 :max-instance-count max-instance-count
                 :max-primitive-count max-primitive-count
                 :max-per-stage-descriptor-acceleration-structures max-per-stage-descriptor-acceleration-structures
                 :max-per-stage-descriptor-update-after-bind-acceleration-structures max-per-stage-descriptor-update-after-bind-acceleration-structures
                 :max-descriptor-set-acceleration-structures max-descriptor-set-acceleration-structures
                 :max-descriptor-set-update-after-bind-acceleration-structures max-descriptor-set-update-after-bind-acceleration-structures
                 :min-acceleration-structure-scratch-offset-alignment min-acceleration-structure-scratch-offset-alignment))

(defun make-physical-device-ray-tracing-pipeline-properties-khr (&key
                                                                 (next nil)
                                                                 (shader-group-handle-size 0)
                                                                 (max-ray-recursion-depth 0)
                                                                 (max-shader-group-stride 0)
                                                                 (shader-group-base-alignment 0)
                                                                 (shader-group-handle-capture-replay-size 0)
                                                                 (max-ray-dispatch-invocation-count 0)
                                                                 (shader-group-handle-alignment 0)
                                                                 (max-ray-hit-attribute-size 0))
"Creates an instance of PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-PROPERTIES-KHR.


See PHYSICAL-DEVICE-RAY-TRACING-PIPELINE-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-ray-tracing-pipeline-properties-khr 
                 :next next
                 :shader-group-handle-size shader-group-handle-size
                 :max-ray-recursion-depth max-ray-recursion-depth
                 :max-shader-group-stride max-shader-group-stride
                 :shader-group-base-alignment shader-group-base-alignment
                 :shader-group-handle-capture-replay-size shader-group-handle-capture-replay-size
                 :max-ray-dispatch-invocation-count max-ray-dispatch-invocation-count
                 :shader-group-handle-alignment shader-group-handle-alignment
                 :max-ray-hit-attribute-size max-ray-hit-attribute-size))

(defun make-physical-device-ray-tracing-properties-nv (&key (next nil)
                                                       (shader-group-handle-size 0)
                                                       (max-recursion-depth 0)
                                                       (max-shader-group-stride 0)
                                                       (shader-group-base-alignment 0)
                                                       (max-geometry-count 0)
                                                       (max-instance-count 0)
                                                       (max-triangle-count 0)
                                                       (max-descriptor-set-acceleration-structures 0))
"Creates an instance of PHYSICAL-DEVICE-RAY-TRACING-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-RAY-TRACING-PROPERTIES-NV.


See PHYSICAL-DEVICE-RAY-TRACING-PROPERTIES-NV"
  (make-instance 'vk:physical-device-ray-tracing-properties-nv 
                 :next next
                 :shader-group-handle-size shader-group-handle-size
                 :max-recursion-depth max-recursion-depth
                 :max-shader-group-stride max-shader-group-stride
                 :shader-group-base-alignment shader-group-base-alignment
                 :max-geometry-count max-geometry-count
                 :max-instance-count max-instance-count
                 :max-triangle-count max-triangle-count
                 :max-descriptor-set-acceleration-structures max-descriptor-set-acceleration-structures))

(defun make-strided-device-address-region-khr (&key (device-address 0)
                                               (stride 0) (size 0))
"Creates an instance of STRIDED-DEVICE-ADDRESS-REGION-KHR.
The arguments of this function correspond to the slots of STRIDED-DEVICE-ADDRESS-REGION-KHR.


See STRIDED-DEVICE-ADDRESS-REGION-KHR"
  (make-instance 'vk:strided-device-address-region-khr 
                 :device-address device-address
                 :stride stride
                 :size size))

(defun make-trace-rays-indirect-command-khr (&key (width 0) (height 0)
                                             (depth 0))
"Creates an instance of TRACE-RAYS-INDIRECT-COMMAND-KHR.
The arguments of this function correspond to the slots of TRACE-RAYS-INDIRECT-COMMAND-KHR.


See TRACE-RAYS-INDIRECT-COMMAND-KHR"
  (make-instance 'vk:trace-rays-indirect-command-khr 
                 :width width
                 :height height
                 :depth depth))

(defun make-drm-format-modifier-properties-list-ext (&key (next nil)
                                                     (drm-format-modifier-properties nil))
"Creates an instance of DRM-FORMAT-MODIFIER-PROPERTIES-LIST-EXT.
The arguments of this function correspond to the slots of DRM-FORMAT-MODIFIER-PROPERTIES-LIST-EXT.


See DRM-FORMAT-MODIFIER-PROPERTIES-LIST-EXT"
  (make-instance 'vk:drm-format-modifier-properties-list-ext 
                 :next next
                 :drm-format-modifier-properties drm-format-modifier-properties))

(defun make-drm-format-modifier-properties-ext (&key (drm-format-modifier 0)
                                                (drm-format-modifier-plane-count 0)
                                                (drm-format-modifier-tiling-features nil))
"Creates an instance of DRM-FORMAT-MODIFIER-PROPERTIES-EXT.
The arguments of this function correspond to the slots of DRM-FORMAT-MODIFIER-PROPERTIES-EXT.


See DRM-FORMAT-MODIFIER-PROPERTIES-EXT"
  (make-instance 'vk:drm-format-modifier-properties-ext 
                 :drm-format-modifier drm-format-modifier
                 :drm-format-modifier-plane-count drm-format-modifier-plane-count
                 :drm-format-modifier-tiling-features drm-format-modifier-tiling-features))

(defun make-physical-device-image-drm-format-modifier-info-ext (&key (next nil)
                                                                (drm-format-modifier 0)
                                                                (sharing-mode nil)
                                                                (queue-family-indices nil))
"Creates an instance of PHYSICAL-DEVICE-IMAGE-DRM-FORMAT-MODIFIER-INFO-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-IMAGE-DRM-FORMAT-MODIFIER-INFO-EXT.


See PHYSICAL-DEVICE-IMAGE-DRM-FORMAT-MODIFIER-INFO-EXT"
  (make-instance 'vk:physical-device-image-drm-format-modifier-info-ext 
                 :next next
                 :drm-format-modifier drm-format-modifier
                 :sharing-mode sharing-mode
                 :queue-family-indices queue-family-indices))

(defun make-image-drm-format-modifier-list-create-info-ext (&key (next nil)
                                                            (drm-format-modifiers nil))
"Creates an instance of IMAGE-DRM-FORMAT-MODIFIER-LIST-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of IMAGE-DRM-FORMAT-MODIFIER-LIST-CREATE-INFO-EXT.


See IMAGE-DRM-FORMAT-MODIFIER-LIST-CREATE-INFO-EXT"
  (make-instance 'vk:image-drm-format-modifier-list-create-info-ext 
                 :next next
                 :drm-format-modifiers drm-format-modifiers))

(defun make-image-drm-format-modifier-explicit-create-info-ext (&key (next nil)
                                                                (drm-format-modifier 0)
                                                                (plane-layouts nil))
"Creates an instance of IMAGE-DRM-FORMAT-MODIFIER-EXPLICIT-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of IMAGE-DRM-FORMAT-MODIFIER-EXPLICIT-CREATE-INFO-EXT.


See IMAGE-DRM-FORMAT-MODIFIER-EXPLICIT-CREATE-INFO-EXT"
  (make-instance 'vk:image-drm-format-modifier-explicit-create-info-ext 
                 :next next
                 :drm-format-modifier drm-format-modifier
                 :plane-layouts plane-layouts))

(defun make-image-drm-format-modifier-properties-ext (&key (next nil)
                                                      (drm-format-modifier 0))
"Creates an instance of IMAGE-DRM-FORMAT-MODIFIER-PROPERTIES-EXT.
The arguments of this function correspond to the slots of IMAGE-DRM-FORMAT-MODIFIER-PROPERTIES-EXT.


See IMAGE-DRM-FORMAT-MODIFIER-PROPERTIES-EXT"
  (make-instance 'vk:image-drm-format-modifier-properties-ext 
                 :next next
                 :drm-format-modifier drm-format-modifier))

(defun make-image-stencil-usage-create-info (&key (next nil)
                                             (stencil-usage nil))
"Creates an instance of IMAGE-STENCIL-USAGE-CREATE-INFO.
The arguments of this function correspond to the slots of IMAGE-STENCIL-USAGE-CREATE-INFO.


See IMAGE-STENCIL-USAGE-CREATE-INFO"
  (make-instance 'vk:image-stencil-usage-create-info 
                 :next next
                 :stencil-usage stencil-usage))

(defun make-device-memory-overallocation-create-info-amd (&key (next nil)
                                                          (overallocation-behavior nil))
"Creates an instance of DEVICE-MEMORY-OVERALLOCATION-CREATE-INFO-AMD.
The arguments of this function correspond to the slots of DEVICE-MEMORY-OVERALLOCATION-CREATE-INFO-AMD.


See DEVICE-MEMORY-OVERALLOCATION-CREATE-INFO-AMD"
  (make-instance 'vk:device-memory-overallocation-create-info-amd 
                 :next next
                 :overallocation-behavior overallocation-behavior))

(defun make-physical-device-fragment-density-map-features-ext (&key (next nil)
                                                               (fragment-density-map nil)
                                                               (fragment-density-map-dynamic nil)
                                                               (fragment-density-map-non-subsampled-images nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-FEATURES-EXT.


See PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-FEATURES-EXT"
  (make-instance 'vk:physical-device-fragment-density-map-features-ext 
                 :next next
                 :fragment-density-map fragment-density-map
                 :fragment-density-map-dynamic fragment-density-map-dynamic
                 :fragment-density-map-non-subsampled-images fragment-density-map-non-subsampled-images))

(defun make-physical-device-fragment-density-map-2-features-ext (&key
                                                                 (next nil)
                                                                 (fragment-density-map-deferred nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-FEATURES-EXT.


See PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-FEATURES-EXT"
  (make-instance 'vk:physical-device-fragment-density-map-2-features-ext 
                 :next next
                 :fragment-density-map-deferred fragment-density-map-deferred))

(defun make-physical-device-fragment-density-map-properties-ext (&key
                                                                 (next nil)
                                                                 (min-fragment-density-texel-size (vk:make-extent-2d))
                                                                 (max-fragment-density-texel-size (vk:make-extent-2d))
                                                                 (fragment-density-invocations nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-PROPERTIES-EXT.


See PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-fragment-density-map-properties-ext 
                 :next next
                 :min-fragment-density-texel-size min-fragment-density-texel-size
                 :max-fragment-density-texel-size max-fragment-density-texel-size
                 :fragment-density-invocations fragment-density-invocations))

(defun make-physical-device-fragment-density-map-2-properties-ext (&key
                                                                   (next nil)
                                                                   (subsampled-loads nil)
                                                                   (subsampled-coarse-reconstruction-early-access nil)
                                                                   (max-subsampled-array-layers 0)
                                                                   (max-descriptor-set-subsampled-samplers 0))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-PROPERTIES-EXT.


See PHYSICAL-DEVICE-FRAGMENT-DENSITY-MAP-2-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-fragment-density-map-2-properties-ext 
                 :next next
                 :subsampled-loads subsampled-loads
                 :subsampled-coarse-reconstruction-early-access subsampled-coarse-reconstruction-early-access
                 :max-subsampled-array-layers max-subsampled-array-layers
                 :max-descriptor-set-subsampled-samplers max-descriptor-set-subsampled-samplers))

(defun make-render-pass-fragment-density-map-create-info-ext (&key (next nil)
                                                              (fragment-density-map-attachment (vk:make-attachment-reference)))
"Creates an instance of RENDER-PASS-FRAGMENT-DENSITY-MAP-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of RENDER-PASS-FRAGMENT-DENSITY-MAP-CREATE-INFO-EXT.


See RENDER-PASS-FRAGMENT-DENSITY-MAP-CREATE-INFO-EXT"
  (make-instance 'vk:render-pass-fragment-density-map-create-info-ext 
                 :next next
                 :fragment-density-map-attachment fragment-density-map-attachment))

(defun make-physical-device-scalar-block-layout-features (&key (next nil)
                                                          (scalar-block-layout nil))
"Creates an instance of PHYSICAL-DEVICE-SCALAR-BLOCK-LAYOUT-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SCALAR-BLOCK-LAYOUT-FEATURES.


See PHYSICAL-DEVICE-SCALAR-BLOCK-LAYOUT-FEATURES"
  (make-instance 'vk:physical-device-scalar-block-layout-features 
                 :next next
                 :scalar-block-layout scalar-block-layout))

(defun make-surface-protected-capabilities-khr (&key (next nil)
                                                (supports-protected nil))
"Creates an instance of SURFACE-PROTECTED-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of SURFACE-PROTECTED-CAPABILITIES-KHR.


See SURFACE-PROTECTED-CAPABILITIES-KHR"
  (make-instance 'vk:surface-protected-capabilities-khr 
                 :next next
                 :supports-protected supports-protected))

(defun make-physical-device-uniform-buffer-standard-layout-features (&key
                                                                     (next nil)
                                                                     (uniform-buffer-standard-layout nil))
"Creates an instance of PHYSICAL-DEVICE-UNIFORM-BUFFER-STANDARD-LAYOUT-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-UNIFORM-BUFFER-STANDARD-LAYOUT-FEATURES.


See PHYSICAL-DEVICE-UNIFORM-BUFFER-STANDARD-LAYOUT-FEATURES"
  (make-instance 'vk:physical-device-uniform-buffer-standard-layout-features 
                 :next next
                 :uniform-buffer-standard-layout uniform-buffer-standard-layout))

(defun make-physical-device-depth-clip-enable-features-ext (&key (next nil)
                                                            (depth-clip-enable nil))
"Creates an instance of PHYSICAL-DEVICE-DEPTH-CLIP-ENABLE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DEPTH-CLIP-ENABLE-FEATURES-EXT.


See PHYSICAL-DEVICE-DEPTH-CLIP-ENABLE-FEATURES-EXT"
  (make-instance 'vk:physical-device-depth-clip-enable-features-ext 
                 :next next
                 :depth-clip-enable depth-clip-enable))

(defun make-pipeline-rasterization-depth-clip-state-create-info-ext (&key
                                                                     (next nil)
                                                                     (flags nil)
                                                                     (depth-clip-enable nil))
"Creates an instance of PIPELINE-RASTERIZATION-DEPTH-CLIP-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-DEPTH-CLIP-STATE-CREATE-INFO-EXT.


See PIPELINE-RASTERIZATION-DEPTH-CLIP-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-rasterization-depth-clip-state-create-info-ext 
                 :next next
                 :flags flags
                 :depth-clip-enable depth-clip-enable))

(defun make-physical-device-memory-budget-properties-ext (&key (next nil)
                                                          (heap-budget 0)
                                                          (heap-usage 0))
"Creates an instance of PHYSICAL-DEVICE-MEMORY-BUDGET-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MEMORY-BUDGET-PROPERTIES-EXT.


See PHYSICAL-DEVICE-MEMORY-BUDGET-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-memory-budget-properties-ext 
                 :next next
                 :heap-budget heap-budget
                 :heap-usage heap-usage))

(defun make-physical-device-memory-priority-features-ext (&key (next nil)
                                                          (memory-priority nil))
"Creates an instance of PHYSICAL-DEVICE-MEMORY-PRIORITY-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MEMORY-PRIORITY-FEATURES-EXT.


See PHYSICAL-DEVICE-MEMORY-PRIORITY-FEATURES-EXT"
  (make-instance 'vk:physical-device-memory-priority-features-ext 
                 :next next
                 :memory-priority memory-priority))

(defun make-memory-priority-allocate-info-ext (&key (next nil) (priority 0.0))
"Creates an instance of MEMORY-PRIORITY-ALLOCATE-INFO-EXT.
The arguments of this function correspond to the slots of MEMORY-PRIORITY-ALLOCATE-INFO-EXT.


See MEMORY-PRIORITY-ALLOCATE-INFO-EXT"
  (make-instance 'vk:memory-priority-allocate-info-ext 
                 :next next
                 :priority priority))

(defun make-physical-device-pageable-device-local-memory-features-ext (&key
                                                                       (next nil)
                                                                       (pageable-device-local-memory nil))
"Creates an instance of PHYSICAL-DEVICE-PAGEABLE-DEVICE-LOCAL-MEMORY-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PAGEABLE-DEVICE-LOCAL-MEMORY-FEATURES-EXT.


See PHYSICAL-DEVICE-PAGEABLE-DEVICE-LOCAL-MEMORY-FEATURES-EXT"
  (make-instance 'vk:physical-device-pageable-device-local-memory-features-ext 
                 :next next
                 :pageable-device-local-memory pageable-device-local-memory))

(defun make-physical-device-buffer-device-address-features (&key (next nil)
                                                            (buffer-device-address nil)
                                                            (buffer-device-address-capture-replay nil)
                                                            (buffer-device-address-multi-device nil))
"Creates an instance of PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES.


See PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES"
  (make-instance 'vk:physical-device-buffer-device-address-features 
                 :next next
                 :buffer-device-address buffer-device-address
                 :buffer-device-address-capture-replay buffer-device-address-capture-replay
                 :buffer-device-address-multi-device buffer-device-address-multi-device))

(defun make-physical-device-buffer-device-address-features-ext (&key (next nil)
                                                                (buffer-device-address nil)
                                                                (buffer-device-address-capture-replay nil)
                                                                (buffer-device-address-multi-device nil))
"Creates an instance of PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES-EXT.


See PHYSICAL-DEVICE-BUFFER-DEVICE-ADDRESS-FEATURES-EXT"
  (make-instance 'vk:physical-device-buffer-device-address-features-ext 
                 :next next
                 :buffer-device-address buffer-device-address
                 :buffer-device-address-capture-replay buffer-device-address-capture-replay
                 :buffer-device-address-multi-device buffer-device-address-multi-device))

(defun make-buffer-device-address-info (&key (next nil) (buffer nil))
"Creates an instance of BUFFER-DEVICE-ADDRESS-INFO.
The arguments of this function correspond to the slots of BUFFER-DEVICE-ADDRESS-INFO.


See BUFFER-DEVICE-ADDRESS-INFO"
  (make-instance 'vk:buffer-device-address-info 
                 :next next
                 :buffer buffer))

(defun make-buffer-opaque-capture-address-create-info (&key (next nil)
                                                       (opaque-capture-address 0))
"Creates an instance of BUFFER-OPAQUE-CAPTURE-ADDRESS-CREATE-INFO.
The arguments of this function correspond to the slots of BUFFER-OPAQUE-CAPTURE-ADDRESS-CREATE-INFO.


See BUFFER-OPAQUE-CAPTURE-ADDRESS-CREATE-INFO"
  (make-instance 'vk:buffer-opaque-capture-address-create-info 
                 :next next
                 :opaque-capture-address opaque-capture-address))

(defun make-buffer-device-address-create-info-ext (&key (next nil)
                                                   (device-address 0))
"Creates an instance of BUFFER-DEVICE-ADDRESS-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of BUFFER-DEVICE-ADDRESS-CREATE-INFO-EXT.


See BUFFER-DEVICE-ADDRESS-CREATE-INFO-EXT"
  (make-instance 'vk:buffer-device-address-create-info-ext 
                 :next next
                 :device-address device-address))

(defun make-physical-device-image-view-image-format-info-ext (&key (next nil)
                                                              (image-view-type nil))
"Creates an instance of PHYSICAL-DEVICE-IMAGE-VIEW-IMAGE-FORMAT-INFO-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-IMAGE-VIEW-IMAGE-FORMAT-INFO-EXT.


See PHYSICAL-DEVICE-IMAGE-VIEW-IMAGE-FORMAT-INFO-EXT"
  (make-instance 'vk:physical-device-image-view-image-format-info-ext 
                 :next next
                 :image-view-type image-view-type))

(defun make-filter-cubic-image-view-image-format-properties-ext (&key
                                                                 (next nil)
                                                                 (filter-cubic nil)
                                                                 (filter-cubic-minmax nil))
"Creates an instance of FILTER-CUBIC-IMAGE-VIEW-IMAGE-FORMAT-PROPERTIES-EXT.
The arguments of this function correspond to the slots of FILTER-CUBIC-IMAGE-VIEW-IMAGE-FORMAT-PROPERTIES-EXT.


See FILTER-CUBIC-IMAGE-VIEW-IMAGE-FORMAT-PROPERTIES-EXT"
  (make-instance 'vk:filter-cubic-image-view-image-format-properties-ext 
                 :next next
                 :filter-cubic filter-cubic
                 :filter-cubic-minmax filter-cubic-minmax))

(defun make-physical-device-imageless-framebuffer-features (&key (next nil)
                                                            (imageless-framebuffer nil))
"Creates an instance of PHYSICAL-DEVICE-IMAGELESS-FRAMEBUFFER-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-IMAGELESS-FRAMEBUFFER-FEATURES.


See PHYSICAL-DEVICE-IMAGELESS-FRAMEBUFFER-FEATURES"
  (make-instance 'vk:physical-device-imageless-framebuffer-features 
                 :next next
                 :imageless-framebuffer imageless-framebuffer))

(defun make-framebuffer-attachments-create-info (&key (next nil)
                                                 (attachment-image-infos nil))
"Creates an instance of FRAMEBUFFER-ATTACHMENTS-CREATE-INFO.
The arguments of this function correspond to the slots of FRAMEBUFFER-ATTACHMENTS-CREATE-INFO.


See FRAMEBUFFER-ATTACHMENTS-CREATE-INFO"
  (make-instance 'vk:framebuffer-attachments-create-info 
                 :next next
                 :attachment-image-infos attachment-image-infos))

(defun make-framebuffer-attachment-image-info (&key (next nil) (flags nil)
                                               (usage nil) (width 0) (height 0)
                                               (layer-count 0)
                                               (view-formats nil))
"Creates an instance of FRAMEBUFFER-ATTACHMENT-IMAGE-INFO.
The arguments of this function correspond to the slots of FRAMEBUFFER-ATTACHMENT-IMAGE-INFO.


See FRAMEBUFFER-ATTACHMENT-IMAGE-INFO"
  (make-instance 'vk:framebuffer-attachment-image-info 
                 :next next
                 :flags flags
                 :usage usage
                 :width width
                 :height height
                 :layer-count layer-count
                 :view-formats view-formats))

(defun make-render-pass-attachment-begin-info (&key (next nil)
                                               (attachments nil))
"Creates an instance of RENDER-PASS-ATTACHMENT-BEGIN-INFO.
The arguments of this function correspond to the slots of RENDER-PASS-ATTACHMENT-BEGIN-INFO.


See RENDER-PASS-ATTACHMENT-BEGIN-INFO"
  (make-instance 'vk:render-pass-attachment-begin-info 
                 :next next
                 :attachments attachments))

(defun make-physical-device-texture-compression-astc-h-d-r-features-ext (&key
                                                                         (next nil)
                                                                         (texture-compression-astc_-h-d-r nil))
"Creates an instance of PHYSICAL-DEVICE-TEXTURE-COMPRESSION-ASTC-H-D-R-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TEXTURE-COMPRESSION-ASTC-H-D-R-FEATURES-EXT.


See PHYSICAL-DEVICE-TEXTURE-COMPRESSION-ASTC-H-D-R-FEATURES-EXT"
  (make-instance 'vk:physical-device-texture-compression-astc-h-d-r-features-ext 
                 :next next
                 :texture-compression-astc_-h-d-r texture-compression-astc_-h-d-r))

(defun make-physical-device-cooperative-matrix-features-nv (&key (next nil)
                                                            (cooperative-matrix nil)
                                                            (cooperative-matrix-robust-buffer-access nil))
"Creates an instance of PHYSICAL-DEVICE-COOPERATIVE-MATRIX-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COOPERATIVE-MATRIX-FEATURES-NV.


See PHYSICAL-DEVICE-COOPERATIVE-MATRIX-FEATURES-NV"
  (make-instance 'vk:physical-device-cooperative-matrix-features-nv 
                 :next next
                 :cooperative-matrix cooperative-matrix
                 :cooperative-matrix-robust-buffer-access cooperative-matrix-robust-buffer-access))

(defun make-physical-device-cooperative-matrix-properties-nv (&key (next nil)
                                                              (cooperative-matrix-supported-stages nil))
"Creates an instance of PHYSICAL-DEVICE-COOPERATIVE-MATRIX-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COOPERATIVE-MATRIX-PROPERTIES-NV.


See PHYSICAL-DEVICE-COOPERATIVE-MATRIX-PROPERTIES-NV"
  (make-instance 'vk:physical-device-cooperative-matrix-properties-nv 
                 :next next
                 :cooperative-matrix-supported-stages cooperative-matrix-supported-stages))

(defun make-cooperative-matrix-properties-nv (&key (next nil) (m-size 0)
                                              (n-size 0) (k-size 0)
                                              (a-type nil) (b-type nil)
                                              (c-type nil) (d-type nil)
                                              (scope nil))
"Creates an instance of COOPERATIVE-MATRIX-PROPERTIES-NV.
The arguments of this function correspond to the slots of COOPERATIVE-MATRIX-PROPERTIES-NV.


See COOPERATIVE-MATRIX-PROPERTIES-NV"
  (make-instance 'vk:cooperative-matrix-properties-nv 
                 :next next
                 :m-size m-size
                 :n-size n-size
                 :k-size k-size
                 :a-type a-type
                 :b-type b-type
                 :c-type c-type
                 :d-type d-type
                 :scope scope))

(defun make-physical-device-ycbcr-image-arrays-features-ext (&key (next nil)
                                                             (ycbcr-image-arrays nil))
"Creates an instance of PHYSICAL-DEVICE-YCBCR-IMAGE-ARRAYS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-YCBCR-IMAGE-ARRAYS-FEATURES-EXT.


See PHYSICAL-DEVICE-YCBCR-IMAGE-ARRAYS-FEATURES-EXT"
  (make-instance 'vk:physical-device-ycbcr-image-arrays-features-ext 
                 :next next
                 :ycbcr-image-arrays ycbcr-image-arrays))

(defun make-image-view-handle-info-nvx (&key (next nil) (image-view nil)
                                        (descriptor-type nil) (sampler nil))
"Creates an instance of IMAGE-VIEW-HANDLE-INFO-NVX.
The arguments of this function correspond to the slots of IMAGE-VIEW-HANDLE-INFO-NVX.


See IMAGE-VIEW-HANDLE-INFO-NVX"
  (make-instance 'vk:image-view-handle-info-nvx 
                 :next next
                 :image-view image-view
                 :descriptor-type descriptor-type
                 :sampler sampler))

(defun make-image-view-address-properties-nvx (&key (next nil)
                                               (device-address 0) (size 0))
"Creates an instance of IMAGE-VIEW-ADDRESS-PROPERTIES-NVX.
The arguments of this function correspond to the slots of IMAGE-VIEW-ADDRESS-PROPERTIES-NVX.


See IMAGE-VIEW-ADDRESS-PROPERTIES-NVX"
  (make-instance 'vk:image-view-address-properties-nvx 
                 :next next
                 :device-address device-address
                 :size size))

(defun make-present-frame-token-ggp (&key (next nil) (frame-token nil))
"Creates an instance of PRESENT-FRAME-TOKEN-GGP.
The arguments of this function correspond to the slots of PRESENT-FRAME-TOKEN-GGP.


See PRESENT-FRAME-TOKEN-GGP"
  (make-instance 'vk:present-frame-token-ggp 
                 :next next
                 :frame-token frame-token))

(defun make-pipeline-creation-feedback-ext (&key (flags nil) (duration 0))
"Creates an instance of PIPELINE-CREATION-FEEDBACK-EXT.
The arguments of this function correspond to the slots of PIPELINE-CREATION-FEEDBACK-EXT.


See PIPELINE-CREATION-FEEDBACK-EXT"
  (make-instance 'vk:pipeline-creation-feedback-ext 
                 :flags flags
                 :duration duration))

(defun make-pipeline-creation-feedback-create-info-ext (&key (next nil)
                                                        (pipeline-creation-feedback nil)
                                                        (pipeline-stage-creation-feedbacks nil))
"Creates an instance of PIPELINE-CREATION-FEEDBACK-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-CREATION-FEEDBACK-CREATE-INFO-EXT.


See PIPELINE-CREATION-FEEDBACK-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-creation-feedback-create-info-ext 
                 :next next
                 :pipeline-creation-feedback pipeline-creation-feedback
                 :pipeline-stage-creation-feedbacks pipeline-stage-creation-feedbacks))

(defun make-surface-full-screen-exclusive-info-ext (&key (next nil)
                                                    (full-screen-exclusive nil))
"Creates an instance of SURFACE-FULL-SCREEN-EXCLUSIVE-INFO-EXT.
The arguments of this function correspond to the slots of SURFACE-FULL-SCREEN-EXCLUSIVE-INFO-EXT.


See SURFACE-FULL-SCREEN-EXCLUSIVE-INFO-EXT"
  (make-instance 'vk:surface-full-screen-exclusive-info-ext 
                 :next next
                 :full-screen-exclusive full-screen-exclusive))

(defun make-surface-full-screen-exclusive-win32-info-ext (&key (next nil)
                                                          (hmonitor nil))
"Creates an instance of SURFACE-FULL-SCREEN-EXCLUSIVE-WIN32-INFO-EXT.
The arguments of this function correspond to the slots of SURFACE-FULL-SCREEN-EXCLUSIVE-WIN32-INFO-EXT.


See SURFACE-FULL-SCREEN-EXCLUSIVE-WIN32-INFO-EXT"
  (make-instance 'vk:surface-full-screen-exclusive-win32-info-ext 
                 :next next
                 :hmonitor hmonitor))

(defun make-surface-capabilities-full-screen-exclusive-ext (&key (next nil)
                                                            (full-screen-exclusive-supported nil))
"Creates an instance of SURFACE-CAPABILITIES-FULL-SCREEN-EXCLUSIVE-EXT.
The arguments of this function correspond to the slots of SURFACE-CAPABILITIES-FULL-SCREEN-EXCLUSIVE-EXT.


See SURFACE-CAPABILITIES-FULL-SCREEN-EXCLUSIVE-EXT"
  (make-instance 'vk:surface-capabilities-full-screen-exclusive-ext 
                 :next next
                 :full-screen-exclusive-supported full-screen-exclusive-supported))

(defun make-physical-device-performance-query-features-khr (&key (next nil)
                                                            (performance-counter-query-pools nil)
                                                            (performance-counter-multiple-query-pools nil))
"Creates an instance of PHYSICAL-DEVICE-PERFORMANCE-QUERY-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PERFORMANCE-QUERY-FEATURES-KHR.


See PHYSICAL-DEVICE-PERFORMANCE-QUERY-FEATURES-KHR"
  (make-instance 'vk:physical-device-performance-query-features-khr 
                 :next next
                 :performance-counter-query-pools performance-counter-query-pools
                 :performance-counter-multiple-query-pools performance-counter-multiple-query-pools))

(defun make-physical-device-performance-query-properties-khr (&key (next nil)
                                                              (allow-command-buffer-query-copies nil))
"Creates an instance of PHYSICAL-DEVICE-PERFORMANCE-QUERY-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PERFORMANCE-QUERY-PROPERTIES-KHR.


See PHYSICAL-DEVICE-PERFORMANCE-QUERY-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-performance-query-properties-khr 
                 :next next
                 :allow-command-buffer-query-copies allow-command-buffer-query-copies))

(defun make-performance-counter-khr (&key (next nil) (unit nil) (scope nil)
                                     (storage nil) (uuid 0))
"Creates an instance of PERFORMANCE-COUNTER-KHR.
The arguments of this function correspond to the slots of PERFORMANCE-COUNTER-KHR.


See PERFORMANCE-COUNTER-KHR"
  (make-instance 'vk:performance-counter-khr 
                 :next next
                 :unit unit
                 :scope scope
                 :storage storage
                 :uuid uuid))

(defun make-performance-counter-description-khr (&key (next nil) (flags nil)
                                                 (name "") (category "")
                                                 (description ""))
"Creates an instance of PERFORMANCE-COUNTER-DESCRIPTION-KHR.
The arguments of this function correspond to the slots of PERFORMANCE-COUNTER-DESCRIPTION-KHR.


See PERFORMANCE-COUNTER-DESCRIPTION-KHR"
  (make-instance 'vk:performance-counter-description-khr 
                 :next next
                 :flags flags
                 :name name
                 :category category
                 :description description))

(defun make-query-pool-performance-create-info-khr (&key (next nil)
                                                    (queue-family-index 0)
                                                    (counter-indices nil))
"Creates an instance of QUERY-POOL-PERFORMANCE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of QUERY-POOL-PERFORMANCE-CREATE-INFO-KHR.


See QUERY-POOL-PERFORMANCE-CREATE-INFO-KHR"
  (make-instance 'vk:query-pool-performance-create-info-khr 
                 :next next
                 :queue-family-index queue-family-index
                 :counter-indices counter-indices))

(defun make-performance-counter-result-khr (&key (int-32 nil) (int-64 nil)
                                            (uint-32 nil) (uint-64 nil)
                                            (float-32 nil) (float-64 nil))
"Creates an instance of PERFORMANCE-COUNTER-RESULT-KHR.
The arguments of this function correspond to the slots of PERFORMANCE-COUNTER-RESULT-KHR.

Since PERFORMANCE-COUNTER-RESULT-KHR represents a union, exactly one argument must be supplied.

See PERFORMANCE-COUNTER-RESULT-KHR"
  (assert (= 1 (count-if #'identity (list int-32 int-64 uint-32 uint-64 float-32 float-64)))
          (int-32 int-64 uint-32 uint-64 float-32 float-64)
          "Exactly one argument must be non-nil.")
  (cond 
    (int-32
     (make-instance 'vk:performance-counter-result-khr :int-32 int-32))
    (int-64
     (make-instance 'vk:performance-counter-result-khr :int-64 int-64))
    (uint-32
     (make-instance 'vk:performance-counter-result-khr :uint-32 uint-32))
    (uint-64
     (make-instance 'vk:performance-counter-result-khr :uint-64 uint-64))
    (float-32
     (make-instance 'vk:performance-counter-result-khr :float-32 float-32))
    (float-64
     (make-instance 'vk:performance-counter-result-khr :float-64 float-64))))

(defun make-acquire-profiling-lock-info-khr (&key (next nil) (flags nil)
                                             (timeout 0))
"Creates an instance of ACQUIRE-PROFILING-LOCK-INFO-KHR.
The arguments of this function correspond to the slots of ACQUIRE-PROFILING-LOCK-INFO-KHR.


See ACQUIRE-PROFILING-LOCK-INFO-KHR"
  (make-instance 'vk:acquire-profiling-lock-info-khr 
                 :next next
                 :flags flags
                 :timeout timeout))

(defun make-performance-query-submit-info-khr (&key (next nil)
                                               (counter-pass-index 0))
"Creates an instance of PERFORMANCE-QUERY-SUBMIT-INFO-KHR.
The arguments of this function correspond to the slots of PERFORMANCE-QUERY-SUBMIT-INFO-KHR.


See PERFORMANCE-QUERY-SUBMIT-INFO-KHR"
  (make-instance 'vk:performance-query-submit-info-khr 
                 :next next
                 :counter-pass-index counter-pass-index))

(defun make-headless-surface-create-info-ext (&key (next nil) (flags nil))
"Creates an instance of HEADLESS-SURFACE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of HEADLESS-SURFACE-CREATE-INFO-EXT.


See HEADLESS-SURFACE-CREATE-INFO-EXT"
  (make-instance 'vk:headless-surface-create-info-ext 
                 :next next
                 :flags flags))

(defun make-physical-device-coverage-reduction-mode-features-nv (&key
                                                                 (next nil)
                                                                 (coverage-reduction-mode nil))
"Creates an instance of PHYSICAL-DEVICE-COVERAGE-REDUCTION-MODE-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COVERAGE-REDUCTION-MODE-FEATURES-NV.


See PHYSICAL-DEVICE-COVERAGE-REDUCTION-MODE-FEATURES-NV"
  (make-instance 'vk:physical-device-coverage-reduction-mode-features-nv 
                 :next next
                 :coverage-reduction-mode coverage-reduction-mode))

(defun make-pipeline-coverage-reduction-state-create-info-nv (&key (next nil)
                                                              (flags nil)
                                                              (coverage-reduction-mode nil))
"Creates an instance of PIPELINE-COVERAGE-REDUCTION-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-COVERAGE-REDUCTION-STATE-CREATE-INFO-NV.


See PIPELINE-COVERAGE-REDUCTION-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-coverage-reduction-state-create-info-nv 
                 :next next
                 :flags flags
                 :coverage-reduction-mode coverage-reduction-mode))

(defun make-framebuffer-mixed-samples-combination-nv (&key (next nil)
                                                      (coverage-reduction-mode nil)
                                                      (rasterization-samples nil)
                                                      (depth-stencil-samples nil)
                                                      (color-samples nil))
"Creates an instance of FRAMEBUFFER-MIXED-SAMPLES-COMBINATION-NV.
The arguments of this function correspond to the slots of FRAMEBUFFER-MIXED-SAMPLES-COMBINATION-NV.


See FRAMEBUFFER-MIXED-SAMPLES-COMBINATION-NV"
  (make-instance 'vk:framebuffer-mixed-samples-combination-nv 
                 :next next
                 :coverage-reduction-mode coverage-reduction-mode
                 :rasterization-samples rasterization-samples
                 :depth-stencil-samples depth-stencil-samples
                 :color-samples color-samples))

(defun make-physical-device-shader-integer-functions-2-features-intel (&key
                                                                       (next nil)
                                                                       (shader-integer-functions-2 nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-INTEGER-FUNCTIONS-2-FEATURES-INTEL.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-INTEGER-FUNCTIONS-2-FEATURES-INTEL.


See PHYSICAL-DEVICE-SHADER-INTEGER-FUNCTIONS-2-FEATURES-INTEL"
  (make-instance 'vk:physical-device-shader-integer-functions-2-features-intel 
                 :next next
                 :shader-integer-functions-2 shader-integer-functions-2))

(defun make-performance-value-data-intel (&key (value-32 nil) (value-64 nil)
                                          (value-float nil) (value-bool nil)
                                          (value-string nil))
"Creates an instance of PERFORMANCE-VALUE-DATA-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-VALUE-DATA-INTEL.

Since PERFORMANCE-VALUE-DATA-INTEL represents a union, exactly one argument must be supplied.

See PERFORMANCE-VALUE-DATA-INTEL"
  (assert (= 1 (count-if #'identity (list value-32 value-64 value-float value-bool value-string)))
          (value-32 value-64 value-float value-bool value-string)
          "Exactly one argument must be non-nil.")
  (cond 
    (value-32
     (make-instance 'vk:performance-value-data-intel :value-32 value-32))
    (value-64
     (make-instance 'vk:performance-value-data-intel :value-64 value-64))
    (value-float
     (make-instance 'vk:performance-value-data-intel :value-float value-float))
    (value-bool
     (make-instance 'vk:performance-value-data-intel :value-bool value-bool))
    (value-string
     (make-instance 'vk:performance-value-data-intel :value-string value-string))))

(defun make-performance-value-intel (&key (type nil) (data nil))
"Creates an instance of PERFORMANCE-VALUE-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-VALUE-INTEL.


See PERFORMANCE-VALUE-INTEL"
  (make-instance 'vk:performance-value-intel 
                 :type type
                 :data data))

(defun make-initialize-performance-api-info-intel (&key (next nil)
                                                   (user-data nil))
"Creates an instance of INITIALIZE-PERFORMANCE-API-INFO-INTEL.
The arguments of this function correspond to the slots of INITIALIZE-PERFORMANCE-API-INFO-INTEL.


See INITIALIZE-PERFORMANCE-API-INFO-INTEL"
  (make-instance 'vk:initialize-performance-api-info-intel 
                 :next next
                 :user-data user-data))

(defun make-query-pool-performance-query-create-info-intel (&key (next nil)
                                                            (performance-counters-sampling nil))
"Creates an instance of QUERY-POOL-PERFORMANCE-QUERY-CREATE-INFO-INTEL.
The arguments of this function correspond to the slots of QUERY-POOL-PERFORMANCE-QUERY-CREATE-INFO-INTEL.


See QUERY-POOL-PERFORMANCE-QUERY-CREATE-INFO-INTEL"
  (make-instance 'vk:query-pool-performance-query-create-info-intel 
                 :next next
                 :performance-counters-sampling performance-counters-sampling))

(defun make-performance-marker-info-intel (&key (next nil) (marker 0))
"Creates an instance of PERFORMANCE-MARKER-INFO-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-MARKER-INFO-INTEL.


See PERFORMANCE-MARKER-INFO-INTEL"
  (make-instance 'vk:performance-marker-info-intel 
                 :next next
                 :marker marker))

(defun make-performance-stream-marker-info-intel (&key (next nil) (marker 0))
"Creates an instance of PERFORMANCE-STREAM-MARKER-INFO-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-STREAM-MARKER-INFO-INTEL.


See PERFORMANCE-STREAM-MARKER-INFO-INTEL"
  (make-instance 'vk:performance-stream-marker-info-intel 
                 :next next
                 :marker marker))

(defun make-performance-override-info-intel (&key (next nil) (type nil)
                                             (enable nil) (parameter 0))
"Creates an instance of PERFORMANCE-OVERRIDE-INFO-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-OVERRIDE-INFO-INTEL.


See PERFORMANCE-OVERRIDE-INFO-INTEL"
  (make-instance 'vk:performance-override-info-intel 
                 :next next
                 :type type
                 :enable enable
                 :parameter parameter))

(defun make-performance-configuration-acquire-info-intel (&key (next nil)
                                                          (type nil))
"Creates an instance of PERFORMANCE-CONFIGURATION-ACQUIRE-INFO-INTEL.
The arguments of this function correspond to the slots of PERFORMANCE-CONFIGURATION-ACQUIRE-INFO-INTEL.


See PERFORMANCE-CONFIGURATION-ACQUIRE-INFO-INTEL"
  (make-instance 'vk:performance-configuration-acquire-info-intel 
                 :next next
                 :type type))

(defun make-physical-device-shader-clock-features-khr (&key (next nil)
                                                       (shader-subgroup-clock nil)
                                                       (shader-device-clock nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-CLOCK-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-CLOCK-FEATURES-KHR.


See PHYSICAL-DEVICE-SHADER-CLOCK-FEATURES-KHR"
  (make-instance 'vk:physical-device-shader-clock-features-khr 
                 :next next
                 :shader-subgroup-clock shader-subgroup-clock
                 :shader-device-clock shader-device-clock))

(defun make-physical-device-index-type-uint-8-features-ext (&key (next nil)
                                                            (index-type-uint-8 nil))
"Creates an instance of PHYSICAL-DEVICE-INDEX-TYPE-UINT-8-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-INDEX-TYPE-UINT-8-FEATURES-EXT.


See PHYSICAL-DEVICE-INDEX-TYPE-UINT-8-FEATURES-EXT"
  (make-instance 'vk:physical-device-index-type-uint-8-features-ext 
                 :next next
                 :index-type-uint-8 index-type-uint-8))

(defun make-physical-device-shader-s-m-builtins-properties-nv (&key (next nil)
                                                               (shader-s-m-count 0)
                                                               (shader-warps-per-s-m 0))
"Creates an instance of PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-PROPERTIES-NV.


See PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-PROPERTIES-NV"
  (make-instance 'vk:physical-device-shader-s-m-builtins-properties-nv 
                 :next next
                 :shader-s-m-count shader-s-m-count
                 :shader-warps-per-s-m shader-warps-per-s-m))

(defun make-physical-device-shader-s-m-builtins-features-nv (&key (next nil)
                                                             (shader-s-m-builtins nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-FEATURES-NV.


See PHYSICAL-DEVICE-SHADER-S-M-BUILTINS-FEATURES-NV"
  (make-instance 'vk:physical-device-shader-s-m-builtins-features-nv 
                 :next next
                 :shader-s-m-builtins shader-s-m-builtins))

(defun make-physical-device-fragment-shader-interlock-features-ext (&key
                                                                    (next nil)
                                                                    (fragment-shader-sample-interlock nil)
                                                                    (fragment-shader-pixel-interlock nil)
                                                                    (fragment-shader-shading-rate-interlock nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADER-INTERLOCK-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADER-INTERLOCK-FEATURES-EXT.


See PHYSICAL-DEVICE-FRAGMENT-SHADER-INTERLOCK-FEATURES-EXT"
  (make-instance 'vk:physical-device-fragment-shader-interlock-features-ext 
                 :next next
                 :fragment-shader-sample-interlock fragment-shader-sample-interlock
                 :fragment-shader-pixel-interlock fragment-shader-pixel-interlock
                 :fragment-shader-shading-rate-interlock fragment-shader-shading-rate-interlock))

(defun make-physical-device-separate-depth-stencil-layouts-features (&key
                                                                     (next nil)
                                                                     (separate-depth-stencil-layouts nil))
"Creates an instance of PHYSICAL-DEVICE-SEPARATE-DEPTH-STENCIL-LAYOUTS-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SEPARATE-DEPTH-STENCIL-LAYOUTS-FEATURES.


See PHYSICAL-DEVICE-SEPARATE-DEPTH-STENCIL-LAYOUTS-FEATURES"
  (make-instance 'vk:physical-device-separate-depth-stencil-layouts-features 
                 :next next
                 :separate-depth-stencil-layouts separate-depth-stencil-layouts))

(defun make-attachment-reference-stencil-layout (&key (next nil)
                                                 (stencil-layout nil))
"Creates an instance of ATTACHMENT-REFERENCE-STENCIL-LAYOUT.
The arguments of this function correspond to the slots of ATTACHMENT-REFERENCE-STENCIL-LAYOUT.


See ATTACHMENT-REFERENCE-STENCIL-LAYOUT"
  (make-instance 'vk:attachment-reference-stencil-layout 
                 :next next
                 :stencil-layout stencil-layout))

(defun make-physical-device-primitive-topology-list-restart-features-ext (&key
                                                                          (next nil)
                                                                          (primitive-topology-list-restart nil)
                                                                          (primitive-topology-patch-list-restart nil))
"Creates an instance of PHYSICAL-DEVICE-PRIMITIVE-TOPOLOGY-LIST-RESTART-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PRIMITIVE-TOPOLOGY-LIST-RESTART-FEATURES-EXT.


See PHYSICAL-DEVICE-PRIMITIVE-TOPOLOGY-LIST-RESTART-FEATURES-EXT"
  (make-instance 'vk:physical-device-primitive-topology-list-restart-features-ext 
                 :next next
                 :primitive-topology-list-restart primitive-topology-list-restart
                 :primitive-topology-patch-list-restart primitive-topology-patch-list-restart))

(defun make-attachment-description-stencil-layout (&key (next nil)
                                                   (stencil-initial-layout nil)
                                                   (stencil-final-layout nil))
"Creates an instance of ATTACHMENT-DESCRIPTION-STENCIL-LAYOUT.
The arguments of this function correspond to the slots of ATTACHMENT-DESCRIPTION-STENCIL-LAYOUT.


See ATTACHMENT-DESCRIPTION-STENCIL-LAYOUT"
  (make-instance 'vk:attachment-description-stencil-layout 
                 :next next
                 :stencil-initial-layout stencil-initial-layout
                 :stencil-final-layout stencil-final-layout))

(defun make-physical-device-pipeline-executable-properties-features-khr (&key
                                                                         (next nil)
                                                                         (pipeline-executable-info nil))
"Creates an instance of PHYSICAL-DEVICE-PIPELINE-EXECUTABLE-PROPERTIES-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PIPELINE-EXECUTABLE-PROPERTIES-FEATURES-KHR.


See PHYSICAL-DEVICE-PIPELINE-EXECUTABLE-PROPERTIES-FEATURES-KHR"
  (make-instance 'vk:physical-device-pipeline-executable-properties-features-khr 
                 :next next
                 :pipeline-executable-info pipeline-executable-info))

(defun make-pipeline-info-khr (&key (next nil) (pipeline nil))
"Creates an instance of PIPELINE-INFO-KHR.
The arguments of this function correspond to the slots of PIPELINE-INFO-KHR.


See PIPELINE-INFO-KHR"
  (make-instance 'vk:pipeline-info-khr 
                 :next next
                 :pipeline pipeline))

(defun make-pipeline-executable-properties-khr (&key (next nil) (stages nil)
                                                (name "") (description "")
                                                (subgroup-size 0))
"Creates an instance of PIPELINE-EXECUTABLE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PIPELINE-EXECUTABLE-PROPERTIES-KHR.


See PIPELINE-EXECUTABLE-PROPERTIES-KHR"
  (make-instance 'vk:pipeline-executable-properties-khr 
                 :next next
                 :stages stages
                 :name name
                 :description description
                 :subgroup-size subgroup-size))

(defun make-pipeline-executable-info-khr (&key (next nil) (pipeline nil)
                                          (executable-index 0))
"Creates an instance of PIPELINE-EXECUTABLE-INFO-KHR.
The arguments of this function correspond to the slots of PIPELINE-EXECUTABLE-INFO-KHR.


See PIPELINE-EXECUTABLE-INFO-KHR"
  (make-instance 'vk:pipeline-executable-info-khr 
                 :next next
                 :pipeline pipeline
                 :executable-index executable-index))

(defun make-pipeline-executable-statistic-value-khr (&key (b32 nil) (i64 nil)
                                                     (u64 nil) (f64 nil))
"Creates an instance of PIPELINE-EXECUTABLE-STATISTIC-VALUE-KHR.
The arguments of this function correspond to the slots of PIPELINE-EXECUTABLE-STATISTIC-VALUE-KHR.

Since PIPELINE-EXECUTABLE-STATISTIC-VALUE-KHR represents a union, exactly one argument must be supplied.

See PIPELINE-EXECUTABLE-STATISTIC-VALUE-KHR"
  (assert (= 1 (count-if #'identity (list b32 i64 u64 f64)))
          (b32 i64 u64 f64)
          "Exactly one argument must be non-nil.")
  (cond 
    (b32
     (make-instance 'vk:pipeline-executable-statistic-value-khr :b32 b32))
    (i64
     (make-instance 'vk:pipeline-executable-statistic-value-khr :i64 i64))
    (u64
     (make-instance 'vk:pipeline-executable-statistic-value-khr :u64 u64))
    (f64
     (make-instance 'vk:pipeline-executable-statistic-value-khr :f64 f64))))

(defun make-pipeline-executable-statistic-khr (&key (next nil) (name "")
                                               (description "") (format nil)
                                               (value nil))
"Creates an instance of PIPELINE-EXECUTABLE-STATISTIC-KHR.
The arguments of this function correspond to the slots of PIPELINE-EXECUTABLE-STATISTIC-KHR.


See PIPELINE-EXECUTABLE-STATISTIC-KHR"
  (make-instance 'vk:pipeline-executable-statistic-khr 
                 :next next
                 :name name
                 :description description
                 :format format
                 :value value))

(defun make-pipeline-executable-internal-representation-khr (&key (next nil)
                                                             (name "")
                                                             (description "")
                                                             (is-text nil)
                                                             (data-size 0)
                                                             (data nil))
"Creates an instance of PIPELINE-EXECUTABLE-INTERNAL-REPRESENTATION-KHR.
The arguments of this function correspond to the slots of PIPELINE-EXECUTABLE-INTERNAL-REPRESENTATION-KHR.


See PIPELINE-EXECUTABLE-INTERNAL-REPRESENTATION-KHR"
  (make-instance 'vk:pipeline-executable-internal-representation-khr 
                 :next next
                 :name name
                 :description description
                 :is-text is-text
                 :data-size data-size
                 :data data))

(defun make-physical-device-shader-demote-to-helper-invocation-features-ext (&key
                                                                             (next nil)
                                                                             (shader-demote-to-helper-invocation nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-DEMOTE-TO-HELPER-INVOCATION-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-DEMOTE-TO-HELPER-INVOCATION-FEATURES-EXT.


See PHYSICAL-DEVICE-SHADER-DEMOTE-TO-HELPER-INVOCATION-FEATURES-EXT"
  (make-instance 'vk:physical-device-shader-demote-to-helper-invocation-features-ext 
                 :next next
                 :shader-demote-to-helper-invocation shader-demote-to-helper-invocation))

(defun make-physical-device-texel-buffer-alignment-features-ext (&key
                                                                 (next nil)
                                                                 (texel-buffer-alignment nil))
"Creates an instance of PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-FEATURES-EXT.


See PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-FEATURES-EXT"
  (make-instance 'vk:physical-device-texel-buffer-alignment-features-ext 
                 :next next
                 :texel-buffer-alignment texel-buffer-alignment))

(defun make-physical-device-texel-buffer-alignment-properties-ext (&key
                                                                   (next nil)
                                                                   (storage-texel-buffer-offset-alignment-bytes 0)
                                                                   (storage-texel-buffer-offset-single-texel-alignment nil)
                                                                   (uniform-texel-buffer-offset-alignment-bytes 0)
                                                                   (uniform-texel-buffer-offset-single-texel-alignment nil))
"Creates an instance of PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-PROPERTIES-EXT.


See PHYSICAL-DEVICE-TEXEL-BUFFER-ALIGNMENT-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-texel-buffer-alignment-properties-ext 
                 :next next
                 :storage-texel-buffer-offset-alignment-bytes storage-texel-buffer-offset-alignment-bytes
                 :storage-texel-buffer-offset-single-texel-alignment storage-texel-buffer-offset-single-texel-alignment
                 :uniform-texel-buffer-offset-alignment-bytes uniform-texel-buffer-offset-alignment-bytes
                 :uniform-texel-buffer-offset-single-texel-alignment uniform-texel-buffer-offset-single-texel-alignment))

(defun make-physical-device-subgroup-size-control-features-ext (&key (next nil)
                                                                (subgroup-size-control nil)
                                                                (compute-full-subgroups nil))
"Creates an instance of PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-FEATURES-EXT.


See PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-FEATURES-EXT"
  (make-instance 'vk:physical-device-subgroup-size-control-features-ext 
                 :next next
                 :subgroup-size-control subgroup-size-control
                 :compute-full-subgroups compute-full-subgroups))

(defun make-physical-device-subgroup-size-control-properties-ext (&key
                                                                  (next nil)
                                                                  (min-subgroup-size 0)
                                                                  (max-subgroup-size 0)
                                                                  (max-compute-workgroup-subgroups 0)
                                                                  (required-subgroup-size-stages nil))
"Creates an instance of PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-PROPERTIES-EXT.


See PHYSICAL-DEVICE-SUBGROUP-SIZE-CONTROL-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-subgroup-size-control-properties-ext 
                 :next next
                 :min-subgroup-size min-subgroup-size
                 :max-subgroup-size max-subgroup-size
                 :max-compute-workgroup-subgroups max-compute-workgroup-subgroups
                 :required-subgroup-size-stages required-subgroup-size-stages))

(defun make-pipeline-shader-stage-required-subgroup-size-create-info-ext (&key
                                                                          (next nil)
                                                                          (required-subgroup-size 0))
"Creates an instance of PIPELINE-SHADER-STAGE-REQUIRED-SUBGROUP-SIZE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-SHADER-STAGE-REQUIRED-SUBGROUP-SIZE-CREATE-INFO-EXT.


See PIPELINE-SHADER-STAGE-REQUIRED-SUBGROUP-SIZE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-shader-stage-required-subgroup-size-create-info-ext 
                 :next next
                 :required-subgroup-size required-subgroup-size))

(defun make-subpass-shading-pipeline-create-info-huawei (&key (next nil)
                                                         (render-pass nil)
                                                         (subpass 0))
"Creates an instance of SUBPASS-SHADING-PIPELINE-CREATE-INFO-HUAWEI.
The arguments of this function correspond to the slots of SUBPASS-SHADING-PIPELINE-CREATE-INFO-HUAWEI.


See SUBPASS-SHADING-PIPELINE-CREATE-INFO-HUAWEI"
  (make-instance 'vk:subpass-shading-pipeline-create-info-huawei 
                 :next next
                 :render-pass render-pass
                 :subpass subpass))

(defun make-physical-device-subpass-shading-properties-huawei (&key (next nil)
                                                               (max-subpass-shading-workgroup-size-aspect-ratio 0))
"Creates an instance of PHYSICAL-DEVICE-SUBPASS-SHADING-PROPERTIES-HUAWEI.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SUBPASS-SHADING-PROPERTIES-HUAWEI.


See PHYSICAL-DEVICE-SUBPASS-SHADING-PROPERTIES-HUAWEI"
  (make-instance 'vk:physical-device-subpass-shading-properties-huawei 
                 :next next
                 :max-subpass-shading-workgroup-size-aspect-ratio max-subpass-shading-workgroup-size-aspect-ratio))

(defun make-memory-opaque-capture-address-allocate-info (&key (next nil)
                                                         (opaque-capture-address 0))
"Creates an instance of MEMORY-OPAQUE-CAPTURE-ADDRESS-ALLOCATE-INFO.
The arguments of this function correspond to the slots of MEMORY-OPAQUE-CAPTURE-ADDRESS-ALLOCATE-INFO.


See MEMORY-OPAQUE-CAPTURE-ADDRESS-ALLOCATE-INFO"
  (make-instance 'vk:memory-opaque-capture-address-allocate-info 
                 :next next
                 :opaque-capture-address opaque-capture-address))

(defun make-device-memory-opaque-capture-address-info (&key (next nil)
                                                       (memory nil))
"Creates an instance of DEVICE-MEMORY-OPAQUE-CAPTURE-ADDRESS-INFO.
The arguments of this function correspond to the slots of DEVICE-MEMORY-OPAQUE-CAPTURE-ADDRESS-INFO.


See DEVICE-MEMORY-OPAQUE-CAPTURE-ADDRESS-INFO"
  (make-instance 'vk:device-memory-opaque-capture-address-info 
                 :next next
                 :memory memory))

(defun make-physical-device-line-rasterization-features-ext (&key (next nil)
                                                             (rectangular-lines nil)
                                                             (bresenham-lines nil)
                                                             (smooth-lines nil)
                                                             (stippled-rectangular-lines nil)
                                                             (stippled-bresenham-lines nil)
                                                             (stippled-smooth-lines nil))
"Creates an instance of PHYSICAL-DEVICE-LINE-RASTERIZATION-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-LINE-RASTERIZATION-FEATURES-EXT.


See PHYSICAL-DEVICE-LINE-RASTERIZATION-FEATURES-EXT"
  (make-instance 'vk:physical-device-line-rasterization-features-ext 
                 :next next
                 :rectangular-lines rectangular-lines
                 :bresenham-lines bresenham-lines
                 :smooth-lines smooth-lines
                 :stippled-rectangular-lines stippled-rectangular-lines
                 :stippled-bresenham-lines stippled-bresenham-lines
                 :stippled-smooth-lines stippled-smooth-lines))

(defun make-physical-device-line-rasterization-properties-ext (&key (next nil)
                                                               (line-sub-pixel-precision-bits 0))
"Creates an instance of PHYSICAL-DEVICE-LINE-RASTERIZATION-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-LINE-RASTERIZATION-PROPERTIES-EXT.


See PHYSICAL-DEVICE-LINE-RASTERIZATION-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-line-rasterization-properties-ext 
                 :next next
                 :line-sub-pixel-precision-bits line-sub-pixel-precision-bits))

(defun make-pipeline-rasterization-line-state-create-info-ext (&key (next nil)
                                                               (line-rasterization-mode nil)
                                                               (stippled-line-enable nil)
                                                               (line-stipple-factor 0)
                                                               (line-stipple-pattern 0))
"Creates an instance of PIPELINE-RASTERIZATION-LINE-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-LINE-STATE-CREATE-INFO-EXT.


See PIPELINE-RASTERIZATION-LINE-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-rasterization-line-state-create-info-ext 
                 :next next
                 :line-rasterization-mode line-rasterization-mode
                 :stippled-line-enable stippled-line-enable
                 :line-stipple-factor line-stipple-factor
                 :line-stipple-pattern line-stipple-pattern))

(defun make-physical-device-pipeline-creation-cache-control-features-ext (&key
                                                                          (next nil)
                                                                          (pipeline-creation-cache-control nil))
"Creates an instance of PHYSICAL-DEVICE-PIPELINE-CREATION-CACHE-CONTROL-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PIPELINE-CREATION-CACHE-CONTROL-FEATURES-EXT.


See PHYSICAL-DEVICE-PIPELINE-CREATION-CACHE-CONTROL-FEATURES-EXT"
  (make-instance 'vk:physical-device-pipeline-creation-cache-control-features-ext 
                 :next next
                 :pipeline-creation-cache-control pipeline-creation-cache-control))

(defun make-physical-device-vulkan-1-1-features (&key (next nil)
                                                 (storage-buffer-16-bit-access nil)
                                                 (uniform-and-storage-buffer-16-bit-access nil)
                                                 (storage-push-constant-16 nil)
                                                 (storage-input-output-16 nil)
                                                 (multiview nil)
                                                 (multiview-geometry-shader nil)
                                                 (multiview-tessellation-shader nil)
                                                 (variable-pointers-storage-buffer nil)
                                                 (variable-pointers nil)
                                                 (protected-memory nil)
                                                 (sampler-ycbcr-conversion nil)
                                                 (shader-draw-parameters nil))
"Creates an instance of PHYSICAL-DEVICE-VULKAN-1-1-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VULKAN-1-1-FEATURES.


See PHYSICAL-DEVICE-VULKAN-1-1-FEATURES"
  (make-instance 'vk:physical-device-vulkan-1-1-features 
                 :next next
                 :storage-buffer-16-bit-access storage-buffer-16-bit-access
                 :uniform-and-storage-buffer-16-bit-access uniform-and-storage-buffer-16-bit-access
                 :storage-push-constant-16 storage-push-constant-16
                 :storage-input-output-16 storage-input-output-16
                 :multiview multiview
                 :multiview-geometry-shader multiview-geometry-shader
                 :multiview-tessellation-shader multiview-tessellation-shader
                 :variable-pointers-storage-buffer variable-pointers-storage-buffer
                 :variable-pointers variable-pointers
                 :protected-memory protected-memory
                 :sampler-ycbcr-conversion sampler-ycbcr-conversion
                 :shader-draw-parameters shader-draw-parameters))

(defun make-physical-device-vulkan-1-1-properties (&key (next nil)
                                                   (device-uuid 0)
                                                   (driver-uuid 0)
                                                   (device-luid 0)
                                                   (device-node-mask 0)
                                                   (device-luid-valid nil)
                                                   (subgroup-size 0)
                                                   (subgroup-supported-stages nil)
                                                   (subgroup-supported-operations nil)
                                                   (subgroup-quad-operations-in-all-stages nil)
                                                   (point-clipping-behavior nil)
                                                   (max-multiview-view-count 0)
                                                   (max-multiview-instance-index 0)
                                                   (protected-no-fault nil)
                                                   (max-per-set-descriptors 0)
                                                   (max-memory-allocation-size 0))
"Creates an instance of PHYSICAL-DEVICE-VULKAN-1-1-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VULKAN-1-1-PROPERTIES.


See PHYSICAL-DEVICE-VULKAN-1-1-PROPERTIES"
  (make-instance 'vk:physical-device-vulkan-1-1-properties 
                 :next next
                 :device-uuid device-uuid
                 :driver-uuid driver-uuid
                 :device-luid device-luid
                 :device-node-mask device-node-mask
                 :device-luid-valid device-luid-valid
                 :subgroup-size subgroup-size
                 :subgroup-supported-stages subgroup-supported-stages
                 :subgroup-supported-operations subgroup-supported-operations
                 :subgroup-quad-operations-in-all-stages subgroup-quad-operations-in-all-stages
                 :point-clipping-behavior point-clipping-behavior
                 :max-multiview-view-count max-multiview-view-count
                 :max-multiview-instance-index max-multiview-instance-index
                 :protected-no-fault protected-no-fault
                 :max-per-set-descriptors max-per-set-descriptors
                 :max-memory-allocation-size max-memory-allocation-size))

(defun make-physical-device-vulkan-1-2-features (&key (next nil)
                                                 (sampler-mirror-clamp-to-edge nil)
                                                 (draw-indirect-count nil)
                                                 (storage-buffer-8-bit-access nil)
                                                 (uniform-and-storage-buffer-8-bit-access nil)
                                                 (storage-push-constant-8 nil)
                                                 (shader-buffer-int-64-atomics nil)
                                                 (shader-shared-int-64-atomics nil)
                                                 (shader-float-16 nil)
                                                 (shader-int-8 nil)
                                                 (descriptor-indexing nil)
                                                 (shader-input-attachment-array-dynamic-indexing nil)
                                                 (shader-uniform-texel-buffer-array-dynamic-indexing nil)
                                                 (shader-storage-texel-buffer-array-dynamic-indexing nil)
                                                 (shader-uniform-buffer-array-non-uniform-indexing nil)
                                                 (shader-sampled-image-array-non-uniform-indexing nil)
                                                 (shader-storage-buffer-array-non-uniform-indexing nil)
                                                 (shader-storage-image-array-non-uniform-indexing nil)
                                                 (shader-input-attachment-array-non-uniform-indexing nil)
                                                 (shader-uniform-texel-buffer-array-non-uniform-indexing nil)
                                                 (shader-storage-texel-buffer-array-non-uniform-indexing nil)
                                                 (descriptor-binding-uniform-buffer-update-after-bind nil)
                                                 (descriptor-binding-sampled-image-update-after-bind nil)
                                                 (descriptor-binding-storage-image-update-after-bind nil)
                                                 (descriptor-binding-storage-buffer-update-after-bind nil)
                                                 (descriptor-binding-uniform-texel-buffer-update-after-bind nil)
                                                 (descriptor-binding-storage-texel-buffer-update-after-bind nil)
                                                 (descriptor-binding-update-unused-while-pending nil)
                                                 (descriptor-binding-partially-bound nil)
                                                 (descriptor-binding-variable-descriptor-count nil)
                                                 (runtime-descriptor-array nil)
                                                 (sampler-filter-minmax nil)
                                                 (scalar-block-layout nil)
                                                 (imageless-framebuffer nil)
                                                 (uniform-buffer-standard-layout nil)
                                                 (shader-subgroup-extended-types nil)
                                                 (separate-depth-stencil-layouts nil)
                                                 (host-query-reset nil)
                                                 (timeline-semaphore nil)
                                                 (buffer-device-address nil)
                                                 (buffer-device-address-capture-replay nil)
                                                 (buffer-device-address-multi-device nil)
                                                 (vulkan-memory-model nil)
                                                 (vulkan-memory-model-device-scope nil)
                                                 (vulkan-memory-model-availability-visibility-chains nil)
                                                 (shader-output-viewport-index nil)
                                                 (shader-output-layer nil)
                                                 (subgroup-broadcast-dynamic-id nil))
"Creates an instance of PHYSICAL-DEVICE-VULKAN-1-2-FEATURES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VULKAN-1-2-FEATURES.


See PHYSICAL-DEVICE-VULKAN-1-2-FEATURES"
  (make-instance 'vk:physical-device-vulkan-1-2-features 
                 :next next
                 :sampler-mirror-clamp-to-edge sampler-mirror-clamp-to-edge
                 :draw-indirect-count draw-indirect-count
                 :storage-buffer-8-bit-access storage-buffer-8-bit-access
                 :uniform-and-storage-buffer-8-bit-access uniform-and-storage-buffer-8-bit-access
                 :storage-push-constant-8 storage-push-constant-8
                 :shader-buffer-int-64-atomics shader-buffer-int-64-atomics
                 :shader-shared-int-64-atomics shader-shared-int-64-atomics
                 :shader-float-16 shader-float-16
                 :shader-int-8 shader-int-8
                 :descriptor-indexing descriptor-indexing
                 :shader-input-attachment-array-dynamic-indexing shader-input-attachment-array-dynamic-indexing
                 :shader-uniform-texel-buffer-array-dynamic-indexing shader-uniform-texel-buffer-array-dynamic-indexing
                 :shader-storage-texel-buffer-array-dynamic-indexing shader-storage-texel-buffer-array-dynamic-indexing
                 :shader-uniform-buffer-array-non-uniform-indexing shader-uniform-buffer-array-non-uniform-indexing
                 :shader-sampled-image-array-non-uniform-indexing shader-sampled-image-array-non-uniform-indexing
                 :shader-storage-buffer-array-non-uniform-indexing shader-storage-buffer-array-non-uniform-indexing
                 :shader-storage-image-array-non-uniform-indexing shader-storage-image-array-non-uniform-indexing
                 :shader-input-attachment-array-non-uniform-indexing shader-input-attachment-array-non-uniform-indexing
                 :shader-uniform-texel-buffer-array-non-uniform-indexing shader-uniform-texel-buffer-array-non-uniform-indexing
                 :shader-storage-texel-buffer-array-non-uniform-indexing shader-storage-texel-buffer-array-non-uniform-indexing
                 :descriptor-binding-uniform-buffer-update-after-bind descriptor-binding-uniform-buffer-update-after-bind
                 :descriptor-binding-sampled-image-update-after-bind descriptor-binding-sampled-image-update-after-bind
                 :descriptor-binding-storage-image-update-after-bind descriptor-binding-storage-image-update-after-bind
                 :descriptor-binding-storage-buffer-update-after-bind descriptor-binding-storage-buffer-update-after-bind
                 :descriptor-binding-uniform-texel-buffer-update-after-bind descriptor-binding-uniform-texel-buffer-update-after-bind
                 :descriptor-binding-storage-texel-buffer-update-after-bind descriptor-binding-storage-texel-buffer-update-after-bind
                 :descriptor-binding-update-unused-while-pending descriptor-binding-update-unused-while-pending
                 :descriptor-binding-partially-bound descriptor-binding-partially-bound
                 :descriptor-binding-variable-descriptor-count descriptor-binding-variable-descriptor-count
                 :runtime-descriptor-array runtime-descriptor-array
                 :sampler-filter-minmax sampler-filter-minmax
                 :scalar-block-layout scalar-block-layout
                 :imageless-framebuffer imageless-framebuffer
                 :uniform-buffer-standard-layout uniform-buffer-standard-layout
                 :shader-subgroup-extended-types shader-subgroup-extended-types
                 :separate-depth-stencil-layouts separate-depth-stencil-layouts
                 :host-query-reset host-query-reset
                 :timeline-semaphore timeline-semaphore
                 :buffer-device-address buffer-device-address
                 :buffer-device-address-capture-replay buffer-device-address-capture-replay
                 :buffer-device-address-multi-device buffer-device-address-multi-device
                 :vulkan-memory-model vulkan-memory-model
                 :vulkan-memory-model-device-scope vulkan-memory-model-device-scope
                 :vulkan-memory-model-availability-visibility-chains vulkan-memory-model-availability-visibility-chains
                 :shader-output-viewport-index shader-output-viewport-index
                 :shader-output-layer shader-output-layer
                 :subgroup-broadcast-dynamic-id subgroup-broadcast-dynamic-id))

(defun make-physical-device-vulkan-1-2-properties (&key (next nil)
                                                   (driver-id nil)
                                                   (driver-name "")
                                                   (driver-info "")
                                                   (conformance-version (vk:make-conformance-version))
                                                   (denorm-behavior-independence nil)
                                                   (rounding-mode-independence nil)
                                                   (shader-signed-zero-inf-nan-preserve-float-16 nil)
                                                   (shader-signed-zero-inf-nan-preserve-float-32 nil)
                                                   (shader-signed-zero-inf-nan-preserve-float-64 nil)
                                                   (shader-denorm-preserve-float-16 nil)
                                                   (shader-denorm-preserve-float-32 nil)
                                                   (shader-denorm-preserve-float-64 nil)
                                                   (shader-denorm-flush-to-zero-float-16 nil)
                                                   (shader-denorm-flush-to-zero-float-32 nil)
                                                   (shader-denorm-flush-to-zero-float-64 nil)
                                                   (shader-rounding-mode-rte-float-16 nil)
                                                   (shader-rounding-mode-rte-float-32 nil)
                                                   (shader-rounding-mode-rte-float-64 nil)
                                                   (shader-rounding-mode-rtz-float-16 nil)
                                                   (shader-rounding-mode-rtz-float-32 nil)
                                                   (shader-rounding-mode-rtz-float-64 nil)
                                                   (max-update-after-bind-descriptors-in-all-pools 0)
                                                   (shader-uniform-buffer-array-non-uniform-indexing-native nil)
                                                   (shader-sampled-image-array-non-uniform-indexing-native nil)
                                                   (shader-storage-buffer-array-non-uniform-indexing-native nil)
                                                   (shader-storage-image-array-non-uniform-indexing-native nil)
                                                   (shader-input-attachment-array-non-uniform-indexing-native nil)
                                                   (robust-buffer-access-update-after-bind nil)
                                                   (quad-divergent-implicit-lod nil)
                                                   (max-per-stage-descriptor-update-after-bind-samplers 0)
                                                   (max-per-stage-descriptor-update-after-bind-uniform-buffers 0)
                                                   (max-per-stage-descriptor-update-after-bind-storage-buffers 0)
                                                   (max-per-stage-descriptor-update-after-bind-sampled-images 0)
                                                   (max-per-stage-descriptor-update-after-bind-storage-images 0)
                                                   (max-per-stage-descriptor-update-after-bind-input-attachments 0)
                                                   (max-per-stage-update-after-bind-resources 0)
                                                   (max-descriptor-set-update-after-bind-samplers 0)
                                                   (max-descriptor-set-update-after-bind-uniform-buffers 0)
                                                   (max-descriptor-set-update-after-bind-uniform-buffers-dynamic 0)
                                                   (max-descriptor-set-update-after-bind-storage-buffers 0)
                                                   (max-descriptor-set-update-after-bind-storage-buffers-dynamic 0)
                                                   (max-descriptor-set-update-after-bind-sampled-images 0)
                                                   (max-descriptor-set-update-after-bind-storage-images 0)
                                                   (max-descriptor-set-update-after-bind-input-attachments 0)
                                                   (supported-depth-resolve-modes nil)
                                                   (supported-stencil-resolve-modes nil)
                                                   (independent-resolve-none nil)
                                                   (independent-resolve nil)
                                                   (filter-minmax-single-component-formats nil)
                                                   (filter-minmax-image-component-mapping nil)
                                                   (max-timeline-semaphore-value-difference 0)
                                                   (framebuffer-integer-color-sample-counts nil))
"Creates an instance of PHYSICAL-DEVICE-VULKAN-1-2-PROPERTIES.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VULKAN-1-2-PROPERTIES.


See PHYSICAL-DEVICE-VULKAN-1-2-PROPERTIES"
  (make-instance 'vk:physical-device-vulkan-1-2-properties 
                 :next next
                 :driver-id driver-id
                 :driver-name driver-name
                 :driver-info driver-info
                 :conformance-version conformance-version
                 :denorm-behavior-independence denorm-behavior-independence
                 :rounding-mode-independence rounding-mode-independence
                 :shader-signed-zero-inf-nan-preserve-float-16 shader-signed-zero-inf-nan-preserve-float-16
                 :shader-signed-zero-inf-nan-preserve-float-32 shader-signed-zero-inf-nan-preserve-float-32
                 :shader-signed-zero-inf-nan-preserve-float-64 shader-signed-zero-inf-nan-preserve-float-64
                 :shader-denorm-preserve-float-16 shader-denorm-preserve-float-16
                 :shader-denorm-preserve-float-32 shader-denorm-preserve-float-32
                 :shader-denorm-preserve-float-64 shader-denorm-preserve-float-64
                 :shader-denorm-flush-to-zero-float-16 shader-denorm-flush-to-zero-float-16
                 :shader-denorm-flush-to-zero-float-32 shader-denorm-flush-to-zero-float-32
                 :shader-denorm-flush-to-zero-float-64 shader-denorm-flush-to-zero-float-64
                 :shader-rounding-mode-rte-float-16 shader-rounding-mode-rte-float-16
                 :shader-rounding-mode-rte-float-32 shader-rounding-mode-rte-float-32
                 :shader-rounding-mode-rte-float-64 shader-rounding-mode-rte-float-64
                 :shader-rounding-mode-rtz-float-16 shader-rounding-mode-rtz-float-16
                 :shader-rounding-mode-rtz-float-32 shader-rounding-mode-rtz-float-32
                 :shader-rounding-mode-rtz-float-64 shader-rounding-mode-rtz-float-64
                 :max-update-after-bind-descriptors-in-all-pools max-update-after-bind-descriptors-in-all-pools
                 :shader-uniform-buffer-array-non-uniform-indexing-native shader-uniform-buffer-array-non-uniform-indexing-native
                 :shader-sampled-image-array-non-uniform-indexing-native shader-sampled-image-array-non-uniform-indexing-native
                 :shader-storage-buffer-array-non-uniform-indexing-native shader-storage-buffer-array-non-uniform-indexing-native
                 :shader-storage-image-array-non-uniform-indexing-native shader-storage-image-array-non-uniform-indexing-native
                 :shader-input-attachment-array-non-uniform-indexing-native shader-input-attachment-array-non-uniform-indexing-native
                 :robust-buffer-access-update-after-bind robust-buffer-access-update-after-bind
                 :quad-divergent-implicit-lod quad-divergent-implicit-lod
                 :max-per-stage-descriptor-update-after-bind-samplers max-per-stage-descriptor-update-after-bind-samplers
                 :max-per-stage-descriptor-update-after-bind-uniform-buffers max-per-stage-descriptor-update-after-bind-uniform-buffers
                 :max-per-stage-descriptor-update-after-bind-storage-buffers max-per-stage-descriptor-update-after-bind-storage-buffers
                 :max-per-stage-descriptor-update-after-bind-sampled-images max-per-stage-descriptor-update-after-bind-sampled-images
                 :max-per-stage-descriptor-update-after-bind-storage-images max-per-stage-descriptor-update-after-bind-storage-images
                 :max-per-stage-descriptor-update-after-bind-input-attachments max-per-stage-descriptor-update-after-bind-input-attachments
                 :max-per-stage-update-after-bind-resources max-per-stage-update-after-bind-resources
                 :max-descriptor-set-update-after-bind-samplers max-descriptor-set-update-after-bind-samplers
                 :max-descriptor-set-update-after-bind-uniform-buffers max-descriptor-set-update-after-bind-uniform-buffers
                 :max-descriptor-set-update-after-bind-uniform-buffers-dynamic max-descriptor-set-update-after-bind-uniform-buffers-dynamic
                 :max-descriptor-set-update-after-bind-storage-buffers max-descriptor-set-update-after-bind-storage-buffers
                 :max-descriptor-set-update-after-bind-storage-buffers-dynamic max-descriptor-set-update-after-bind-storage-buffers-dynamic
                 :max-descriptor-set-update-after-bind-sampled-images max-descriptor-set-update-after-bind-sampled-images
                 :max-descriptor-set-update-after-bind-storage-images max-descriptor-set-update-after-bind-storage-images
                 :max-descriptor-set-update-after-bind-input-attachments max-descriptor-set-update-after-bind-input-attachments
                 :supported-depth-resolve-modes supported-depth-resolve-modes
                 :supported-stencil-resolve-modes supported-stencil-resolve-modes
                 :independent-resolve-none independent-resolve-none
                 :independent-resolve independent-resolve
                 :filter-minmax-single-component-formats filter-minmax-single-component-formats
                 :filter-minmax-image-component-mapping filter-minmax-image-component-mapping
                 :max-timeline-semaphore-value-difference max-timeline-semaphore-value-difference
                 :framebuffer-integer-color-sample-counts framebuffer-integer-color-sample-counts))

(defun make-pipeline-compiler-control-create-info-amd (&key (next nil)
                                                       (compiler-control-flags nil))
"Creates an instance of PIPELINE-COMPILER-CONTROL-CREATE-INFO-AMD.
The arguments of this function correspond to the slots of PIPELINE-COMPILER-CONTROL-CREATE-INFO-AMD.


See PIPELINE-COMPILER-CONTROL-CREATE-INFO-AMD"
  (make-instance 'vk:pipeline-compiler-control-create-info-amd 
                 :next next
                 :compiler-control-flags compiler-control-flags))

(defun make-physical-device-coherent-memory-features-amd (&key (next nil)
                                                          (device-coherent-memory nil))
"Creates an instance of PHYSICAL-DEVICE-COHERENT-MEMORY-FEATURES-AMD.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COHERENT-MEMORY-FEATURES-AMD.


See PHYSICAL-DEVICE-COHERENT-MEMORY-FEATURES-AMD"
  (make-instance 'vk:physical-device-coherent-memory-features-amd 
                 :next next
                 :device-coherent-memory device-coherent-memory))

(defun make-physical-device-tool-properties-ext (&key (next nil) (name "")
                                                 (version "") (purposes nil)
                                                 (description "") (layer ""))
"Creates an instance of PHYSICAL-DEVICE-TOOL-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-TOOL-PROPERTIES-EXT.


See PHYSICAL-DEVICE-TOOL-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-tool-properties-ext 
                 :next next
                 :name name
                 :version version
                 :purposes purposes
                 :description description
                 :layer layer))

(defun make-sampler-custom-border-color-create-info-ext (&key (next nil)
                                                         (custom-border-color nil)
                                                         (format nil))
"Creates an instance of SAMPLER-CUSTOM-BORDER-COLOR-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of SAMPLER-CUSTOM-BORDER-COLOR-CREATE-INFO-EXT.


See SAMPLER-CUSTOM-BORDER-COLOR-CREATE-INFO-EXT"
  (make-instance 'vk:sampler-custom-border-color-create-info-ext 
                 :next next
                 :custom-border-color custom-border-color
                 :format format))

(defun make-physical-device-custom-border-color-properties-ext (&key (next nil)
                                                                (max-custom-border-color-samplers 0))
"Creates an instance of PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-PROPERTIES-EXT.


See PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-custom-border-color-properties-ext 
                 :next next
                 :max-custom-border-color-samplers max-custom-border-color-samplers))

(defun make-physical-device-custom-border-color-features-ext (&key (next nil)
                                                              (custom-border-colors nil)
                                                              (custom-border-color-without-format nil))
"Creates an instance of PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-FEATURES-EXT.


See PHYSICAL-DEVICE-CUSTOM-BORDER-COLOR-FEATURES-EXT"
  (make-instance 'vk:physical-device-custom-border-color-features-ext 
                 :next next
                 :custom-border-colors custom-border-colors
                 :custom-border-color-without-format custom-border-color-without-format))

(defun make-sampler-border-color-component-mapping-create-info-ext (&key
                                                                    (next nil)
                                                                    (components (vk:make-component-mapping))
                                                                    (srgb nil))
"Creates an instance of SAMPLER-BORDER-COLOR-COMPONENT-MAPPING-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of SAMPLER-BORDER-COLOR-COMPONENT-MAPPING-CREATE-INFO-EXT.


See SAMPLER-BORDER-COLOR-COMPONENT-MAPPING-CREATE-INFO-EXT"
  (make-instance 'vk:sampler-border-color-component-mapping-create-info-ext 
                 :next next
                 :components components
                 :srgb srgb))

(defun make-physical-device-border-color-swizzle-features-ext (&key (next nil)
                                                               (border-color-swizzle nil)
                                                               (border-color-swizzle-from-image nil))
"Creates an instance of PHYSICAL-DEVICE-BORDER-COLOR-SWIZZLE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-BORDER-COLOR-SWIZZLE-FEATURES-EXT.


See PHYSICAL-DEVICE-BORDER-COLOR-SWIZZLE-FEATURES-EXT"
  (make-instance 'vk:physical-device-border-color-swizzle-features-ext 
                 :next next
                 :border-color-swizzle border-color-swizzle
                 :border-color-swizzle-from-image border-color-swizzle-from-image))

(defun make-device-or-host-address-khr (&key (device-address nil)
                                        (host-address nil))
"Creates an instance of DEVICE-OR-HOST-ADDRESS-KHR.
The arguments of this function correspond to the slots of DEVICE-OR-HOST-ADDRESS-KHR.

Since DEVICE-OR-HOST-ADDRESS-KHR represents a union, exactly one argument must be supplied.

See DEVICE-OR-HOST-ADDRESS-KHR"
  (assert (= 1 (count-if #'identity (list device-address host-address)))
          (device-address host-address)
          "Exactly one argument must be non-nil.")
  (cond 
    (device-address
     (make-instance 'vk:device-or-host-address-khr :device-address device-address))
    (host-address
     (make-instance 'vk:device-or-host-address-khr :host-address host-address))))

(defun make-device-or-host-address-const-khr (&key (device-address nil)
                                              (host-address nil))
"Creates an instance of DEVICE-OR-HOST-ADDRESS-CONST-KHR.
The arguments of this function correspond to the slots of DEVICE-OR-HOST-ADDRESS-CONST-KHR.

Since DEVICE-OR-HOST-ADDRESS-CONST-KHR represents a union, exactly one argument must be supplied.

See DEVICE-OR-HOST-ADDRESS-CONST-KHR"
  (assert (= 1 (count-if #'identity (list device-address host-address)))
          (device-address host-address)
          "Exactly one argument must be non-nil.")
  (cond 
    (device-address
     (make-instance 'vk:device-or-host-address-const-khr :device-address device-address))
    (host-address
     (make-instance 'vk:device-or-host-address-const-khr :host-address host-address))))

(defun make-acceleration-structure-geometry-triangles-data-khr (&key (next nil)
                                                                (vertex-format nil)
                                                                (vertex-data nil)
                                                                (vertex-stride 0)
                                                                (max-vertex 0)
                                                                (index-type nil)
                                                                (index-data nil)
                                                                (transform-data nil))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-TRIANGLES-DATA-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-TRIANGLES-DATA-KHR.


See ACCELERATION-STRUCTURE-GEOMETRY-TRIANGLES-DATA-KHR"
  (make-instance 'vk:acceleration-structure-geometry-triangles-data-khr 
                 :next next
                 :vertex-format vertex-format
                 :vertex-data vertex-data
                 :vertex-stride vertex-stride
                 :max-vertex max-vertex
                 :index-type index-type
                 :index-data index-data
                 :transform-data transform-data))

(defun make-acceleration-structure-geometry-aabbs-data-khr (&key (next nil)
                                                            (data nil)
                                                            (stride 0))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-AABBS-DATA-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-AABBS-DATA-KHR.


See ACCELERATION-STRUCTURE-GEOMETRY-AABBS-DATA-KHR"
  (make-instance 'vk:acceleration-structure-geometry-aabbs-data-khr 
                 :next next
                 :data data
                 :stride stride))

(defun make-acceleration-structure-geometry-instances-data-khr (&key (next nil)
                                                                (array-of-pointers nil)
                                                                (data nil))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-INSTANCES-DATA-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-INSTANCES-DATA-KHR.


See ACCELERATION-STRUCTURE-GEOMETRY-INSTANCES-DATA-KHR"
  (make-instance 'vk:acceleration-structure-geometry-instances-data-khr 
                 :next next
                 :array-of-pointers array-of-pointers
                 :data data))

(defun make-acceleration-structure-geometry-data-khr (&key (triangles nil)
                                                      (aabbs nil)
                                                      (instances nil))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-DATA-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-DATA-KHR.

Since ACCELERATION-STRUCTURE-GEOMETRY-DATA-KHR represents a union, exactly one argument must be supplied.

See ACCELERATION-STRUCTURE-GEOMETRY-DATA-KHR"
  (assert (= 1 (count-if #'identity (list triangles aabbs instances)))
          (triangles aabbs instances)
          "Exactly one argument must be non-nil.")
  (cond 
    (triangles
     (make-instance 'vk:acceleration-structure-geometry-data-khr :triangles triangles))
    (aabbs
     (make-instance 'vk:acceleration-structure-geometry-data-khr :aabbs aabbs))
    (instances
     (make-instance 'vk:acceleration-structure-geometry-data-khr :instances instances))))

(defun make-acceleration-structure-geometry-khr (&key (next nil)
                                                 (geometry-type nil)
                                                 (geometry nil) (flags nil))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-KHR.


See ACCELERATION-STRUCTURE-GEOMETRY-KHR"
  (make-instance 'vk:acceleration-structure-geometry-khr 
                 :next next
                 :geometry-type geometry-type
                 :geometry geometry
                 :flags flags))

(defun make-acceleration-structure-build-geometry-info-khr (&key (next nil)
                                                            (type nil)
                                                            (flags nil)
                                                            (mode nil)
                                                            (src-acceleration-structure nil)
                                                            (dst-acceleration-structure nil)
                                                            (geometries nil)
                                                            (p-geometries nil)
                                                            (scratch-data nil))
"Creates an instance of ACCELERATION-STRUCTURE-BUILD-GEOMETRY-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-BUILD-GEOMETRY-INFO-KHR.


See ACCELERATION-STRUCTURE-BUILD-GEOMETRY-INFO-KHR"
  (make-instance 'vk:acceleration-structure-build-geometry-info-khr 
                 :next next
                 :type type
                 :flags flags
                 :mode mode
                 :src-acceleration-structure src-acceleration-structure
                 :dst-acceleration-structure dst-acceleration-structure
                 :geometries geometries
                 :p-geometries p-geometries
                 :scratch-data scratch-data))

(defun make-acceleration-structure-build-range-info-khr (&key
                                                         (primitive-count 0)
                                                         (primitive-offset 0)
                                                         (first-vertex 0)
                                                         (transform-offset 0))
"Creates an instance of ACCELERATION-STRUCTURE-BUILD-RANGE-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-BUILD-RANGE-INFO-KHR.


See ACCELERATION-STRUCTURE-BUILD-RANGE-INFO-KHR"
  (make-instance 'vk:acceleration-structure-build-range-info-khr 
                 :primitive-count primitive-count
                 :primitive-offset primitive-offset
                 :first-vertex first-vertex
                 :transform-offset transform-offset))

(defun make-acceleration-structure-create-info-khr (&key (next nil)
                                                    (create-flags nil)
                                                    (buffer nil) (offset 0)
                                                    (size 0) (type nil)
                                                    (device-address 0))
"Creates an instance of ACCELERATION-STRUCTURE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-CREATE-INFO-KHR.


See ACCELERATION-STRUCTURE-CREATE-INFO-KHR"
  (make-instance 'vk:acceleration-structure-create-info-khr 
                 :next next
                 :create-flags create-flags
                 :buffer buffer
                 :offset offset
                 :size size
                 :type type
                 :device-address device-address))

(defun make-aabb-positions-khr (&key (min-x 0.0) (min-y 0.0) (min-z 0.0)
                                (max-x 0.0) (max-y 0.0) (max-z 0.0))
"Creates an instance of AABB-POSITIONS-KHR.
The arguments of this function correspond to the slots of AABB-POSITIONS-KHR.


See AABB-POSITIONS-KHR"
  (make-instance 'vk:aabb-positions-khr 
                 :min-x min-x
                 :min-y min-y
                 :min-z min-z
                 :max-x max-x
                 :max-y max-y
                 :max-z max-z))

(defun make-transform-matrix-khr (&key (matrix 0.0))
"Creates an instance of TRANSFORM-MATRIX-KHR.
The arguments of this function correspond to the slots of TRANSFORM-MATRIX-KHR.


See TRANSFORM-MATRIX-KHR"
  (make-instance 'vk:transform-matrix-khr 
                 :matrix matrix))

(defun make-acceleration-structure-instance-khr (&key
                                                 (transform (vk:make-transform-matrix-khr))
                                                 (instance-custom-index 0)
                                                 (mask 0)
                                                 (instance-shader-binding-table-record-offset 0)
                                                 (flags nil)
                                                 (acceleration-structure-reference 0))
"Creates an instance of ACCELERATION-STRUCTURE-INSTANCE-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-INSTANCE-KHR.


See ACCELERATION-STRUCTURE-INSTANCE-KHR"
  (make-instance 'vk:acceleration-structure-instance-khr 
                 :transform transform
                 :instance-custom-index instance-custom-index
                 :mask mask
                 :instance-shader-binding-table-record-offset instance-shader-binding-table-record-offset
                 :flags flags
                 :acceleration-structure-reference acceleration-structure-reference))

(defun make-acceleration-structure-device-address-info-khr (&key (next nil)
                                                            (acceleration-structure nil))
"Creates an instance of ACCELERATION-STRUCTURE-DEVICE-ADDRESS-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-DEVICE-ADDRESS-INFO-KHR.


See ACCELERATION-STRUCTURE-DEVICE-ADDRESS-INFO-KHR"
  (make-instance 'vk:acceleration-structure-device-address-info-khr 
                 :next next
                 :acceleration-structure acceleration-structure))

(defun make-acceleration-structure-version-info-khr (&key (next nil)
                                                     (version-data 0))
"Creates an instance of ACCELERATION-STRUCTURE-VERSION-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-VERSION-INFO-KHR.


See ACCELERATION-STRUCTURE-VERSION-INFO-KHR"
  (make-instance 'vk:acceleration-structure-version-info-khr 
                 :next next
                 :version-data version-data))

(defun make-copy-acceleration-structure-info-khr (&key (next nil) (src nil)
                                                  (dst nil) (mode nil))
"Creates an instance of COPY-ACCELERATION-STRUCTURE-INFO-KHR.
The arguments of this function correspond to the slots of COPY-ACCELERATION-STRUCTURE-INFO-KHR.


See COPY-ACCELERATION-STRUCTURE-INFO-KHR"
  (make-instance 'vk:copy-acceleration-structure-info-khr 
                 :next next
                 :src src
                 :dst dst
                 :mode mode))

(defun make-copy-acceleration-structure-to-memory-info-khr (&key (next nil)
                                                            (src nil) (dst nil)
                                                            (mode nil))
"Creates an instance of COPY-ACCELERATION-STRUCTURE-TO-MEMORY-INFO-KHR.
The arguments of this function correspond to the slots of COPY-ACCELERATION-STRUCTURE-TO-MEMORY-INFO-KHR.


See COPY-ACCELERATION-STRUCTURE-TO-MEMORY-INFO-KHR"
  (make-instance 'vk:copy-acceleration-structure-to-memory-info-khr 
                 :next next
                 :src src
                 :dst dst
                 :mode mode))

(defun make-copy-memory-to-acceleration-structure-info-khr (&key (next nil)
                                                            (src nil) (dst nil)
                                                            (mode nil))
"Creates an instance of COPY-MEMORY-TO-ACCELERATION-STRUCTURE-INFO-KHR.
The arguments of this function correspond to the slots of COPY-MEMORY-TO-ACCELERATION-STRUCTURE-INFO-KHR.


See COPY-MEMORY-TO-ACCELERATION-STRUCTURE-INFO-KHR"
  (make-instance 'vk:copy-memory-to-acceleration-structure-info-khr 
                 :next next
                 :src src
                 :dst dst
                 :mode mode))

(defun make-ray-tracing-pipeline-interface-create-info-khr (&key (next nil)
                                                            (max-pipeline-ray-payload-size 0)
                                                            (max-pipeline-ray-hit-attribute-size 0))
"Creates an instance of RAY-TRACING-PIPELINE-INTERFACE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of RAY-TRACING-PIPELINE-INTERFACE-CREATE-INFO-KHR.


See RAY-TRACING-PIPELINE-INTERFACE-CREATE-INFO-KHR"
  (make-instance 'vk:ray-tracing-pipeline-interface-create-info-khr 
                 :next next
                 :max-pipeline-ray-payload-size max-pipeline-ray-payload-size
                 :max-pipeline-ray-hit-attribute-size max-pipeline-ray-hit-attribute-size))

(defun make-pipeline-library-create-info-khr (&key (next nil) (libraries nil))
"Creates an instance of PIPELINE-LIBRARY-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of PIPELINE-LIBRARY-CREATE-INFO-KHR.


See PIPELINE-LIBRARY-CREATE-INFO-KHR"
  (make-instance 'vk:pipeline-library-create-info-khr 
                 :next next
                 :libraries libraries))

(defun make-physical-device-extended-dynamic-state-features-ext (&key
                                                                 (next nil)
                                                                 (extended-dynamic-state nil))
"Creates an instance of PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-FEATURES-EXT.


See PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-FEATURES-EXT"
  (make-instance 'vk:physical-device-extended-dynamic-state-features-ext 
                 :next next
                 :extended-dynamic-state extended-dynamic-state))

(defun make-physical-device-extended-dynamic-state-2-features-ext (&key
                                                                   (next nil)
                                                                   (extended-dynamic-state-2 nil)
                                                                   (extended-dynamic-state-2-logic-op nil)
                                                                   (extended-dynamic-state-2-patch-control-points nil))
"Creates an instance of PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-2-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-2-FEATURES-EXT.


See PHYSICAL-DEVICE-EXTENDED-DYNAMIC-STATE-2-FEATURES-EXT"
  (make-instance 'vk:physical-device-extended-dynamic-state-2-features-ext 
                 :next next
                 :extended-dynamic-state-2 extended-dynamic-state-2
                 :extended-dynamic-state-2-logic-op extended-dynamic-state-2-logic-op
                 :extended-dynamic-state-2-patch-control-points extended-dynamic-state-2-patch-control-points))

(defun make-render-pass-transform-begin-info-qcom (&key (next nil)
                                                   (transform nil))
"Creates an instance of RENDER-PASS-TRANSFORM-BEGIN-INFO-QCOM.
The arguments of this function correspond to the slots of RENDER-PASS-TRANSFORM-BEGIN-INFO-QCOM.


See RENDER-PASS-TRANSFORM-BEGIN-INFO-QCOM"
  (make-instance 'vk:render-pass-transform-begin-info-qcom 
                 :next next
                 :transform transform))

(defun make-copy-command-transform-info-qcom (&key (next nil) (transform nil))
"Creates an instance of COPY-COMMAND-TRANSFORM-INFO-QCOM.
The arguments of this function correspond to the slots of COPY-COMMAND-TRANSFORM-INFO-QCOM.


See COPY-COMMAND-TRANSFORM-INFO-QCOM"
  (make-instance 'vk:copy-command-transform-info-qcom 
                 :next next
                 :transform transform))

(defun make-command-buffer-inheritance-render-pass-transform-info-qcom (&key
                                                                        (next nil)
                                                                        (transform nil)
                                                                        (render-area (vk:make-rect-2d)))
"Creates an instance of COMMAND-BUFFER-INHERITANCE-RENDER-PASS-TRANSFORM-INFO-QCOM.
The arguments of this function correspond to the slots of COMMAND-BUFFER-INHERITANCE-RENDER-PASS-TRANSFORM-INFO-QCOM.


See COMMAND-BUFFER-INHERITANCE-RENDER-PASS-TRANSFORM-INFO-QCOM"
  (make-instance 'vk:command-buffer-inheritance-render-pass-transform-info-qcom 
                 :next next
                 :transform transform
                 :render-area render-area))

(defun make-physical-device-diagnostics-config-features-nv (&key (next nil)
                                                            (diagnostics-config nil))
"Creates an instance of PHYSICAL-DEVICE-DIAGNOSTICS-CONFIG-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DIAGNOSTICS-CONFIG-FEATURES-NV.


See PHYSICAL-DEVICE-DIAGNOSTICS-CONFIG-FEATURES-NV"
  (make-instance 'vk:physical-device-diagnostics-config-features-nv 
                 :next next
                 :diagnostics-config diagnostics-config))

(defun make-device-diagnostics-config-create-info-nv (&key (next nil)
                                                      (flags nil))
"Creates an instance of DEVICE-DIAGNOSTICS-CONFIG-CREATE-INFO-NV.
The arguments of this function correspond to the slots of DEVICE-DIAGNOSTICS-CONFIG-CREATE-INFO-NV.


See DEVICE-DIAGNOSTICS-CONFIG-CREATE-INFO-NV"
  (make-instance 'vk:device-diagnostics-config-create-info-nv 
                 :next next
                 :flags flags))

(defun make-physical-device-zero-initialize-workgroup-memory-features-khr (&key
                                                                           (next nil)
                                                                           (shader-zero-initialize-workgroup-memory nil))
"Creates an instance of PHYSICAL-DEVICE-ZERO-INITIALIZE-WORKGROUP-MEMORY-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ZERO-INITIALIZE-WORKGROUP-MEMORY-FEATURES-KHR.


See PHYSICAL-DEVICE-ZERO-INITIALIZE-WORKGROUP-MEMORY-FEATURES-KHR"
  (make-instance 'vk:physical-device-zero-initialize-workgroup-memory-features-khr 
                 :next next
                 :shader-zero-initialize-workgroup-memory shader-zero-initialize-workgroup-memory))

(defun make-physical-device-shader-subgroup-uniform-control-flow-features-khr (&key
                                                                               (next nil)
                                                                               (shader-subgroup-uniform-control-flow nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-SUBGROUP-UNIFORM-CONTROL-FLOW-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-SUBGROUP-UNIFORM-CONTROL-FLOW-FEATURES-KHR.


See PHYSICAL-DEVICE-SHADER-SUBGROUP-UNIFORM-CONTROL-FLOW-FEATURES-KHR"
  (make-instance 'vk:physical-device-shader-subgroup-uniform-control-flow-features-khr 
                 :next next
                 :shader-subgroup-uniform-control-flow shader-subgroup-uniform-control-flow))

(defun make-physical-device-robustness-2-features-ext (&key (next nil)
                                                       (robust-buffer-access-2 nil)
                                                       (robust-image-access-2 nil)
                                                       (null-descriptor nil))
"Creates an instance of PHYSICAL-DEVICE-ROBUSTNESS-2-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ROBUSTNESS-2-FEATURES-EXT.


See PHYSICAL-DEVICE-ROBUSTNESS-2-FEATURES-EXT"
  (make-instance 'vk:physical-device-robustness-2-features-ext 
                 :next next
                 :robust-buffer-access-2 robust-buffer-access-2
                 :robust-image-access-2 robust-image-access-2
                 :null-descriptor null-descriptor))

(defun make-physical-device-robustness-2-properties-ext (&key (next nil)
                                                         (robust-storage-buffer-access-size-alignment 0)
                                                         (robust-uniform-buffer-access-size-alignment 0))
"Creates an instance of PHYSICAL-DEVICE-ROBUSTNESS-2-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-ROBUSTNESS-2-PROPERTIES-EXT.


See PHYSICAL-DEVICE-ROBUSTNESS-2-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-robustness-2-properties-ext 
                 :next next
                 :robust-storage-buffer-access-size-alignment robust-storage-buffer-access-size-alignment
                 :robust-uniform-buffer-access-size-alignment robust-uniform-buffer-access-size-alignment))

(defun make-physical-device-image-robustness-features-ext (&key (next nil)
                                                           (robust-image-access nil))
"Creates an instance of PHYSICAL-DEVICE-IMAGE-ROBUSTNESS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-IMAGE-ROBUSTNESS-FEATURES-EXT.


See PHYSICAL-DEVICE-IMAGE-ROBUSTNESS-FEATURES-EXT"
  (make-instance 'vk:physical-device-image-robustness-features-ext 
                 :next next
                 :robust-image-access robust-image-access))

(defun make-physical-device-workgroup-memory-explicit-layout-features-khr (&key
                                                                           (next nil)
                                                                           (workgroup-memory-explicit-layout nil)
                                                                           (workgroup-memory-explicit-layout-scalar-block-layout nil)
                                                                           (workgroup-memory-explicit-layout-8-bit-access nil)
                                                                           (workgroup-memory-explicit-layout-16-bit-access nil))
"Creates an instance of PHYSICAL-DEVICE-WORKGROUP-MEMORY-EXPLICIT-LAYOUT-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-WORKGROUP-MEMORY-EXPLICIT-LAYOUT-FEATURES-KHR.


See PHYSICAL-DEVICE-WORKGROUP-MEMORY-EXPLICIT-LAYOUT-FEATURES-KHR"
  (make-instance 'vk:physical-device-workgroup-memory-explicit-layout-features-khr 
                 :next next
                 :workgroup-memory-explicit-layout workgroup-memory-explicit-layout
                 :workgroup-memory-explicit-layout-scalar-block-layout workgroup-memory-explicit-layout-scalar-block-layout
                 :workgroup-memory-explicit-layout-8-bit-access workgroup-memory-explicit-layout-8-bit-access
                 :workgroup-memory-explicit-layout-16-bit-access workgroup-memory-explicit-layout-16-bit-access))

(defun make-physical-device-portability-subset-features-khr (&key (next nil)
                                                             (constant-alpha-color-blend-factors nil)
                                                             (events nil)
                                                             (image-view-format-reinterpretation nil)
                                                             (image-view-format-swizzle nil)
                                                             (image-view-2d-on-3d-image nil)
                                                             (multisample-array-image nil)
                                                             (mutable-comparison-samplers nil)
                                                             (point-polygons nil)
                                                             (sampler-mip-lod-bias nil)
                                                             (separate-stencil-mask-ref nil)
                                                             (shader-sample-rate-interpolation-functions nil)
                                                             (tessellation-isolines nil)
                                                             (tessellation-point-mode nil)
                                                             (triangle-fans nil)
                                                             (vertex-attribute-access-beyond-stride nil))
"Creates an instance of PHYSICAL-DEVICE-PORTABILITY-SUBSET-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PORTABILITY-SUBSET-FEATURES-KHR.


See PHYSICAL-DEVICE-PORTABILITY-SUBSET-FEATURES-KHR"
  (make-instance 'vk:physical-device-portability-subset-features-khr 
                 :next next
                 :constant-alpha-color-blend-factors constant-alpha-color-blend-factors
                 :events events
                 :image-view-format-reinterpretation image-view-format-reinterpretation
                 :image-view-format-swizzle image-view-format-swizzle
                 :image-view-2d-on-3d-image image-view-2d-on-3d-image
                 :multisample-array-image multisample-array-image
                 :mutable-comparison-samplers mutable-comparison-samplers
                 :point-polygons point-polygons
                 :sampler-mip-lod-bias sampler-mip-lod-bias
                 :separate-stencil-mask-ref separate-stencil-mask-ref
                 :shader-sample-rate-interpolation-functions shader-sample-rate-interpolation-functions
                 :tessellation-isolines tessellation-isolines
                 :tessellation-point-mode tessellation-point-mode
                 :triangle-fans triangle-fans
                 :vertex-attribute-access-beyond-stride vertex-attribute-access-beyond-stride))

(defun make-physical-device-portability-subset-properties-khr (&key (next nil)
                                                               (min-vertex-input-binding-stride-alignment 0))
"Creates an instance of PHYSICAL-DEVICE-PORTABILITY-SUBSET-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PORTABILITY-SUBSET-PROPERTIES-KHR.


See PHYSICAL-DEVICE-PORTABILITY-SUBSET-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-portability-subset-properties-khr 
                 :next next
                 :min-vertex-input-binding-stride-alignment min-vertex-input-binding-stride-alignment))

(defun make-physical-device-4444-formats-features-ext (&key (next nil)
                                                       (format-a4r4g4b4 nil)
                                                       (format-a4b4g4r4 nil))
"Creates an instance of PHYSICAL-DEVICE-4444-FORMATS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-4444-FORMATS-FEATURES-EXT.


See PHYSICAL-DEVICE-4444-FORMATS-FEATURES-EXT"
  (make-instance 'vk:physical-device-4444-formats-features-ext 
                 :next next
                 :format-a4r4g4b4 format-a4r4g4b4
                 :format-a4b4g4r4 format-a4b4g4r4))

(defun make-physical-device-subpass-shading-features-huawei (&key (next nil)
                                                             (subpass-shading nil))
"Creates an instance of PHYSICAL-DEVICE-SUBPASS-SHADING-FEATURES-HUAWEI.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SUBPASS-SHADING-FEATURES-HUAWEI.


See PHYSICAL-DEVICE-SUBPASS-SHADING-FEATURES-HUAWEI"
  (make-instance 'vk:physical-device-subpass-shading-features-huawei 
                 :next next
                 :subpass-shading subpass-shading))

(defun make-buffer-copy-2-khr (&key (next nil) (src-offset 0) (dst-offset 0)
                               (size 0))
"Creates an instance of BUFFER-COPY-2-KHR.
The arguments of this function correspond to the slots of BUFFER-COPY-2-KHR.


See BUFFER-COPY-2-KHR"
  (make-instance 'vk:buffer-copy-2-khr 
                 :next next
                 :src-offset src-offset
                 :dst-offset dst-offset
                 :size size))

(defun make-image-copy-2-khr (&key (next nil)
                              (src-subresource (vk:make-image-subresource-layers))
                              (src-offset (vk:make-offset-3d))
                              (dst-subresource (vk:make-image-subresource-layers))
                              (dst-offset (vk:make-offset-3d))
                              (extent (vk:make-extent-3d)))
"Creates an instance of IMAGE-COPY-2-KHR.
The arguments of this function correspond to the slots of IMAGE-COPY-2-KHR.


See IMAGE-COPY-2-KHR"
  (make-instance 'vk:image-copy-2-khr 
                 :next next
                 :src-subresource src-subresource
                 :src-offset src-offset
                 :dst-subresource dst-subresource
                 :dst-offset dst-offset
                 :extent extent))

(defun make-image-blit-2-khr (&key (next nil)
                              (src-subresource (vk:make-image-subresource-layers))
                              (src-offsets (vk:make-offset-3d))
                              (dst-subresource (vk:make-image-subresource-layers))
                              (dst-offsets (vk:make-offset-3d)))
"Creates an instance of IMAGE-BLIT-2-KHR.
The arguments of this function correspond to the slots of IMAGE-BLIT-2-KHR.


See IMAGE-BLIT-2-KHR"
  (make-instance 'vk:image-blit-2-khr 
                 :next next
                 :src-subresource src-subresource
                 :src-offsets src-offsets
                 :dst-subresource dst-subresource
                 :dst-offsets dst-offsets))

(defun make-buffer-image-copy-2-khr (&key (next nil) (buffer-offset 0)
                                     (buffer-row-length 0)
                                     (buffer-image-height 0)
                                     (image-subresource (vk:make-image-subresource-layers))
                                     (image-offset (vk:make-offset-3d))
                                     (image-extent (vk:make-extent-3d)))
"Creates an instance of BUFFER-IMAGE-COPY-2-KHR.
The arguments of this function correspond to the slots of BUFFER-IMAGE-COPY-2-KHR.


See BUFFER-IMAGE-COPY-2-KHR"
  (make-instance 'vk:buffer-image-copy-2-khr 
                 :next next
                 :buffer-offset buffer-offset
                 :buffer-row-length buffer-row-length
                 :buffer-image-height buffer-image-height
                 :image-subresource image-subresource
                 :image-offset image-offset
                 :image-extent image-extent))

(defun make-image-resolve-2-khr (&key (next nil)
                                 (src-subresource (vk:make-image-subresource-layers))
                                 (src-offset (vk:make-offset-3d))
                                 (dst-subresource (vk:make-image-subresource-layers))
                                 (dst-offset (vk:make-offset-3d))
                                 (extent (vk:make-extent-3d)))
"Creates an instance of IMAGE-RESOLVE-2-KHR.
The arguments of this function correspond to the slots of IMAGE-RESOLVE-2-KHR.


See IMAGE-RESOLVE-2-KHR"
  (make-instance 'vk:image-resolve-2-khr 
                 :next next
                 :src-subresource src-subresource
                 :src-offset src-offset
                 :dst-subresource dst-subresource
                 :dst-offset dst-offset
                 :extent extent))

(defun make-copy-buffer-info-2-khr (&key (next nil) (src-buffer nil)
                                    (dst-buffer nil) (regions nil))
"Creates an instance of COPY-BUFFER-INFO-2-KHR.
The arguments of this function correspond to the slots of COPY-BUFFER-INFO-2-KHR.


See COPY-BUFFER-INFO-2-KHR"
  (make-instance 'vk:copy-buffer-info-2-khr 
                 :next next
                 :src-buffer src-buffer
                 :dst-buffer dst-buffer
                 :regions regions))

(defun make-copy-image-info-2-khr (&key (next nil) (src-image nil)
                                   (src-image-layout nil) (dst-image nil)
                                   (dst-image-layout nil) (regions nil))
"Creates an instance of COPY-IMAGE-INFO-2-KHR.
The arguments of this function correspond to the slots of COPY-IMAGE-INFO-2-KHR.


See COPY-IMAGE-INFO-2-KHR"
  (make-instance 'vk:copy-image-info-2-khr 
                 :next next
                 :src-image src-image
                 :src-image-layout src-image-layout
                 :dst-image dst-image
                 :dst-image-layout dst-image-layout
                 :regions regions))

(defun make-blit-image-info-2-khr (&key (next nil) (src-image nil)
                                   (src-image-layout nil) (dst-image nil)
                                   (dst-image-layout nil) (regions nil)
                                   (filter nil))
"Creates an instance of BLIT-IMAGE-INFO-2-KHR.
The arguments of this function correspond to the slots of BLIT-IMAGE-INFO-2-KHR.


See BLIT-IMAGE-INFO-2-KHR"
  (make-instance 'vk:blit-image-info-2-khr 
                 :next next
                 :src-image src-image
                 :src-image-layout src-image-layout
                 :dst-image dst-image
                 :dst-image-layout dst-image-layout
                 :regions regions
                 :filter filter))

(defun make-copy-buffer-to-image-info-2-khr (&key (next nil) (src-buffer nil)
                                             (dst-image nil)
                                             (dst-image-layout nil)
                                             (regions nil))
"Creates an instance of COPY-BUFFER-TO-IMAGE-INFO-2-KHR.
The arguments of this function correspond to the slots of COPY-BUFFER-TO-IMAGE-INFO-2-KHR.


See COPY-BUFFER-TO-IMAGE-INFO-2-KHR"
  (make-instance 'vk:copy-buffer-to-image-info-2-khr 
                 :next next
                 :src-buffer src-buffer
                 :dst-image dst-image
                 :dst-image-layout dst-image-layout
                 :regions regions))

(defun make-copy-image-to-buffer-info-2-khr (&key (next nil) (src-image nil)
                                             (src-image-layout nil)
                                             (dst-buffer nil) (regions nil))
"Creates an instance of COPY-IMAGE-TO-BUFFER-INFO-2-KHR.
The arguments of this function correspond to the slots of COPY-IMAGE-TO-BUFFER-INFO-2-KHR.


See COPY-IMAGE-TO-BUFFER-INFO-2-KHR"
  (make-instance 'vk:copy-image-to-buffer-info-2-khr 
                 :next next
                 :src-image src-image
                 :src-image-layout src-image-layout
                 :dst-buffer dst-buffer
                 :regions regions))

(defun make-resolve-image-info-2-khr (&key (next nil) (src-image nil)
                                      (src-image-layout nil) (dst-image nil)
                                      (dst-image-layout nil) (regions nil))
"Creates an instance of RESOLVE-IMAGE-INFO-2-KHR.
The arguments of this function correspond to the slots of RESOLVE-IMAGE-INFO-2-KHR.


See RESOLVE-IMAGE-INFO-2-KHR"
  (make-instance 'vk:resolve-image-info-2-khr 
                 :next next
                 :src-image src-image
                 :src-image-layout src-image-layout
                 :dst-image dst-image
                 :dst-image-layout dst-image-layout
                 :regions regions))

(defun make-physical-device-shader-image-atomic-int-64-features-ext (&key
                                                                     (next nil)
                                                                     (shader-image-int-64-atomics nil)
                                                                     (sparse-image-int-64-atomics nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-IMAGE-ATOMIC-INT-64-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-IMAGE-ATOMIC-INT-64-FEATURES-EXT.


See PHYSICAL-DEVICE-SHADER-IMAGE-ATOMIC-INT-64-FEATURES-EXT"
  (make-instance 'vk:physical-device-shader-image-atomic-int-64-features-ext 
                 :next next
                 :shader-image-int-64-atomics shader-image-int-64-atomics
                 :sparse-image-int-64-atomics sparse-image-int-64-atomics))

(defun make-fragment-shading-rate-attachment-info-khr (&key (next nil)
                                                       (fragment-shading-rate-attachment nil)
                                                       (shading-rate-attachment-texel-size (vk:make-extent-2d)))
"Creates an instance of FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR.
The arguments of this function correspond to the slots of FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR.


See FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR"
  (make-instance 'vk:fragment-shading-rate-attachment-info-khr 
                 :next next
                 :fragment-shading-rate-attachment fragment-shading-rate-attachment
                 :shading-rate-attachment-texel-size shading-rate-attachment-texel-size))

(defun make-pipeline-fragment-shading-rate-state-create-info-khr (&key
                                                                  (next nil)
                                                                  (fragment-size (vk:make-extent-2d))
                                                                  (combiner-ops nil))
"Creates an instance of PIPELINE-FRAGMENT-SHADING-RATE-STATE-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of PIPELINE-FRAGMENT-SHADING-RATE-STATE-CREATE-INFO-KHR.


See PIPELINE-FRAGMENT-SHADING-RATE-STATE-CREATE-INFO-KHR"
  (make-instance 'vk:pipeline-fragment-shading-rate-state-create-info-khr 
                 :next next
                 :fragment-size fragment-size
                 :combiner-ops combiner-ops))

(defun make-physical-device-fragment-shading-rate-features-khr (&key (next nil)
                                                                (pipeline-fragment-shading-rate nil)
                                                                (primitive-fragment-shading-rate nil)
                                                                (attachment-fragment-shading-rate nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-FEATURES-KHR.


See PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-FEATURES-KHR"
  (make-instance 'vk:physical-device-fragment-shading-rate-features-khr 
                 :next next
                 :pipeline-fragment-shading-rate pipeline-fragment-shading-rate
                 :primitive-fragment-shading-rate primitive-fragment-shading-rate
                 :attachment-fragment-shading-rate attachment-fragment-shading-rate))

(defun make-physical-device-fragment-shading-rate-properties-khr (&key
                                                                  (next nil)
                                                                  (min-fragment-shading-rate-attachment-texel-size (vk:make-extent-2d))
                                                                  (max-fragment-shading-rate-attachment-texel-size (vk:make-extent-2d))
                                                                  (max-fragment-shading-rate-attachment-texel-size-aspect-ratio 0)
                                                                  (primitive-fragment-shading-rate-with-multiple-viewports nil)
                                                                  (layered-shading-rate-attachments nil)
                                                                  (fragment-shading-rate-non-trivial-combiner-ops nil)
                                                                  (max-fragment-size (vk:make-extent-2d))
                                                                  (max-fragment-size-aspect-ratio 0)
                                                                  (max-fragment-shading-rate-coverage-samples 0)
                                                                  (max-fragment-shading-rate-rasterization-samples nil)
                                                                  (fragment-shading-rate-with-shader-depth-stencil-writes nil)
                                                                  (fragment-shading-rate-with-sample-mask nil)
                                                                  (fragment-shading-rate-with-shader-sample-mask nil)
                                                                  (fragment-shading-rate-with-conservative-rasterization nil)
                                                                  (fragment-shading-rate-with-fragment-shader-interlock nil)
                                                                  (fragment-shading-rate-with-custom-sample-locations nil)
                                                                  (fragment-shading-rate-strict-multiply-combiner nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-PROPERTIES-KHR.


See PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-fragment-shading-rate-properties-khr 
                 :next next
                 :min-fragment-shading-rate-attachment-texel-size min-fragment-shading-rate-attachment-texel-size
                 :max-fragment-shading-rate-attachment-texel-size max-fragment-shading-rate-attachment-texel-size
                 :max-fragment-shading-rate-attachment-texel-size-aspect-ratio max-fragment-shading-rate-attachment-texel-size-aspect-ratio
                 :primitive-fragment-shading-rate-with-multiple-viewports primitive-fragment-shading-rate-with-multiple-viewports
                 :layered-shading-rate-attachments layered-shading-rate-attachments
                 :fragment-shading-rate-non-trivial-combiner-ops fragment-shading-rate-non-trivial-combiner-ops
                 :max-fragment-size max-fragment-size
                 :max-fragment-size-aspect-ratio max-fragment-size-aspect-ratio
                 :max-fragment-shading-rate-coverage-samples max-fragment-shading-rate-coverage-samples
                 :max-fragment-shading-rate-rasterization-samples max-fragment-shading-rate-rasterization-samples
                 :fragment-shading-rate-with-shader-depth-stencil-writes fragment-shading-rate-with-shader-depth-stencil-writes
                 :fragment-shading-rate-with-sample-mask fragment-shading-rate-with-sample-mask
                 :fragment-shading-rate-with-shader-sample-mask fragment-shading-rate-with-shader-sample-mask
                 :fragment-shading-rate-with-conservative-rasterization fragment-shading-rate-with-conservative-rasterization
                 :fragment-shading-rate-with-fragment-shader-interlock fragment-shading-rate-with-fragment-shader-interlock
                 :fragment-shading-rate-with-custom-sample-locations fragment-shading-rate-with-custom-sample-locations
                 :fragment-shading-rate-strict-multiply-combiner fragment-shading-rate-strict-multiply-combiner))

(defun make-physical-device-fragment-shading-rate-khr (&key (next nil)
                                                       (sample-counts nil)
                                                       (fragment-size (vk:make-extent-2d)))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-KHR.


See PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-KHR"
  (make-instance 'vk:physical-device-fragment-shading-rate-khr 
                 :next next
                 :sample-counts sample-counts
                 :fragment-size fragment-size))

(defun make-physical-device-shader-terminate-invocation-features-khr (&key
                                                                      (next nil)
                                                                      (shader-terminate-invocation nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-TERMINATE-INVOCATION-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-TERMINATE-INVOCATION-FEATURES-KHR.


See PHYSICAL-DEVICE-SHADER-TERMINATE-INVOCATION-FEATURES-KHR"
  (make-instance 'vk:physical-device-shader-terminate-invocation-features-khr 
                 :next next
                 :shader-terminate-invocation shader-terminate-invocation))

(defun make-physical-device-fragment-shading-rate-enums-features-nv (&key
                                                                     (next nil)
                                                                     (fragment-shading-rate-enums nil)
                                                                     (supersample-fragment-shading-rates nil)
                                                                     (no-invocation-fragment-shading-rates nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-FEATURES-NV.


See PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-FEATURES-NV"
  (make-instance 'vk:physical-device-fragment-shading-rate-enums-features-nv 
                 :next next
                 :fragment-shading-rate-enums fragment-shading-rate-enums
                 :supersample-fragment-shading-rates supersample-fragment-shading-rates
                 :no-invocation-fragment-shading-rates no-invocation-fragment-shading-rates))

(defun make-physical-device-fragment-shading-rate-enums-properties-nv (&key
                                                                       (next nil)
                                                                       (max-fragment-shading-rate-invocation-count nil))
"Creates an instance of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-PROPERTIES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-PROPERTIES-NV.


See PHYSICAL-DEVICE-FRAGMENT-SHADING-RATE-ENUMS-PROPERTIES-NV"
  (make-instance 'vk:physical-device-fragment-shading-rate-enums-properties-nv 
                 :next next
                 :max-fragment-shading-rate-invocation-count max-fragment-shading-rate-invocation-count))

(defun make-pipeline-fragment-shading-rate-enum-state-create-info-nv (&key
                                                                      (next nil)
                                                                      (shading-rate-type nil)
                                                                      (shading-rate nil)
                                                                      (combiner-ops nil))
"Creates an instance of PIPELINE-FRAGMENT-SHADING-RATE-ENUM-STATE-CREATE-INFO-NV.
The arguments of this function correspond to the slots of PIPELINE-FRAGMENT-SHADING-RATE-ENUM-STATE-CREATE-INFO-NV.


See PIPELINE-FRAGMENT-SHADING-RATE-ENUM-STATE-CREATE-INFO-NV"
  (make-instance 'vk:pipeline-fragment-shading-rate-enum-state-create-info-nv 
                 :next next
                 :shading-rate-type shading-rate-type
                 :shading-rate shading-rate
                 :combiner-ops combiner-ops))

(defun make-acceleration-structure-build-sizes-info-khr (&key (next nil)
                                                         (acceleration-structure-size 0)
                                                         (update-scratch-size 0)
                                                         (build-scratch-size 0))
"Creates an instance of ACCELERATION-STRUCTURE-BUILD-SIZES-INFO-KHR.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-BUILD-SIZES-INFO-KHR.


See ACCELERATION-STRUCTURE-BUILD-SIZES-INFO-KHR"
  (make-instance 'vk:acceleration-structure-build-sizes-info-khr 
                 :next next
                 :acceleration-structure-size acceleration-structure-size
                 :update-scratch-size update-scratch-size
                 :build-scratch-size build-scratch-size))

(defun make-physical-device-mutable-descriptor-type-features-valve (&key
                                                                    (next nil)
                                                                    (mutable-descriptor-type nil))
"Creates an instance of PHYSICAL-DEVICE-MUTABLE-DESCRIPTOR-TYPE-FEATURES-VALVE.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-MUTABLE-DESCRIPTOR-TYPE-FEATURES-VALVE.


See PHYSICAL-DEVICE-MUTABLE-DESCRIPTOR-TYPE-FEATURES-VALVE"
  (make-instance 'vk:physical-device-mutable-descriptor-type-features-valve 
                 :next next
                 :mutable-descriptor-type mutable-descriptor-type))

(defun make-mutable-descriptor-type-list-valve (&key (descriptor-types nil))
"Creates an instance of MUTABLE-DESCRIPTOR-TYPE-LIST-VALVE.
The arguments of this function correspond to the slots of MUTABLE-DESCRIPTOR-TYPE-LIST-VALVE.


See MUTABLE-DESCRIPTOR-TYPE-LIST-VALVE"
  (make-instance 'vk:mutable-descriptor-type-list-valve 
                 :descriptor-types descriptor-types))

(defun make-mutable-descriptor-type-create-info-valve (&key (next nil)
                                                       (mutable-descriptor-type-lists nil))
"Creates an instance of MUTABLE-DESCRIPTOR-TYPE-CREATE-INFO-VALVE.
The arguments of this function correspond to the slots of MUTABLE-DESCRIPTOR-TYPE-CREATE-INFO-VALVE.


See MUTABLE-DESCRIPTOR-TYPE-CREATE-INFO-VALVE"
  (make-instance 'vk:mutable-descriptor-type-create-info-valve 
                 :next next
                 :mutable-descriptor-type-lists mutable-descriptor-type-lists))

(defun make-physical-device-vertex-input-dynamic-state-features-ext (&key
                                                                     (next nil)
                                                                     (vertex-input-dynamic-state nil))
"Creates an instance of PHYSICAL-DEVICE-VERTEX-INPUT-DYNAMIC-STATE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VERTEX-INPUT-DYNAMIC-STATE-FEATURES-EXT.


See PHYSICAL-DEVICE-VERTEX-INPUT-DYNAMIC-STATE-FEATURES-EXT"
  (make-instance 'vk:physical-device-vertex-input-dynamic-state-features-ext 
                 :next next
                 :vertex-input-dynamic-state vertex-input-dynamic-state))

(defun make-physical-device-external-memory-r-d-m-a-features-nv (&key
                                                                 (next nil)
                                                                 (external-memory-r-d-m-a nil))
"Creates an instance of PHYSICAL-DEVICE-EXTERNAL-MEMORY-R-D-M-A-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-EXTERNAL-MEMORY-R-D-M-A-FEATURES-NV.


See PHYSICAL-DEVICE-EXTERNAL-MEMORY-R-D-M-A-FEATURES-NV"
  (make-instance 'vk:physical-device-external-memory-r-d-m-a-features-nv 
                 :next next
                 :external-memory-r-d-m-a external-memory-r-d-m-a))

(defun make-vertex-input-binding-description-2-ext (&key (next nil) (binding 0)
                                                    (stride 0) (input-rate nil)
                                                    (divisor 0))
"Creates an instance of VERTEX-INPUT-BINDING-DESCRIPTION-2-EXT.
The arguments of this function correspond to the slots of VERTEX-INPUT-BINDING-DESCRIPTION-2-EXT.


See VERTEX-INPUT-BINDING-DESCRIPTION-2-EXT"
  (make-instance 'vk:vertex-input-binding-description-2-ext 
                 :next next
                 :binding binding
                 :stride stride
                 :input-rate input-rate
                 :divisor divisor))

(defun make-vertex-input-attribute-description-2-ext (&key (next nil)
                                                      (location 0) (binding 0)
                                                      (format nil) (offset 0))
"Creates an instance of VERTEX-INPUT-ATTRIBUTE-DESCRIPTION-2-EXT.
The arguments of this function correspond to the slots of VERTEX-INPUT-ATTRIBUTE-DESCRIPTION-2-EXT.


See VERTEX-INPUT-ATTRIBUTE-DESCRIPTION-2-EXT"
  (make-instance 'vk:vertex-input-attribute-description-2-ext 
                 :next next
                 :location location
                 :binding binding
                 :format format
                 :offset offset))

(defun make-physical-device-color-write-enable-features-ext (&key (next nil)
                                                             (color-write-enable nil))
"Creates an instance of PHYSICAL-DEVICE-COLOR-WRITE-ENABLE-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-COLOR-WRITE-ENABLE-FEATURES-EXT.


See PHYSICAL-DEVICE-COLOR-WRITE-ENABLE-FEATURES-EXT"
  (make-instance 'vk:physical-device-color-write-enable-features-ext 
                 :next next
                 :color-write-enable color-write-enable))

(defun make-pipeline-color-write-create-info-ext (&key (next nil)
                                                  (color-write-enables nil))
"Creates an instance of PIPELINE-COLOR-WRITE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-COLOR-WRITE-CREATE-INFO-EXT.


See PIPELINE-COLOR-WRITE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-color-write-create-info-ext 
                 :next next
                 :color-write-enables color-write-enables))

(defun make-memory-barrier-2-khr (&key (next nil) (src-stage-mask nil)
                                  (src-access-mask nil) (dst-stage-mask nil)
                                  (dst-access-mask nil))
"Creates an instance of MEMORY-BARRIER-2-KHR.
The arguments of this function correspond to the slots of MEMORY-BARRIER-2-KHR.


See MEMORY-BARRIER-2-KHR"
  (make-instance 'vk:memory-barrier-2-khr 
                 :next next
                 :src-stage-mask src-stage-mask
                 :src-access-mask src-access-mask
                 :dst-stage-mask dst-stage-mask
                 :dst-access-mask dst-access-mask))

(defun make-image-memory-barrier-2-khr (&key (next nil) (src-stage-mask nil)
                                        (src-access-mask nil)
                                        (dst-stage-mask nil)
                                        (dst-access-mask nil) (old-layout nil)
                                        (new-layout nil)
                                        (src-queue-family-index 0)
                                        (dst-queue-family-index 0) (image nil)
                                        (subresource-range (vk:make-image-subresource-range)))
"Creates an instance of IMAGE-MEMORY-BARRIER-2-KHR.
The arguments of this function correspond to the slots of IMAGE-MEMORY-BARRIER-2-KHR.


See IMAGE-MEMORY-BARRIER-2-KHR"
  (make-instance 'vk:image-memory-barrier-2-khr 
                 :next next
                 :src-stage-mask src-stage-mask
                 :src-access-mask src-access-mask
                 :dst-stage-mask dst-stage-mask
                 :dst-access-mask dst-access-mask
                 :old-layout old-layout
                 :new-layout new-layout
                 :src-queue-family-index src-queue-family-index
                 :dst-queue-family-index dst-queue-family-index
                 :image image
                 :subresource-range subresource-range))

(defun make-buffer-memory-barrier-2-khr (&key (next nil) (src-stage-mask nil)
                                         (src-access-mask nil)
                                         (dst-stage-mask nil)
                                         (dst-access-mask nil)
                                         (src-queue-family-index 0)
                                         (dst-queue-family-index 0)
                                         (buffer nil) (offset 0) (size 0))
"Creates an instance of BUFFER-MEMORY-BARRIER-2-KHR.
The arguments of this function correspond to the slots of BUFFER-MEMORY-BARRIER-2-KHR.


See BUFFER-MEMORY-BARRIER-2-KHR"
  (make-instance 'vk:buffer-memory-barrier-2-khr 
                 :next next
                 :src-stage-mask src-stage-mask
                 :src-access-mask src-access-mask
                 :dst-stage-mask dst-stage-mask
                 :dst-access-mask dst-access-mask
                 :src-queue-family-index src-queue-family-index
                 :dst-queue-family-index dst-queue-family-index
                 :buffer buffer
                 :offset offset
                 :size size))

(defun make-dependency-info-khr (&key (next nil) (dependency-flags nil)
                                 (memory-barriers nil)
                                 (buffer-memory-barriers nil)
                                 (image-memory-barriers nil))
"Creates an instance of DEPENDENCY-INFO-KHR.
The arguments of this function correspond to the slots of DEPENDENCY-INFO-KHR.


See DEPENDENCY-INFO-KHR"
  (make-instance 'vk:dependency-info-khr 
                 :next next
                 :dependency-flags dependency-flags
                 :memory-barriers memory-barriers
                 :buffer-memory-barriers buffer-memory-barriers
                 :image-memory-barriers image-memory-barriers))

(defun make-semaphore-submit-info-khr (&key (next nil) (semaphore nil)
                                       (value 0) (stage-mask nil)
                                       (device-index 0))
"Creates an instance of SEMAPHORE-SUBMIT-INFO-KHR.
The arguments of this function correspond to the slots of SEMAPHORE-SUBMIT-INFO-KHR.


See SEMAPHORE-SUBMIT-INFO-KHR"
  (make-instance 'vk:semaphore-submit-info-khr 
                 :next next
                 :semaphore semaphore
                 :value value
                 :stage-mask stage-mask
                 :device-index device-index))

(defun make-command-buffer-submit-info-khr (&key (next nil)
                                            (command-buffer nil)
                                            (device-mask 0))
"Creates an instance of COMMAND-BUFFER-SUBMIT-INFO-KHR.
The arguments of this function correspond to the slots of COMMAND-BUFFER-SUBMIT-INFO-KHR.


See COMMAND-BUFFER-SUBMIT-INFO-KHR"
  (make-instance 'vk:command-buffer-submit-info-khr 
                 :next next
                 :command-buffer command-buffer
                 :device-mask device-mask))

(defun make-submit-info-2-khr (&key (next nil) (flags nil)
                               (wait-semaphore-infos nil)
                               (command-buffer-infos nil)
                               (signal-semaphore-infos nil))
"Creates an instance of SUBMIT-INFO-2-KHR.
The arguments of this function correspond to the slots of SUBMIT-INFO-2-KHR.


See SUBMIT-INFO-2-KHR"
  (make-instance 'vk:submit-info-2-khr 
                 :next next
                 :flags flags
                 :wait-semaphore-infos wait-semaphore-infos
                 :command-buffer-infos command-buffer-infos
                 :signal-semaphore-infos signal-semaphore-infos))

(defun make-queue-family-checkpoint-properties-2-nv (&key (next nil)
                                                     (checkpoint-execution-stage-mask nil))
"Creates an instance of QUEUE-FAMILY-CHECKPOINT-PROPERTIES-2-NV.
The arguments of this function correspond to the slots of QUEUE-FAMILY-CHECKPOINT-PROPERTIES-2-NV.


See QUEUE-FAMILY-CHECKPOINT-PROPERTIES-2-NV"
  (make-instance 'vk:queue-family-checkpoint-properties-2-nv 
                 :next next
                 :checkpoint-execution-stage-mask checkpoint-execution-stage-mask))

(defun make-checkpoint-data-2-nv (&key (next nil) (stage nil)
                                  (checkpoint-marker nil))
"Creates an instance of CHECKPOINT-DATA-2-NV.
The arguments of this function correspond to the slots of CHECKPOINT-DATA-2-NV.


See CHECKPOINT-DATA-2-NV"
  (make-instance 'vk:checkpoint-data-2-nv 
                 :next next
                 :stage stage
                 :checkpoint-marker checkpoint-marker))

(defun make-physical-device-synchronization-2-features-khr (&key (next nil)
                                                            (synchronization-2 nil))
"Creates an instance of PHYSICAL-DEVICE-SYNCHRONIZATION-2-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SYNCHRONIZATION-2-FEATURES-KHR.


See PHYSICAL-DEVICE-SYNCHRONIZATION-2-FEATURES-KHR"
  (make-instance 'vk:physical-device-synchronization-2-features-khr 
                 :next next
                 :synchronization-2 synchronization-2))

(defun make-video-queue-family-properties-2-khr (&key (next nil)
                                                 (video-codec-operations nil))
"Creates an instance of VIDEO-QUEUE-FAMILY-PROPERTIES-2-KHR.
The arguments of this function correspond to the slots of VIDEO-QUEUE-FAMILY-PROPERTIES-2-KHR.


See VIDEO-QUEUE-FAMILY-PROPERTIES-2-KHR"
  (make-instance 'vk:video-queue-family-properties-2-khr 
                 :next next
                 :video-codec-operations video-codec-operations))

(defun make-video-profiles-khr (&key (next nil) (profile-count 0)
                                (profiles nil))
"Creates an instance of VIDEO-PROFILES-KHR.
The arguments of this function correspond to the slots of VIDEO-PROFILES-KHR.


See VIDEO-PROFILES-KHR"
  (make-instance 'vk:video-profiles-khr 
                 :next next
                 :profile-count profile-count
                 :profiles profiles))

(defun make-physical-device-video-format-info-khr (&key (next nil)
                                                   (image-usage nil)
                                                   (video-profiles nil))
"Creates an instance of PHYSICAL-DEVICE-VIDEO-FORMAT-INFO-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-VIDEO-FORMAT-INFO-KHR.


See PHYSICAL-DEVICE-VIDEO-FORMAT-INFO-KHR"
  (make-instance 'vk:physical-device-video-format-info-khr 
                 :next next
                 :image-usage image-usage
                 :video-profiles video-profiles))

(defun make-video-format-properties-khr (&key (next nil) (format nil))
"Creates an instance of VIDEO-FORMAT-PROPERTIES-KHR.
The arguments of this function correspond to the slots of VIDEO-FORMAT-PROPERTIES-KHR.


See VIDEO-FORMAT-PROPERTIES-KHR"
  (make-instance 'vk:video-format-properties-khr 
                 :next next
                 :format format))

(defun make-video-profile-khr (&key (next nil) (video-codec-operation nil)
                               (chroma-subsampling nil) (luma-bit-depth nil)
                               (chroma-bit-depth nil))
"Creates an instance of VIDEO-PROFILE-KHR.
The arguments of this function correspond to the slots of VIDEO-PROFILE-KHR.


See VIDEO-PROFILE-KHR"
  (make-instance 'vk:video-profile-khr 
                 :next next
                 :video-codec-operation video-codec-operation
                 :chroma-subsampling chroma-subsampling
                 :luma-bit-depth luma-bit-depth
                 :chroma-bit-depth chroma-bit-depth))

(defun make-video-capabilities-khr (&key (next nil) (capability-flags nil)
                                    (min-bitstream-buffer-offset-alignment 0)
                                    (min-bitstream-buffer-size-alignment 0)
                                    (video-picture-extent-granularity (vk:make-extent-2d))
                                    (min-extent (vk:make-extent-2d))
                                    (max-extent (vk:make-extent-2d))
                                    (max-reference-pictures-slots-count 0)
                                    (max-reference-pictures-active-count 0))
"Creates an instance of VIDEO-CAPABILITIES-KHR.
The arguments of this function correspond to the slots of VIDEO-CAPABILITIES-KHR.


See VIDEO-CAPABILITIES-KHR"
  (make-instance 'vk:video-capabilities-khr 
                 :next next
                 :capability-flags capability-flags
                 :min-bitstream-buffer-offset-alignment min-bitstream-buffer-offset-alignment
                 :min-bitstream-buffer-size-alignment min-bitstream-buffer-size-alignment
                 :video-picture-extent-granularity video-picture-extent-granularity
                 :min-extent min-extent
                 :max-extent max-extent
                 :max-reference-pictures-slots-count max-reference-pictures-slots-count
                 :max-reference-pictures-active-count max-reference-pictures-active-count))

(defun make-video-get-memory-properties-khr (&key (next nil)
                                             (memory-bind-index 0)
                                             (memory-requirements nil))
"Creates an instance of VIDEO-GET-MEMORY-PROPERTIES-KHR.
The arguments of this function correspond to the slots of VIDEO-GET-MEMORY-PROPERTIES-KHR.


See VIDEO-GET-MEMORY-PROPERTIES-KHR"
  (make-instance 'vk:video-get-memory-properties-khr 
                 :next next
                 :memory-bind-index memory-bind-index
                 :memory-requirements memory-requirements))

(defun make-video-bind-memory-khr (&key (next nil) (memory-bind-index 0)
                                   (memory nil) (memory-offset 0)
                                   (memory-size 0))
"Creates an instance of VIDEO-BIND-MEMORY-KHR.
The arguments of this function correspond to the slots of VIDEO-BIND-MEMORY-KHR.


See VIDEO-BIND-MEMORY-KHR"
  (make-instance 'vk:video-bind-memory-khr 
                 :next next
                 :memory-bind-index memory-bind-index
                 :memory memory
                 :memory-offset memory-offset
                 :memory-size memory-size))

(defun make-video-picture-resource-khr (&key (next nil)
                                        (coded-offset (vk:make-offset-2d))
                                        (coded-extent (vk:make-extent-2d))
                                        (base-array-layer 0)
                                        (image-view-binding nil))
"Creates an instance of VIDEO-PICTURE-RESOURCE-KHR.
The arguments of this function correspond to the slots of VIDEO-PICTURE-RESOURCE-KHR.


See VIDEO-PICTURE-RESOURCE-KHR"
  (make-instance 'vk:video-picture-resource-khr 
                 :next next
                 :coded-offset coded-offset
                 :coded-extent coded-extent
                 :base-array-layer base-array-layer
                 :image-view-binding image-view-binding))

(defun make-video-reference-slot-khr (&key (next nil) (slot-index 0)
                                      (picture-resource nil))
"Creates an instance of VIDEO-REFERENCE-SLOT-KHR.
The arguments of this function correspond to the slots of VIDEO-REFERENCE-SLOT-KHR.


See VIDEO-REFERENCE-SLOT-KHR"
  (make-instance 'vk:video-reference-slot-khr 
                 :next next
                 :slot-index slot-index
                 :picture-resource picture-resource))

(defun make-video-decode-info-khr (&key (next nil) (flags nil)
                                   (coded-offset (vk:make-offset-2d))
                                   (coded-extent (vk:make-extent-2d))
                                   (src-buffer nil) (src-buffer-offset 0)
                                   (src-buffer-range 0)
                                   (dst-picture-resource (vk:make-video-picture-resource-khr))
                                   (setup-reference-slot nil)
                                   (reference-slots nil))
"Creates an instance of VIDEO-DECODE-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-DECODE-INFO-KHR.


See VIDEO-DECODE-INFO-KHR"
  (make-instance 'vk:video-decode-info-khr 
                 :next next
                 :flags flags
                 :coded-offset coded-offset
                 :coded-extent coded-extent
                 :src-buffer src-buffer
                 :src-buffer-offset src-buffer-offset
                 :src-buffer-range src-buffer-range
                 :dst-picture-resource dst-picture-resource
                 :setup-reference-slot setup-reference-slot
                 :reference-slots reference-slots))

(defun make-video-decode-h264-profile-ext (&key (next nil)
                                           (std-profile-idc nil)
                                           (picture-layout nil))
"Creates an instance of VIDEO-DECODE-H264-PROFILE-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-PROFILE-EXT.


See VIDEO-DECODE-H264-PROFILE-EXT"
  (make-instance 'vk:video-decode-h264-profile-ext 
                 :next next
                 :std-profile-idc std-profile-idc
                 :picture-layout picture-layout))

(defun make-video-decode-h264-capabilities-ext (&key (next nil) (max-level 0)
                                                (field-offset-granularity (vk:make-offset-2d))
                                                (std-extension-version nil))
"Creates an instance of VIDEO-DECODE-H264-CAPABILITIES-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-CAPABILITIES-EXT.


See VIDEO-DECODE-H264-CAPABILITIES-EXT"
  (make-instance 'vk:video-decode-h264-capabilities-ext 
                 :next next
                 :max-level max-level
                 :field-offset-granularity field-offset-granularity
                 :std-extension-version std-extension-version))

(defun make-video-decode-h264-session-create-info-ext (&key (next nil)
                                                       (flags nil)
                                                       (std-extension-version nil))
"Creates an instance of VIDEO-DECODE-H264-SESSION-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-SESSION-CREATE-INFO-EXT.


See VIDEO-DECODE-H264-SESSION-CREATE-INFO-EXT"
  (make-instance 'vk:video-decode-h264-session-create-info-ext 
                 :next next
                 :flags flags
                 :std-extension-version std-extension-version))

(defun make-video-decode-h264-session-parameters-add-info-ext (&key (next nil)
                                                               (sps-std nil)
                                                               (pps-std nil))
"Creates an instance of VIDEO-DECODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT.


See VIDEO-DECODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT"
  (make-instance 'vk:video-decode-h264-session-parameters-add-info-ext 
                 :next next
                 :sps-std sps-std
                 :pps-std pps-std))

(defun make-video-decode-h264-session-parameters-create-info-ext (&key
                                                                  (next nil)
                                                                  (max-sps-std-count 0)
                                                                  (max-pps-std-count 0)
                                                                  (parameters-add-info nil))
"Creates an instance of VIDEO-DECODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT.


See VIDEO-DECODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT"
  (make-instance 'vk:video-decode-h264-session-parameters-create-info-ext 
                 :next next
                 :max-sps-std-count max-sps-std-count
                 :max-pps-std-count max-pps-std-count
                 :parameters-add-info parameters-add-info))

(defun make-video-decode-h264-picture-info-ext (&key (next nil)
                                                (std-picture-info nil)
                                                (slices-data-offsets nil))
"Creates an instance of VIDEO-DECODE-H264-PICTURE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-PICTURE-INFO-EXT.


See VIDEO-DECODE-H264-PICTURE-INFO-EXT"
  (make-instance 'vk:video-decode-h264-picture-info-ext 
                 :next next
                 :std-picture-info std-picture-info
                 :slices-data-offsets slices-data-offsets))

(defun make-video-decode-h264-dpb-slot-info-ext (&key (next nil)
                                                 (std-reference-info nil))
"Creates an instance of VIDEO-DECODE-H264-DPB-SLOT-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-DPB-SLOT-INFO-EXT.


See VIDEO-DECODE-H264-DPB-SLOT-INFO-EXT"
  (make-instance 'vk:video-decode-h264-dpb-slot-info-ext 
                 :next next
                 :std-reference-info std-reference-info))

(defun make-video-decode-h264-mvc-ext (&key (next nil) (std-mvc nil))
"Creates an instance of VIDEO-DECODE-H264-MVC-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H264-MVC-EXT.


See VIDEO-DECODE-H264-MVC-EXT"
  (make-instance 'vk:video-decode-h264-mvc-ext 
                 :next next
                 :std-mvc std-mvc))

(defun make-video-decode-h265-profile-ext (&key (next nil)
                                           (std-profile-idc nil))
"Creates an instance of VIDEO-DECODE-H265-PROFILE-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-PROFILE-EXT.


See VIDEO-DECODE-H265-PROFILE-EXT"
  (make-instance 'vk:video-decode-h265-profile-ext 
                 :next next
                 :std-profile-idc std-profile-idc))

(defun make-video-decode-h265-capabilities-ext (&key (next nil) (max-level 0)
                                                (std-extension-version nil))
"Creates an instance of VIDEO-DECODE-H265-CAPABILITIES-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-CAPABILITIES-EXT.


See VIDEO-DECODE-H265-CAPABILITIES-EXT"
  (make-instance 'vk:video-decode-h265-capabilities-ext 
                 :next next
                 :max-level max-level
                 :std-extension-version std-extension-version))

(defun make-video-decode-h265-session-create-info-ext (&key (next nil)
                                                       (flags nil)
                                                       (std-extension-version nil))
"Creates an instance of VIDEO-DECODE-H265-SESSION-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-SESSION-CREATE-INFO-EXT.


See VIDEO-DECODE-H265-SESSION-CREATE-INFO-EXT"
  (make-instance 'vk:video-decode-h265-session-create-info-ext 
                 :next next
                 :flags flags
                 :std-extension-version std-extension-version))

(defun make-video-decode-h265-session-parameters-add-info-ext (&key (next nil)
                                                               (sps-std nil)
                                                               (pps-std nil))
"Creates an instance of VIDEO-DECODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT.


See VIDEO-DECODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT"
  (make-instance 'vk:video-decode-h265-session-parameters-add-info-ext 
                 :next next
                 :sps-std sps-std
                 :pps-std pps-std))

(defun make-video-decode-h265-session-parameters-create-info-ext (&key
                                                                  (next nil)
                                                                  (max-sps-std-count 0)
                                                                  (max-pps-std-count 0)
                                                                  (parameters-add-info nil))
"Creates an instance of VIDEO-DECODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT.


See VIDEO-DECODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT"
  (make-instance 'vk:video-decode-h265-session-parameters-create-info-ext 
                 :next next
                 :max-sps-std-count max-sps-std-count
                 :max-pps-std-count max-pps-std-count
                 :parameters-add-info parameters-add-info))

(defun make-video-decode-h265-picture-info-ext (&key (next nil)
                                                (std-picture-info nil)
                                                (slices-data-offsets nil))
"Creates an instance of VIDEO-DECODE-H265-PICTURE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-PICTURE-INFO-EXT.


See VIDEO-DECODE-H265-PICTURE-INFO-EXT"
  (make-instance 'vk:video-decode-h265-picture-info-ext 
                 :next next
                 :std-picture-info std-picture-info
                 :slices-data-offsets slices-data-offsets))

(defun make-video-decode-h265-dpb-slot-info-ext (&key (next nil)
                                                 (std-reference-info nil))
"Creates an instance of VIDEO-DECODE-H265-DPB-SLOT-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-DECODE-H265-DPB-SLOT-INFO-EXT.


See VIDEO-DECODE-H265-DPB-SLOT-INFO-EXT"
  (make-instance 'vk:video-decode-h265-dpb-slot-info-ext 
                 :next next
                 :std-reference-info std-reference-info))

(defun make-video-session-create-info-khr (&key (next nil)
                                           (queue-family-index 0) (flags nil)
                                           (video-profile nil)
                                           (picture-format nil)
                                           (max-coded-extent (vk:make-extent-2d))
                                           (reference-pictures-format nil)
                                           (max-reference-pictures-slots-count 0)
                                           (max-reference-pictures-active-count 0))
"Creates an instance of VIDEO-SESSION-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-SESSION-CREATE-INFO-KHR.


See VIDEO-SESSION-CREATE-INFO-KHR"
  (make-instance 'vk:video-session-create-info-khr 
                 :next next
                 :queue-family-index queue-family-index
                 :flags flags
                 :video-profile video-profile
                 :picture-format picture-format
                 :max-coded-extent max-coded-extent
                 :reference-pictures-format reference-pictures-format
                 :max-reference-pictures-slots-count max-reference-pictures-slots-count
                 :max-reference-pictures-active-count max-reference-pictures-active-count))

(defun make-video-session-parameters-create-info-khr (&key (next nil)
                                                      (video-session-parameters-template nil)
                                                      (video-session nil))
"Creates an instance of VIDEO-SESSION-PARAMETERS-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-SESSION-PARAMETERS-CREATE-INFO-KHR.


See VIDEO-SESSION-PARAMETERS-CREATE-INFO-KHR"
  (make-instance 'vk:video-session-parameters-create-info-khr 
                 :next next
                 :video-session-parameters-template video-session-parameters-template
                 :video-session video-session))

(defun make-video-session-parameters-update-info-khr (&key (next nil)
                                                      (update-sequence-count 0))
"Creates an instance of VIDEO-SESSION-PARAMETERS-UPDATE-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-SESSION-PARAMETERS-UPDATE-INFO-KHR.


See VIDEO-SESSION-PARAMETERS-UPDATE-INFO-KHR"
  (make-instance 'vk:video-session-parameters-update-info-khr 
                 :next next
                 :update-sequence-count update-sequence-count))

(defun make-video-begin-coding-info-khr (&key (next nil) (flags nil)
                                         (codec-quality-preset nil)
                                         (video-session nil)
                                         (video-session-parameters nil)
                                         (reference-slots nil))
"Creates an instance of VIDEO-BEGIN-CODING-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-BEGIN-CODING-INFO-KHR.


See VIDEO-BEGIN-CODING-INFO-KHR"
  (make-instance 'vk:video-begin-coding-info-khr 
                 :next next
                 :flags flags
                 :codec-quality-preset codec-quality-preset
                 :video-session video-session
                 :video-session-parameters video-session-parameters
                 :reference-slots reference-slots))

(defun make-video-end-coding-info-khr (&key (next nil) (flags nil))
"Creates an instance of VIDEO-END-CODING-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-END-CODING-INFO-KHR.


See VIDEO-END-CODING-INFO-KHR"
  (make-instance 'vk:video-end-coding-info-khr 
                 :next next
                 :flags flags))

(defun make-video-coding-control-info-khr (&key (next nil) (flags nil))
"Creates an instance of VIDEO-CODING-CONTROL-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-CODING-CONTROL-INFO-KHR.


See VIDEO-CODING-CONTROL-INFO-KHR"
  (make-instance 'vk:video-coding-control-info-khr 
                 :next next
                 :flags flags))

(defun make-video-encode-info-khr (&key (next nil) (flags nil)
                                   (quality-level 0)
                                   (coded-extent (vk:make-extent-2d))
                                   (dst-bitstream-buffer nil)
                                   (dst-bitstream-buffer-offset 0)
                                   (dst-bitstream-buffer-max-range 0)
                                   (src-picture-resource (vk:make-video-picture-resource-khr))
                                   (setup-reference-slot nil)
                                   (reference-slots nil))
"Creates an instance of VIDEO-ENCODE-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-ENCODE-INFO-KHR.


See VIDEO-ENCODE-INFO-KHR"
  (make-instance 'vk:video-encode-info-khr 
                 :next next
                 :flags flags
                 :quality-level quality-level
                 :coded-extent coded-extent
                 :dst-bitstream-buffer dst-bitstream-buffer
                 :dst-bitstream-buffer-offset dst-bitstream-buffer-offset
                 :dst-bitstream-buffer-max-range dst-bitstream-buffer-max-range
                 :src-picture-resource src-picture-resource
                 :setup-reference-slot setup-reference-slot
                 :reference-slots reference-slots))

(defun make-video-encode-rate-control-info-khr (&key (next nil) (flags nil)
                                                (rate-control-mode nil)
                                                (average-bitrate 0)
                                                (peak-to-average-bitrate-ratio 0)
                                                (frame-rate-numerator 0)
                                                (frame-rate-denominator 0)
                                                (virtual-buffer-size-in-ms 0))
"Creates an instance of VIDEO-ENCODE-RATE-CONTROL-INFO-KHR.
The arguments of this function correspond to the slots of VIDEO-ENCODE-RATE-CONTROL-INFO-KHR.


See VIDEO-ENCODE-RATE-CONTROL-INFO-KHR"
  (make-instance 'vk:video-encode-rate-control-info-khr 
                 :next next
                 :flags flags
                 :rate-control-mode rate-control-mode
                 :average-bitrate average-bitrate
                 :peak-to-average-bitrate-ratio peak-to-average-bitrate-ratio
                 :frame-rate-numerator frame-rate-numerator
                 :frame-rate-denominator frame-rate-denominator
                 :virtual-buffer-size-in-ms virtual-buffer-size-in-ms))

(defun make-video-encode-h264-capabilities-ext (&key (next nil) (flags nil)
                                                (input-mode-flags nil)
                                                (output-mode-flags nil)
                                                (min-picture-size-in-mbs (vk:make-extent-2d))
                                                (max-picture-size-in-mbs (vk:make-extent-2d))
                                                (input-image-data-alignment (vk:make-extent-2d))
                                                (max-num-l-0-reference-for-p 0)
                                                (max-num-l-0-reference-for-b 0)
                                                (max-num-l-1-reference 0)
                                                (quality-level-count 0)
                                                (std-extension-version nil))
"Creates an instance of VIDEO-ENCODE-H264-CAPABILITIES-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-CAPABILITIES-EXT.


See VIDEO-ENCODE-H264-CAPABILITIES-EXT"
  (make-instance 'vk:video-encode-h264-capabilities-ext 
                 :next next
                 :flags flags
                 :input-mode-flags input-mode-flags
                 :output-mode-flags output-mode-flags
                 :min-picture-size-in-mbs min-picture-size-in-mbs
                 :max-picture-size-in-mbs max-picture-size-in-mbs
                 :input-image-data-alignment input-image-data-alignment
                 :max-num-l-0-reference-for-p max-num-l-0-reference-for-p
                 :max-num-l-0-reference-for-b max-num-l-0-reference-for-b
                 :max-num-l-1-reference max-num-l-1-reference
                 :quality-level-count quality-level-count
                 :std-extension-version std-extension-version))

(defun make-video-encode-h264-session-create-info-ext (&key (next nil)
                                                       (flags nil)
                                                       (max-picture-size-in-mbs (vk:make-extent-2d))
                                                       (std-extension-version nil))
"Creates an instance of VIDEO-ENCODE-H264-SESSION-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-SESSION-CREATE-INFO-EXT.


See VIDEO-ENCODE-H264-SESSION-CREATE-INFO-EXT"
  (make-instance 'vk:video-encode-h264-session-create-info-ext 
                 :next next
                 :flags flags
                 :max-picture-size-in-mbs max-picture-size-in-mbs
                 :std-extension-version std-extension-version))

(defun make-video-encode-h264-session-parameters-add-info-ext (&key (next nil)
                                                               (sps-std nil)
                                                               (pps-std nil))
"Creates an instance of VIDEO-ENCODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT.


See VIDEO-ENCODE-H264-SESSION-PARAMETERS-ADD-INFO-EXT"
  (make-instance 'vk:video-encode-h264-session-parameters-add-info-ext 
                 :next next
                 :sps-std sps-std
                 :pps-std pps-std))

(defun make-video-encode-h264-session-parameters-create-info-ext (&key
                                                                  (next nil)
                                                                  (max-sps-std-count 0)
                                                                  (max-pps-std-count 0)
                                                                  (parameters-add-info nil))
"Creates an instance of VIDEO-ENCODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT.


See VIDEO-ENCODE-H264-SESSION-PARAMETERS-CREATE-INFO-EXT"
  (make-instance 'vk:video-encode-h264-session-parameters-create-info-ext 
                 :next next
                 :max-sps-std-count max-sps-std-count
                 :max-pps-std-count max-pps-std-count
                 :parameters-add-info parameters-add-info))

(defun make-video-encode-h264-dpb-slot-info-ext (&key (next nil) (slot-index 0)
                                                 (std-picture-info nil))
"Creates an instance of VIDEO-ENCODE-H264-DPB-SLOT-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-DPB-SLOT-INFO-EXT.


See VIDEO-ENCODE-H264-DPB-SLOT-INFO-EXT"
  (make-instance 'vk:video-encode-h264-dpb-slot-info-ext 
                 :next next
                 :slot-index slot-index
                 :std-picture-info std-picture-info))

(defun make-video-encode-h264-vcl-frame-info-ext (&key (next nil)
                                                  (ref-default-final-list-0-entries nil)
                                                  (ref-default-final-list-1-entries nil)
                                                  (nalu-slice-entries nil)
                                                  (current-picture-info nil))
"Creates an instance of VIDEO-ENCODE-H264-VCL-FRAME-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-VCL-FRAME-INFO-EXT.


See VIDEO-ENCODE-H264-VCL-FRAME-INFO-EXT"
  (make-instance 'vk:video-encode-h264-vcl-frame-info-ext 
                 :next next
                 :ref-default-final-list-0-entries ref-default-final-list-0-entries
                 :ref-default-final-list-1-entries ref-default-final-list-1-entries
                 :nalu-slice-entries nalu-slice-entries
                 :current-picture-info current-picture-info))

(defun make-video-encode-h264-emit-picture-parameters-ext (&key (next nil)
                                                           (sps-id 0)
                                                           (emit-sps-enable nil)
                                                           (pps-id-entries nil))
"Creates an instance of VIDEO-ENCODE-H264-EMIT-PICTURE-PARAMETERS-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-EMIT-PICTURE-PARAMETERS-EXT.


See VIDEO-ENCODE-H264-EMIT-PICTURE-PARAMETERS-EXT"
  (make-instance 'vk:video-encode-h264-emit-picture-parameters-ext 
                 :next next
                 :sps-id sps-id
                 :emit-sps-enable emit-sps-enable
                 :pps-id-entries pps-id-entries))

(defun make-video-encode-h264-profile-ext (&key (next nil)
                                           (std-profile-idc nil))
"Creates an instance of VIDEO-ENCODE-H264-PROFILE-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-PROFILE-EXT.


See VIDEO-ENCODE-H264-PROFILE-EXT"
  (make-instance 'vk:video-encode-h264-profile-ext 
                 :next next
                 :std-profile-idc std-profile-idc))

(defun make-video-encode-h264-nalu-slice-ext (&key (next nil)
                                              (slice-header-std nil)
                                              (mb-count 0)
                                              (ref-final-list-0-entries nil)
                                              (ref-final-list-1-entries nil)
                                              (preceding-nalu-bytes 0)
                                              (min-qp 0) (max-qp 0))
"Creates an instance of VIDEO-ENCODE-H264-NALU-SLICE-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H264-NALU-SLICE-EXT.


See VIDEO-ENCODE-H264-NALU-SLICE-EXT"
  (make-instance 'vk:video-encode-h264-nalu-slice-ext 
                 :next next
                 :slice-header-std slice-header-std
                 :mb-count mb-count
                 :ref-final-list-0-entries ref-final-list-0-entries
                 :ref-final-list-1-entries ref-final-list-1-entries
                 :preceding-nalu-bytes preceding-nalu-bytes
                 :min-qp min-qp
                 :max-qp max-qp))

(defun make-video-encode-h265-capabilities-ext (&key (next nil) (flags nil)
                                                (input-mode-flags nil)
                                                (output-mode-flags nil)
                                                (ctb-sizes nil)
                                                (input-image-data-alignment (vk:make-extent-2d))
                                                (max-num-l-0-reference-for-p 0)
                                                (max-num-l-0-reference-for-b 0)
                                                (max-num-l-1-reference 0)
                                                (max-num-sub-layers 0)
                                                (quality-level-count 0)
                                                (std-extension-version nil))
"Creates an instance of VIDEO-ENCODE-H265-CAPABILITIES-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-CAPABILITIES-EXT.


See VIDEO-ENCODE-H265-CAPABILITIES-EXT"
  (make-instance 'vk:video-encode-h265-capabilities-ext 
                 :next next
                 :flags flags
                 :input-mode-flags input-mode-flags
                 :output-mode-flags output-mode-flags
                 :ctb-sizes ctb-sizes
                 :input-image-data-alignment input-image-data-alignment
                 :max-num-l-0-reference-for-p max-num-l-0-reference-for-p
                 :max-num-l-0-reference-for-b max-num-l-0-reference-for-b
                 :max-num-l-1-reference max-num-l-1-reference
                 :max-num-sub-layers max-num-sub-layers
                 :quality-level-count quality-level-count
                 :std-extension-version std-extension-version))

(defun make-video-encode-h265-session-create-info-ext (&key (next nil)
                                                       (flags nil)
                                                       (std-extension-version nil))
"Creates an instance of VIDEO-ENCODE-H265-SESSION-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-SESSION-CREATE-INFO-EXT.


See VIDEO-ENCODE-H265-SESSION-CREATE-INFO-EXT"
  (make-instance 'vk:video-encode-h265-session-create-info-ext 
                 :next next
                 :flags flags
                 :std-extension-version std-extension-version))

(defun make-video-encode-h265-session-parameters-add-info-ext (&key (next nil)
                                                               (vps-std nil)
                                                               (sps-std nil)
                                                               (pps-std nil))
"Creates an instance of VIDEO-ENCODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT.


See VIDEO-ENCODE-H265-SESSION-PARAMETERS-ADD-INFO-EXT"
  (make-instance 'vk:video-encode-h265-session-parameters-add-info-ext 
                 :next next
                 :vps-std vps-std
                 :sps-std sps-std
                 :pps-std pps-std))

(defun make-video-encode-h265-session-parameters-create-info-ext (&key
                                                                  (next nil)
                                                                  (max-vps-std-count 0)
                                                                  (max-sps-std-count 0)
                                                                  (max-pps-std-count 0)
                                                                  (parameters-add-info nil))
"Creates an instance of VIDEO-ENCODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT.


See VIDEO-ENCODE-H265-SESSION-PARAMETERS-CREATE-INFO-EXT"
  (make-instance 'vk:video-encode-h265-session-parameters-create-info-ext 
                 :next next
                 :max-vps-std-count max-vps-std-count
                 :max-sps-std-count max-sps-std-count
                 :max-pps-std-count max-pps-std-count
                 :parameters-add-info parameters-add-info))

(defun make-video-encode-h265-vcl-frame-info-ext (&key (next nil)
                                                  (reference-final-lists nil)
                                                  (nalu-slice-entries nil)
                                                  (current-picture-info nil))
"Creates an instance of VIDEO-ENCODE-H265-VCL-FRAME-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-VCL-FRAME-INFO-EXT.


See VIDEO-ENCODE-H265-VCL-FRAME-INFO-EXT"
  (make-instance 'vk:video-encode-h265-vcl-frame-info-ext 
                 :next next
                 :reference-final-lists reference-final-lists
                 :nalu-slice-entries nalu-slice-entries
                 :current-picture-info current-picture-info))

(defun make-video-encode-h265-emit-picture-parameters-ext (&key (next nil)
                                                           (vps-id 0)
                                                           (sps-id 0)
                                                           (emit-vps-enable nil)
                                                           (emit-sps-enable nil)
                                                           (pps-id-entries nil))
"Creates an instance of VIDEO-ENCODE-H265-EMIT-PICTURE-PARAMETERS-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-EMIT-PICTURE-PARAMETERS-EXT.


See VIDEO-ENCODE-H265-EMIT-PICTURE-PARAMETERS-EXT"
  (make-instance 'vk:video-encode-h265-emit-picture-parameters-ext 
                 :next next
                 :vps-id vps-id
                 :sps-id sps-id
                 :emit-vps-enable emit-vps-enable
                 :emit-sps-enable emit-sps-enable
                 :pps-id-entries pps-id-entries))

(defun make-video-encode-h265-nalu-slice-ext (&key (next nil) (ctb-count 0)
                                              (reference-final-lists nil)
                                              (slice-header-std nil))
"Creates an instance of VIDEO-ENCODE-H265-NALU-SLICE-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-NALU-SLICE-EXT.


See VIDEO-ENCODE-H265-NALU-SLICE-EXT"
  (make-instance 'vk:video-encode-h265-nalu-slice-ext 
                 :next next
                 :ctb-count ctb-count
                 :reference-final-lists reference-final-lists
                 :slice-header-std slice-header-std))

(defun make-video-encode-h265-profile-ext (&key (next nil)
                                           (std-profile-idc nil))
"Creates an instance of VIDEO-ENCODE-H265-PROFILE-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-PROFILE-EXT.


See VIDEO-ENCODE-H265-PROFILE-EXT"
  (make-instance 'vk:video-encode-h265-profile-ext 
                 :next next
                 :std-profile-idc std-profile-idc))

(defun make-video-encode-h265-dpb-slot-info-ext (&key (next nil) (slot-index 0)
                                                 (std-reference-info nil))
"Creates an instance of VIDEO-ENCODE-H265-DPB-SLOT-INFO-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-DPB-SLOT-INFO-EXT.


See VIDEO-ENCODE-H265-DPB-SLOT-INFO-EXT"
  (make-instance 'vk:video-encode-h265-dpb-slot-info-ext 
                 :next next
                 :slot-index slot-index
                 :std-reference-info std-reference-info))

(defun make-video-encode-h265-reference-lists-ext (&key (next nil)
                                                   (reference-list-0-entries nil)
                                                   (reference-list-1-entries nil)
                                                   (reference-modifications nil))
"Creates an instance of VIDEO-ENCODE-H265-REFERENCE-LISTS-EXT.
The arguments of this function correspond to the slots of VIDEO-ENCODE-H265-REFERENCE-LISTS-EXT.


See VIDEO-ENCODE-H265-REFERENCE-LISTS-EXT"
  (make-instance 'vk:video-encode-h265-reference-lists-ext 
                 :next next
                 :reference-list-0-entries reference-list-0-entries
                 :reference-list-1-entries reference-list-1-entries
                 :reference-modifications reference-modifications))

(defun make-physical-device-inherited-viewport-scissor-features-nv (&key
                                                                    (next nil)
                                                                    (inherited-viewport-scissor-2d nil))
"Creates an instance of PHYSICAL-DEVICE-INHERITED-VIEWPORT-SCISSOR-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-INHERITED-VIEWPORT-SCISSOR-FEATURES-NV.


See PHYSICAL-DEVICE-INHERITED-VIEWPORT-SCISSOR-FEATURES-NV"
  (make-instance 'vk:physical-device-inherited-viewport-scissor-features-nv 
                 :next next
                 :inherited-viewport-scissor-2d inherited-viewport-scissor-2d))

(defun make-command-buffer-inheritance-viewport-scissor-info-nv (&key
                                                                 (next nil)
                                                                 (viewport-scissor-2d nil)
                                                                 (viewport-depth-count 0)
                                                                 (viewport-depths nil))
"Creates an instance of COMMAND-BUFFER-INHERITANCE-VIEWPORT-SCISSOR-INFO-NV.
The arguments of this function correspond to the slots of COMMAND-BUFFER-INHERITANCE-VIEWPORT-SCISSOR-INFO-NV.


See COMMAND-BUFFER-INHERITANCE-VIEWPORT-SCISSOR-INFO-NV"
  (make-instance 'vk:command-buffer-inheritance-viewport-scissor-info-nv 
                 :next next
                 :viewport-scissor-2d viewport-scissor-2d
                 :viewport-depth-count viewport-depth-count
                 :viewport-depths viewport-depths))

(defun make-physical-device-ycbcr-2-plane-4-4-4-formats-features-ext (&key
                                                                      (next nil)
                                                                      (ycbcr-2plane-4-4-4-formats nil))
"Creates an instance of PHYSICAL-DEVICE-YCBCR-2-PLANE-4-4-4-FORMATS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-YCBCR-2-PLANE-4-4-4-FORMATS-FEATURES-EXT.


See PHYSICAL-DEVICE-YCBCR-2-PLANE-4-4-4-FORMATS-FEATURES-EXT"
  (make-instance 'vk:physical-device-ycbcr-2-plane-4-4-4-formats-features-ext 
                 :next next
                 :ycbcr-2plane-4-4-4-formats ycbcr-2plane-4-4-4-formats))

(defun make-physical-device-provoking-vertex-features-ext (&key (next nil)
                                                           (provoking-vertex-last nil)
                                                           (transform-feedback-preserves-provoking-vertex nil))
"Creates an instance of PHYSICAL-DEVICE-PROVOKING-VERTEX-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROVOKING-VERTEX-FEATURES-EXT.


See PHYSICAL-DEVICE-PROVOKING-VERTEX-FEATURES-EXT"
  (make-instance 'vk:physical-device-provoking-vertex-features-ext 
                 :next next
                 :provoking-vertex-last provoking-vertex-last
                 :transform-feedback-preserves-provoking-vertex transform-feedback-preserves-provoking-vertex))

(defun make-physical-device-provoking-vertex-properties-ext (&key (next nil)
                                                             (provoking-vertex-mode-per-pipeline nil)
                                                             (transform-feedback-preserves-triangle-fan-provoking-vertex nil))
"Creates an instance of PHYSICAL-DEVICE-PROVOKING-VERTEX-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-PROVOKING-VERTEX-PROPERTIES-EXT.


See PHYSICAL-DEVICE-PROVOKING-VERTEX-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-provoking-vertex-properties-ext 
                 :next next
                 :provoking-vertex-mode-per-pipeline provoking-vertex-mode-per-pipeline
                 :transform-feedback-preserves-triangle-fan-provoking-vertex transform-feedback-preserves-triangle-fan-provoking-vertex))

(defun make-pipeline-rasterization-provoking-vertex-state-create-info-ext (&key
                                                                           (next nil)
                                                                           (provoking-vertex-mode nil))
"Creates an instance of PIPELINE-RASTERIZATION-PROVOKING-VERTEX-STATE-CREATE-INFO-EXT.
The arguments of this function correspond to the slots of PIPELINE-RASTERIZATION-PROVOKING-VERTEX-STATE-CREATE-INFO-EXT.


See PIPELINE-RASTERIZATION-PROVOKING-VERTEX-STATE-CREATE-INFO-EXT"
  (make-instance 'vk:pipeline-rasterization-provoking-vertex-state-create-info-ext 
                 :next next
                 :provoking-vertex-mode provoking-vertex-mode))

(defun make-cu-module-create-info-nvx (&key (next nil) (data-size 0) (data nil))
"Creates an instance of CU-MODULE-CREATE-INFO-NVX.
The arguments of this function correspond to the slots of CU-MODULE-CREATE-INFO-NVX.


See CU-MODULE-CREATE-INFO-NVX"
  (make-instance 'vk:cu-module-create-info-nvx 
                 :next next
                 :data-size data-size
                 :data data))

(defun make-cu-function-create-info-nvx (&key (next nil) (module nil) (name ""))
"Creates an instance of CU-FUNCTION-CREATE-INFO-NVX.
The arguments of this function correspond to the slots of CU-FUNCTION-CREATE-INFO-NVX.


See CU-FUNCTION-CREATE-INFO-NVX"
  (make-instance 'vk:cu-function-create-info-nvx 
                 :next next
                 :module module
                 :name name))

(defun make-cu-launch-info-nvx (&key (next nil) (function-handle nil)
                                (grid-dim-x 0) (grid-dim-y 0) (grid-dim-z 0)
                                (block-dim-x 0) (block-dim-y 0) (block-dim-z 0)
                                (shared-mem-bytes 0) (param-count 0)
                                (params nil) (extra-count 0) (extras nil))
"Creates an instance of CU-LAUNCH-INFO-NVX.
The arguments of this function correspond to the slots of CU-LAUNCH-INFO-NVX.


See CU-LAUNCH-INFO-NVX"
  (make-instance 'vk:cu-launch-info-nvx 
                 :next next
                 :function-handle function-handle
                 :grid-dim-x grid-dim-x
                 :grid-dim-y grid-dim-y
                 :grid-dim-z grid-dim-z
                 :block-dim-x block-dim-x
                 :block-dim-y block-dim-y
                 :block-dim-z block-dim-z
                 :shared-mem-bytes shared-mem-bytes
                 :param-count param-count
                 :params params
                 :extra-count extra-count
                 :extras extras))

(defun make-physical-device-shader-integer-dot-product-features-khr (&key
                                                                     (next nil)
                                                                     (shader-integer-dot-product nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-FEATURES-KHR.


See PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-FEATURES-KHR"
  (make-instance 'vk:physical-device-shader-integer-dot-product-features-khr 
                 :next next
                 :shader-integer-dot-product shader-integer-dot-product))

(defun make-physical-device-shader-integer-dot-product-properties-khr (&key
                                                                       (next nil)
                                                                       (integer-dot-product-8-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-8-bit-signed-accelerated nil)
                                                                       (integer-dot-product-8-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-4x-8-bit-packed-unsigned-accelerated nil)
                                                                       (integer-dot-product-4x-8-bit-packed-signed-accelerated nil)
                                                                       (integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-16-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-16-bit-signed-accelerated nil)
                                                                       (integer-dot-product-16-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-32-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-32-bit-signed-accelerated nil)
                                                                       (integer-dot-product-32-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-64-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-64-bit-signed-accelerated nil)
                                                                       (integer-dot-product-64-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-8-bit-signed-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-16-bit-signed-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-32-bit-signed-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-64-bit-signed-accelerated nil)
                                                                       (integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated nil))
"Creates an instance of PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-PROPERTIES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-PROPERTIES-KHR.


See PHYSICAL-DEVICE-SHADER-INTEGER-DOT-PRODUCT-PROPERTIES-KHR"
  (make-instance 'vk:physical-device-shader-integer-dot-product-properties-khr 
                 :next next
                 :integer-dot-product-8-bit-unsigned-accelerated integer-dot-product-8-bit-unsigned-accelerated
                 :integer-dot-product-8-bit-signed-accelerated integer-dot-product-8-bit-signed-accelerated
                 :integer-dot-product-8-bit-mixed-signedness-accelerated integer-dot-product-8-bit-mixed-signedness-accelerated
                 :integer-dot-product-4x-8-bit-packed-unsigned-accelerated integer-dot-product-4x-8-bit-packed-unsigned-accelerated
                 :integer-dot-product-4x-8-bit-packed-signed-accelerated integer-dot-product-4x-8-bit-packed-signed-accelerated
                 :integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated
                 :integer-dot-product-16-bit-unsigned-accelerated integer-dot-product-16-bit-unsigned-accelerated
                 :integer-dot-product-16-bit-signed-accelerated integer-dot-product-16-bit-signed-accelerated
                 :integer-dot-product-16-bit-mixed-signedness-accelerated integer-dot-product-16-bit-mixed-signedness-accelerated
                 :integer-dot-product-32-bit-unsigned-accelerated integer-dot-product-32-bit-unsigned-accelerated
                 :integer-dot-product-32-bit-signed-accelerated integer-dot-product-32-bit-signed-accelerated
                 :integer-dot-product-32-bit-mixed-signedness-accelerated integer-dot-product-32-bit-mixed-signedness-accelerated
                 :integer-dot-product-64-bit-unsigned-accelerated integer-dot-product-64-bit-unsigned-accelerated
                 :integer-dot-product-64-bit-signed-accelerated integer-dot-product-64-bit-signed-accelerated
                 :integer-dot-product-64-bit-mixed-signedness-accelerated integer-dot-product-64-bit-mixed-signedness-accelerated
                 :integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated
                 :integer-dot-product-accumulating-saturating-8-bit-signed-accelerated integer-dot-product-accumulating-saturating-8-bit-signed-accelerated
                 :integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated
                 :integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated
                 :integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated
                 :integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated
                 :integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated
                 :integer-dot-product-accumulating-saturating-16-bit-signed-accelerated integer-dot-product-accumulating-saturating-16-bit-signed-accelerated
                 :integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated
                 :integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated
                 :integer-dot-product-accumulating-saturating-32-bit-signed-accelerated integer-dot-product-accumulating-saturating-32-bit-signed-accelerated
                 :integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated
                 :integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated
                 :integer-dot-product-accumulating-saturating-64-bit-signed-accelerated integer-dot-product-accumulating-saturating-64-bit-signed-accelerated
                 :integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated))

(defun make-physical-device-drm-properties-ext (&key (next nil)
                                                (has-primary nil)
                                                (has-render nil)
                                                (primary-major 0)
                                                (primary-minor 0)
                                                (render-major 0)
                                                (render-minor 0))
"Creates an instance of PHYSICAL-DEVICE-DRM-PROPERTIES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DRM-PROPERTIES-EXT.


See PHYSICAL-DEVICE-DRM-PROPERTIES-EXT"
  (make-instance 'vk:physical-device-drm-properties-ext 
                 :next next
                 :has-primary has-primary
                 :has-render has-render
                 :primary-major primary-major
                 :primary-minor primary-minor
                 :render-major render-major
                 :render-minor render-minor))

(defun make-physical-device-ray-tracing-motion-blur-features-nv (&key
                                                                 (next nil)
                                                                 (ray-tracing-motion-blur nil)
                                                                 (ray-tracing-motion-blur-pipeline-trace-rays-indirect nil))
"Creates an instance of PHYSICAL-DEVICE-RAY-TRACING-MOTION-BLUR-FEATURES-NV.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-RAY-TRACING-MOTION-BLUR-FEATURES-NV.


See PHYSICAL-DEVICE-RAY-TRACING-MOTION-BLUR-FEATURES-NV"
  (make-instance 'vk:physical-device-ray-tracing-motion-blur-features-nv 
                 :next next
                 :ray-tracing-motion-blur ray-tracing-motion-blur
                 :ray-tracing-motion-blur-pipeline-trace-rays-indirect ray-tracing-motion-blur-pipeline-trace-rays-indirect))

(defun make-acceleration-structure-geometry-motion-triangles-data-nv (&key
                                                                      (next nil)
                                                                      (vertex-data nil))
"Creates an instance of ACCELERATION-STRUCTURE-GEOMETRY-MOTION-TRIANGLES-DATA-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-GEOMETRY-MOTION-TRIANGLES-DATA-NV.


See ACCELERATION-STRUCTURE-GEOMETRY-MOTION-TRIANGLES-DATA-NV"
  (make-instance 'vk:acceleration-structure-geometry-motion-triangles-data-nv 
                 :next next
                 :vertex-data vertex-data))

(defun make-acceleration-structure-motion-info-nv (&key (next nil)
                                                   (max-instances 0)
                                                   (flags nil))
"Creates an instance of ACCELERATION-STRUCTURE-MOTION-INFO-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-MOTION-INFO-NV.


See ACCELERATION-STRUCTURE-MOTION-INFO-NV"
  (make-instance 'vk:acceleration-structure-motion-info-nv 
                 :next next
                 :max-instances max-instances
                 :flags flags))

(defun make-srt-data-nv (&key (sx 0.0) (a 0.0) (b 0.0) (pvx 0.0) (sy 0.0)
                         (c 0.0) (pvy 0.0) (sz 0.0) (pvz 0.0) (qx 0.0) (qy 0.0)
                         (qz 0.0) (qw 0.0) (tx 0.0) (ty 0.0) (tz 0.0))
"Creates an instance of SRT-DATA-NV.
The arguments of this function correspond to the slots of SRT-DATA-NV.


See SRT-DATA-NV"
  (make-instance 'vk:srt-data-nv 
                 :sx sx
                 :a a
                 :b b
                 :pvx pvx
                 :sy sy
                 :c c
                 :pvy pvy
                 :sz sz
                 :pvz pvz
                 :qx qx
                 :qy qy
                 :qz qz
                 :qw qw
                 :tx tx
                 :ty ty
                 :tz tz))

(defun make-acceleration-structure-srt-motion-instance-nv (&key
                                                           (transform-t-0 (vk:make-srt-data-nv))
                                                           (transform-t-1 (vk:make-srt-data-nv))
                                                           (instance-custom-index 0)
                                                           (mask 0)
                                                           (instance-shader-binding-table-record-offset 0)
                                                           (flags nil)
                                                           (acceleration-structure-reference 0))
"Creates an instance of ACCELERATION-STRUCTURE-SRT-MOTION-INSTANCE-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-SRT-MOTION-INSTANCE-NV.


See ACCELERATION-STRUCTURE-SRT-MOTION-INSTANCE-NV"
  (make-instance 'vk:acceleration-structure-srt-motion-instance-nv 
                 :transform-t-0 transform-t-0
                 :transform-t-1 transform-t-1
                 :instance-custom-index instance-custom-index
                 :mask mask
                 :instance-shader-binding-table-record-offset instance-shader-binding-table-record-offset
                 :flags flags
                 :acceleration-structure-reference acceleration-structure-reference))

(defun make-acceleration-structure-matrix-motion-instance-nv (&key
                                                              (transform-t-0 (vk:make-transform-matrix-khr))
                                                              (transform-t-1 (vk:make-transform-matrix-khr))
                                                              (instance-custom-index 0)
                                                              (mask 0)
                                                              (instance-shader-binding-table-record-offset 0)
                                                              (flags nil)
                                                              (acceleration-structure-reference 0))
"Creates an instance of ACCELERATION-STRUCTURE-MATRIX-MOTION-INSTANCE-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-MATRIX-MOTION-INSTANCE-NV.


See ACCELERATION-STRUCTURE-MATRIX-MOTION-INSTANCE-NV"
  (make-instance 'vk:acceleration-structure-matrix-motion-instance-nv 
                 :transform-t-0 transform-t-0
                 :transform-t-1 transform-t-1
                 :instance-custom-index instance-custom-index
                 :mask mask
                 :instance-shader-binding-table-record-offset instance-shader-binding-table-record-offset
                 :flags flags
                 :acceleration-structure-reference acceleration-structure-reference))

(defun make-acceleration-structure-motion-instance-data-nv (&key
                                                            (static-instance nil)
                                                            (matrix-motion-instance nil)
                                                            (srt-motion-instance nil))
"Creates an instance of ACCELERATION-STRUCTURE-MOTION-INSTANCE-DATA-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-MOTION-INSTANCE-DATA-NV.

Since ACCELERATION-STRUCTURE-MOTION-INSTANCE-DATA-NV represents a union, exactly one argument must be supplied.

See ACCELERATION-STRUCTURE-MOTION-INSTANCE-DATA-NV"
  (assert (= 1 (count-if #'identity (list static-instance matrix-motion-instance srt-motion-instance)))
          (static-instance matrix-motion-instance srt-motion-instance)
          "Exactly one argument must be non-nil.")
  (cond 
    (static-instance
     (make-instance 'vk:acceleration-structure-motion-instance-data-nv :static-instance static-instance))
    (matrix-motion-instance
     (make-instance 'vk:acceleration-structure-motion-instance-data-nv :matrix-motion-instance matrix-motion-instance))
    (srt-motion-instance
     (make-instance 'vk:acceleration-structure-motion-instance-data-nv :srt-motion-instance srt-motion-instance))))

(defun make-acceleration-structure-motion-instance-nv (&key (type nil)
                                                       (flags nil) (data nil))
"Creates an instance of ACCELERATION-STRUCTURE-MOTION-INSTANCE-NV.
The arguments of this function correspond to the slots of ACCELERATION-STRUCTURE-MOTION-INSTANCE-NV.


See ACCELERATION-STRUCTURE-MOTION-INSTANCE-NV"
  (make-instance 'vk:acceleration-structure-motion-instance-nv 
                 :type type
                 :flags flags
                 :data data))

(defun make-memory-get-remote-address-info-nv (&key (next nil) (memory nil)
                                               (handle-type nil))
"Creates an instance of MEMORY-GET-REMOTE-ADDRESS-INFO-NV.
The arguments of this function correspond to the slots of MEMORY-GET-REMOTE-ADDRESS-INFO-NV.


See MEMORY-GET-REMOTE-ADDRESS-INFO-NV"
  (make-instance 'vk:memory-get-remote-address-info-nv 
                 :next next
                 :memory memory
                 :handle-type handle-type))

(defun make-import-memory-buffer-collection-fuchsia (&key (next nil)
                                                     (collection nil) (index 0))
"Creates an instance of IMPORT-MEMORY-BUFFER-COLLECTION-FUCHSIA.
The arguments of this function correspond to the slots of IMPORT-MEMORY-BUFFER-COLLECTION-FUCHSIA.


See IMPORT-MEMORY-BUFFER-COLLECTION-FUCHSIA"
  (make-instance 'vk:import-memory-buffer-collection-fuchsia 
                 :next next
                 :collection collection
                 :index index))

(defun make-buffer-collection-image-create-info-fuchsia (&key (next nil)
                                                         (collection nil)
                                                         (index 0))
"Creates an instance of BUFFER-COLLECTION-IMAGE-CREATE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-COLLECTION-IMAGE-CREATE-INFO-FUCHSIA.


See BUFFER-COLLECTION-IMAGE-CREATE-INFO-FUCHSIA"
  (make-instance 'vk:buffer-collection-image-create-info-fuchsia 
                 :next next
                 :collection collection
                 :index index))

(defun make-buffer-collection-buffer-create-info-fuchsia (&key (next nil)
                                                          (collection nil)
                                                          (index 0))
"Creates an instance of BUFFER-COLLECTION-BUFFER-CREATE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-COLLECTION-BUFFER-CREATE-INFO-FUCHSIA.


See BUFFER-COLLECTION-BUFFER-CREATE-INFO-FUCHSIA"
  (make-instance 'vk:buffer-collection-buffer-create-info-fuchsia 
                 :next next
                 :collection collection
                 :index index))

(defun make-buffer-collection-create-info-fuchsia (&key (next nil)
                                                   (collection-token nil))
"Creates an instance of BUFFER-COLLECTION-CREATE-INFO-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-COLLECTION-CREATE-INFO-FUCHSIA.


See BUFFER-COLLECTION-CREATE-INFO-FUCHSIA"
  (make-instance 'vk:buffer-collection-create-info-fuchsia 
                 :next next
                 :collection-token collection-token))

(defun make-buffer-collection-properties-fuchsia (&key (next nil)
                                                  (memory-type-bits 0)
                                                  (buffer-count 0)
                                                  (create-info-index 0)
                                                  (sysmem-pixel-format 0)
                                                  (format-features nil)
                                                  (sysmem-color-space-index (vk:make-sysmem-color-space-fuchsia))
                                                  (sampler-ycbcr-conversion-components (vk:make-component-mapping))
                                                  (suggested-ycbcr-model nil)
                                                  (suggested-ycbcr-range nil)
                                                  (suggested-x-chroma-offset nil)
                                                  (suggested-y-chroma-offset nil))
"Creates an instance of BUFFER-COLLECTION-PROPERTIES-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-COLLECTION-PROPERTIES-FUCHSIA.


See BUFFER-COLLECTION-PROPERTIES-FUCHSIA"
  (make-instance 'vk:buffer-collection-properties-fuchsia 
                 :next next
                 :memory-type-bits memory-type-bits
                 :buffer-count buffer-count
                 :create-info-index create-info-index
                 :sysmem-pixel-format sysmem-pixel-format
                 :format-features format-features
                 :sysmem-color-space-index sysmem-color-space-index
                 :sampler-ycbcr-conversion-components sampler-ycbcr-conversion-components
                 :suggested-ycbcr-model suggested-ycbcr-model
                 :suggested-ycbcr-range suggested-ycbcr-range
                 :suggested-x-chroma-offset suggested-x-chroma-offset
                 :suggested-y-chroma-offset suggested-y-chroma-offset))

(defun make-buffer-constraints-info-fuchsia (&key (next nil)
                                             (create-info (vk:make-buffer-create-info))
                                             (required-format-features nil)
                                             (buffer-collection-constraints (vk:make-buffer-collection-constraints-info-fuchsia)))
"Creates an instance of BUFFER-CONSTRAINTS-INFO-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-CONSTRAINTS-INFO-FUCHSIA.


See BUFFER-CONSTRAINTS-INFO-FUCHSIA"
  (make-instance 'vk:buffer-constraints-info-fuchsia 
                 :next next
                 :create-info create-info
                 :required-format-features required-format-features
                 :buffer-collection-constraints buffer-collection-constraints))

(defun make-sysmem-color-space-fuchsia (&key (next nil) (color-space 0))
"Creates an instance of SYSMEM-COLOR-SPACE-FUCHSIA.
The arguments of this function correspond to the slots of SYSMEM-COLOR-SPACE-FUCHSIA.


See SYSMEM-COLOR-SPACE-FUCHSIA"
  (make-instance 'vk:sysmem-color-space-fuchsia 
                 :next next
                 :color-space color-space))

(defun make-image-format-constraints-info-fuchsia (&key (next nil)
                                                   (image-create-info (vk:make-image-create-info))
                                                   (required-format-features nil)
                                                   (flags nil)
                                                   (sysmem-pixel-format 0)
                                                   (color-space-count 0)
                                                   (color-spaces nil))
"Creates an instance of IMAGE-FORMAT-CONSTRAINTS-INFO-FUCHSIA.
The arguments of this function correspond to the slots of IMAGE-FORMAT-CONSTRAINTS-INFO-FUCHSIA.


See IMAGE-FORMAT-CONSTRAINTS-INFO-FUCHSIA"
  (make-instance 'vk:image-format-constraints-info-fuchsia 
                 :next next
                 :image-create-info image-create-info
                 :required-format-features required-format-features
                 :flags flags
                 :sysmem-pixel-format sysmem-pixel-format
                 :color-space-count color-space-count
                 :color-spaces color-spaces))

(defun make-image-constraints-info-fuchsia (&key (next nil)
                                            (format-constraints nil)
                                            (buffer-collection-constraints (vk:make-buffer-collection-constraints-info-fuchsia))
                                            (flags nil))
"Creates an instance of IMAGE-CONSTRAINTS-INFO-FUCHSIA.
The arguments of this function correspond to the slots of IMAGE-CONSTRAINTS-INFO-FUCHSIA.


See IMAGE-CONSTRAINTS-INFO-FUCHSIA"
  (make-instance 'vk:image-constraints-info-fuchsia 
                 :next next
                 :format-constraints format-constraints
                 :buffer-collection-constraints buffer-collection-constraints
                 :flags flags))

(defun make-buffer-collection-constraints-info-fuchsia (&key (next nil)
                                                        (min-buffer-count 0)
                                                        (max-buffer-count 0)
                                                        (min-buffer-count-for-camping 0)
                                                        (min-buffer-count-for-dedicated-slack 0)
                                                        (min-buffer-count-for-shared-slack 0))
"Creates an instance of BUFFER-COLLECTION-CONSTRAINTS-INFO-FUCHSIA.
The arguments of this function correspond to the slots of BUFFER-COLLECTION-CONSTRAINTS-INFO-FUCHSIA.


See BUFFER-COLLECTION-CONSTRAINTS-INFO-FUCHSIA"
  (make-instance 'vk:buffer-collection-constraints-info-fuchsia 
                 :next next
                 :min-buffer-count min-buffer-count
                 :max-buffer-count max-buffer-count
                 :min-buffer-count-for-camping min-buffer-count-for-camping
                 :min-buffer-count-for-dedicated-slack min-buffer-count-for-dedicated-slack
                 :min-buffer-count-for-shared-slack min-buffer-count-for-shared-slack))

(defun make-physical-device-r-g-b-a-1-0-x-6-formats-features-ext (&key
                                                                  (next nil)
                                                                  (format-rgba-1-0x-6-without-y-cb-cr-sampler nil))
"Creates an instance of PHYSICAL-DEVICE-R-G-B-A-1-0-X-6-FORMATS-FEATURES-EXT.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-R-G-B-A-1-0-X-6-FORMATS-FEATURES-EXT.


See PHYSICAL-DEVICE-R-G-B-A-1-0-X-6-FORMATS-FEATURES-EXT"
  (make-instance 'vk:physical-device-r-g-b-a-1-0-x-6-formats-features-ext 
                 :next next
                 :format-rgba-1-0x-6-without-y-cb-cr-sampler format-rgba-1-0x-6-without-y-cb-cr-sampler))

(defun make-format-properties-3-khr (&key (next nil)
                                     (linear-tiling-features nil)
                                     (optimal-tiling-features nil)
                                     (buffer-features nil))
"Creates an instance of FORMAT-PROPERTIES-3-KHR.
The arguments of this function correspond to the slots of FORMAT-PROPERTIES-3-KHR.


See FORMAT-PROPERTIES-3-KHR"
  (make-instance 'vk:format-properties-3-khr 
                 :next next
                 :linear-tiling-features linear-tiling-features
                 :optimal-tiling-features optimal-tiling-features
                 :buffer-features buffer-features))

(defun make-drm-format-modifier-properties-list-2-ext (&key (next nil)
                                                       (drm-format-modifier-properties nil))
"Creates an instance of DRM-FORMAT-MODIFIER-PROPERTIES-LIST-2-EXT.
The arguments of this function correspond to the slots of DRM-FORMAT-MODIFIER-PROPERTIES-LIST-2-EXT.


See DRM-FORMAT-MODIFIER-PROPERTIES-LIST-2-EXT"
  (make-instance 'vk:drm-format-modifier-properties-list-2-ext 
                 :next next
                 :drm-format-modifier-properties drm-format-modifier-properties))

(defun make-drm-format-modifier-properties-2-ext (&key (drm-format-modifier 0)
                                                  (drm-format-modifier-plane-count 0)
                                                  (drm-format-modifier-tiling-features nil))
"Creates an instance of DRM-FORMAT-MODIFIER-PROPERTIES-2-EXT.
The arguments of this function correspond to the slots of DRM-FORMAT-MODIFIER-PROPERTIES-2-EXT.


See DRM-FORMAT-MODIFIER-PROPERTIES-2-EXT"
  (make-instance 'vk:drm-format-modifier-properties-2-ext 
                 :drm-format-modifier drm-format-modifier
                 :drm-format-modifier-plane-count drm-format-modifier-plane-count
                 :drm-format-modifier-tiling-features drm-format-modifier-tiling-features))

(defun make-android-hardware-buffer-format-properties-2-android (&key
                                                                 (next nil)
                                                                 (format nil)
                                                                 (external-format 0)
                                                                 (format-features nil)
                                                                 (sampler-ycbcr-conversion-components (vk:make-component-mapping))
                                                                 (suggested-ycbcr-model nil)
                                                                 (suggested-ycbcr-range nil)
                                                                 (suggested-x-chroma-offset nil)
                                                                 (suggested-y-chroma-offset nil))
"Creates an instance of ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-2-ANDROID.
The arguments of this function correspond to the slots of ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-2-ANDROID.


See ANDROID-HARDWARE-BUFFER-FORMAT-PROPERTIES-2-ANDROID"
  (make-instance 'vk:android-hardware-buffer-format-properties-2-android 
                 :next next
                 :format format
                 :external-format external-format
                 :format-features format-features
                 :sampler-ycbcr-conversion-components sampler-ycbcr-conversion-components
                 :suggested-ycbcr-model suggested-ycbcr-model
                 :suggested-ycbcr-range suggested-ycbcr-range
                 :suggested-x-chroma-offset suggested-x-chroma-offset
                 :suggested-y-chroma-offset suggested-y-chroma-offset))

(defun make-pipeline-rendering-create-info-khr (&key (next nil) (view-mask 0)
                                                (color-attachment-formats nil)
                                                (depth-attachment-format nil)
                                                (stencil-attachment-format nil))
"Creates an instance of PIPELINE-RENDERING-CREATE-INFO-KHR.
The arguments of this function correspond to the slots of PIPELINE-RENDERING-CREATE-INFO-KHR.


See PIPELINE-RENDERING-CREATE-INFO-KHR"
  (make-instance 'vk:pipeline-rendering-create-info-khr 
                 :next next
                 :view-mask view-mask
                 :color-attachment-formats color-attachment-formats
                 :depth-attachment-format depth-attachment-format
                 :stencil-attachment-format stencil-attachment-format))

(defun make-rendering-info-khr (&key (next nil) (flags nil)
                                (render-area (vk:make-rect-2d)) (layer-count 0)
                                (view-mask 0) (color-attachments nil)
                                (depth-attachment nil) (stencil-attachment nil))
"Creates an instance of RENDERING-INFO-KHR.
The arguments of this function correspond to the slots of RENDERING-INFO-KHR.


See RENDERING-INFO-KHR"
  (make-instance 'vk:rendering-info-khr 
                 :next next
                 :flags flags
                 :render-area render-area
                 :layer-count layer-count
                 :view-mask view-mask
                 :color-attachments color-attachments
                 :depth-attachment depth-attachment
                 :stencil-attachment stencil-attachment))

(defun make-rendering-attachment-info-khr (&key (next nil) (image-view nil)
                                           (image-layout nil)
                                           (resolve-mode nil)
                                           (resolve-image-view nil)
                                           (resolve-image-layout nil)
                                           (load-op nil) (store-op nil)
                                           (clear-value nil))
"Creates an instance of RENDERING-ATTACHMENT-INFO-KHR.
The arguments of this function correspond to the slots of RENDERING-ATTACHMENT-INFO-KHR.


See RENDERING-ATTACHMENT-INFO-KHR"
  (make-instance 'vk:rendering-attachment-info-khr 
                 :next next
                 :image-view image-view
                 :image-layout image-layout
                 :resolve-mode resolve-mode
                 :resolve-image-view resolve-image-view
                 :resolve-image-layout resolve-image-layout
                 :load-op load-op
                 :store-op store-op
                 :clear-value clear-value))

(defun make-rendering-fragment-shading-rate-attachment-info-khr (&key
                                                                 (next nil)
                                                                 (image-view nil)
                                                                 (image-layout nil)
                                                                 (shading-rate-attachment-texel-size (vk:make-extent-2d)))
"Creates an instance of RENDERING-FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR.
The arguments of this function correspond to the slots of RENDERING-FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR.


See RENDERING-FRAGMENT-SHADING-RATE-ATTACHMENT-INFO-KHR"
  (make-instance 'vk:rendering-fragment-shading-rate-attachment-info-khr 
                 :next next
                 :image-view image-view
                 :image-layout image-layout
                 :shading-rate-attachment-texel-size shading-rate-attachment-texel-size))

(defun make-rendering-fragment-density-map-attachment-info-ext (&key (next nil)
                                                                (image-view nil)
                                                                (image-layout nil))
"Creates an instance of RENDERING-FRAGMENT-DENSITY-MAP-ATTACHMENT-INFO-EXT.
The arguments of this function correspond to the slots of RENDERING-FRAGMENT-DENSITY-MAP-ATTACHMENT-INFO-EXT.


See RENDERING-FRAGMENT-DENSITY-MAP-ATTACHMENT-INFO-EXT"
  (make-instance 'vk:rendering-fragment-density-map-attachment-info-ext 
                 :next next
                 :image-view image-view
                 :image-layout image-layout))

(defun make-physical-device-dynamic-rendering-features-khr (&key (next nil)
                                                            (dynamic-rendering nil))
"Creates an instance of PHYSICAL-DEVICE-DYNAMIC-RENDERING-FEATURES-KHR.
The arguments of this function correspond to the slots of PHYSICAL-DEVICE-DYNAMIC-RENDERING-FEATURES-KHR.


See PHYSICAL-DEVICE-DYNAMIC-RENDERING-FEATURES-KHR"
  (make-instance 'vk:physical-device-dynamic-rendering-features-khr 
                 :next next
                 :dynamic-rendering dynamic-rendering))

(defun make-command-buffer-inheritance-rendering-info-khr (&key (next nil)
                                                           (flags nil)
                                                           (view-mask 0)
                                                           (color-attachment-formats nil)
                                                           (depth-attachment-format nil)
                                                           (stencil-attachment-format nil)
                                                           (rasterization-samples nil))
"Creates an instance of COMMAND-BUFFER-INHERITANCE-RENDERING-INFO-KHR.
The arguments of this function correspond to the slots of COMMAND-BUFFER-INHERITANCE-RENDERING-INFO-KHR.


See COMMAND-BUFFER-INHERITANCE-RENDERING-INFO-KHR"
  (make-instance 'vk:command-buffer-inheritance-rendering-info-khr 
                 :next next
                 :flags flags
                 :view-mask view-mask
                 :color-attachment-formats color-attachment-formats
                 :depth-attachment-format depth-attachment-format
                 :stencil-attachment-format stencil-attachment-format
                 :rasterization-samples rasterization-samples))

(defun make-attachment-sample-count-info-amd (&key (next nil)
                                              (color-attachment-samples nil)
                                              (depth-stencil-attachment-samples nil))
"Creates an instance of ATTACHMENT-SAMPLE-COUNT-INFO-AMD.
The arguments of this function correspond to the slots of ATTACHMENT-SAMPLE-COUNT-INFO-AMD.


See ATTACHMENT-SAMPLE-COUNT-INFO-AMD"
  (make-instance 'vk:attachment-sample-count-info-amd 
                 :next next
                 :color-attachment-samples color-attachment-samples
                 :depth-stencil-attachment-samples depth-stencil-attachment-samples))

(defun make-multiview-per-view-attributes-info-nvx (&key (next nil)
                                                    (per-view-attributes nil)
                                                    (per-view-attributes-position-x-only nil))
"Creates an instance of MULTIVIEW-PER-VIEW-ATTRIBUTES-INFO-NVX.
The arguments of this function correspond to the slots of MULTIVIEW-PER-VIEW-ATTRIBUTES-INFO-NVX.


See MULTIVIEW-PER-VIEW-ATTRIBUTES-INFO-NVX"
  (make-instance 'vk:multiview-per-view-attributes-info-nvx 
                 :next next
                 :per-view-attributes per-view-attributes
                 :per-view-attributes-position-x-only per-view-attributes-position-x-only))
